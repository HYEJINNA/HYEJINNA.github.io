{"pages":[],"posts":[{"title":"PyCaret","text":"PyCaret 설치 12345!pip uninstall sklearn -y!pip install --upgrade sklearn!pip install scikit-learn==0.23.2 --user!pip install pycaret!pip install markupsafe==2.0.1 Found existing installation: sklearn 0.0 Uninstalling sklearn-0.0: Successfully uninstalled sklearn-0.0 Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Collecting sklearn Downloading sklearn-0.0.tar.gz (1.1 kB) Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from sklearn) (1.0.2) Requirement already satisfied: joblib&gt;=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-&gt;sklearn) (1.1.0) Requirement already satisfied: threadpoolctl&gt;=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-&gt;sklearn) (3.1.0) Requirement already satisfied: numpy&gt;=1.14.6 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-&gt;sklearn) (1.21.6) Requirement already satisfied: scipy&gt;=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-&gt;sklearn) (1.4.1) Building wheels for collected packages: sklearn Building wheel for sklearn (setup.py) ... \u001b[?25l\u001b[?25hdone Created wheel for sklearn: filename=sklearn-0.0-py2.py3-none-any.whl size=1310 sha256=5566fc096d6ec95daf803ef331a5510fa75a651d8e4d1d9f06b99dfd8c4e2161 Stored in directory: /root/.cache/pip/wheels/46/ef/c3/157e41f5ee1372d1be90b09f74f82b10e391eaacca8f22d33e Successfully built sklearn Installing collected packages: sklearn Successfully installed sklearn-0.0 Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Collecting scikit-learn==0.23.2 Downloading scikit_learn-0.23.2-cp37-cp37m-manylinux1_x86_64.whl (6.8 MB) \u001b[K |████████████████████████████████| 6.8 MB 5.6 MB/s \u001b[?25hRequirement already satisfied: joblib&gt;=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.23.2) (1.1.0) Requirement already satisfied: threadpoolctl&gt;=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.23.2) (3.1.0) Requirement already satisfied: numpy&gt;=1.13.3 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.23.2) (1.21.6) Requirement already satisfied: scipy&gt;=0.19.1 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.23.2) (1.4.1) Installing collected packages: scikit-learn \u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts. yellowbrick 1.4 requires scikit-learn&gt;=1.0.0, but you have scikit-learn 0.23.2 which is incompatible. imbalanced-learn 0.8.1 requires scikit-learn&gt;=0.24, but you have scikit-learn 0.23.2 which is incompatible.\u001b[0m Successfully installed scikit-learn-0.23.2 Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Collecting pycaret Downloading pycaret-2.3.10-py3-none-any.whl (320 kB) \u001b[K |████████████████████████████████| 320 kB 5.4 MB/s \u001b[?25hRequirement already satisfied: IPython in /usr/local/lib/python3.7/dist-packages (from pycaret) (5.5.0) Collecting umap-learn Downloading umap-learn-0.5.3.tar.gz (88 kB) \u001b[K |████████████████████████████████| 88 kB 6.5 MB/s \u001b[?25hRequirement already satisfied: plotly&gt;=4.4.1 in /usr/local/lib/python3.7/dist-packages (from pycaret) (5.5.0) Requirement already satisfied: scikit-learn==0.23.2 in /root/.local/lib/python3.7/site-packages (from pycaret) (0.23.2) Requirement already satisfied: wordcloud in /usr/local/lib/python3.7/dist-packages (from pycaret) (1.5.0) Requirement already satisfied: pyyaml&lt;6.0.0 in /usr/local/lib/python3.7/dist-packages (from pycaret) (3.13) Collecting scikit-plot Downloading scikit_plot-0.3.7-py3-none-any.whl (33 kB) Requirement already satisfied: scipy&lt;=1.5.4 in /usr/local/lib/python3.7/dist-packages (from pycaret) (1.4.1) Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from pycaret) (1.1.0) Requirement already satisfied: cufflinks&gt;=0.17.0 in /usr/local/lib/python3.7/dist-packages (from pycaret) (0.17.3) Collecting imbalanced-learn==0.7.0 Downloading imbalanced_learn-0.7.0-py3-none-any.whl (167 kB) \u001b[K |████████████████████████████████| 167 kB 50.4 MB/s \u001b[?25hRequirement already satisfied: gensim&lt;4.0.0 in /usr/local/lib/python3.7/dist-packages (from pycaret) (3.6.0) Collecting kmodes&gt;=0.10.1 Downloading kmodes-0.12.1-py2.py3-none-any.whl (20 kB) Requirement already satisfied: textblob in /usr/local/lib/python3.7/dist-packages (from pycaret) (0.15.3) Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from pycaret) (3.2.2) Requirement already satisfied: seaborn in /usr/local/lib/python3.7/dist-packages (from pycaret) (0.11.2) Collecting pyLDAvis Downloading pyLDAvis-3.3.1.tar.gz (1.7 MB) \u001b[K |████████████████████████████████| 1.7 MB 20.1 MB/s \u001b[?25h Installing build dependencies ... \u001b[?25l\u001b[?25hdone Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone Installing backend dependencies ... \u001b[?25l\u001b[?25hdone Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone Requirement already satisfied: nltk in /usr/local/lib/python3.7/dist-packages (from pycaret) (3.7) Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from pycaret) (1.3.5) Collecting mlflow Downloading mlflow-1.27.0-py3-none-any.whl (17.9 MB) \u001b[K |████████████████████████████████| 17.9 MB 511 kB/s \u001b[?25hRequirement already satisfied: numba&lt;0.55 in /usr/local/lib/python3.7/dist-packages (from pycaret) (0.51.2) Collecting spacy&lt;2.4.0 Downloading spacy-2.3.7-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (10.4 MB) \u001b[K |████████████████████████████████| 10.4 MB 38.8 MB/s \u001b[?25hRequirement already satisfied: yellowbrick&gt;=1.0.1 in /usr/local/lib/python3.7/dist-packages (from pycaret) (1.4) Requirement already satisfied: ipywidgets in /usr/local/lib/python3.7/dist-packages (from pycaret) (7.7.0) Collecting pyod Downloading pyod-1.0.2.tar.gz (122 kB) \u001b[K |████████████████████████████████| 122 kB 48.7 MB/s \u001b[?25hCollecting pandas-profiling&gt;=2.8.0 Downloading pandas_profiling-3.2.0-py2.py3-none-any.whl (262 kB) \u001b[K |████████████████████████████████| 262 kB 50.6 MB/s \u001b[?25hCollecting lightgbm&gt;=2.3.1 Downloading lightgbm-3.3.2-py3-none-manylinux1_x86_64.whl (2.0 MB) \u001b[K |████████████████████████████████| 2.0 MB 52.5 MB/s \u001b[?25hCollecting Boruta Downloading Boruta-0.3-py3-none-any.whl (56 kB) \u001b[K |████████████████████████████████| 56 kB 4.2 MB/s \u001b[?25hCollecting mlxtend&gt;=0.17.0 Downloading mlxtend-0.20.0-py2.py3-none-any.whl (1.3 MB) \u001b[K |████████████████████████████████| 1.3 MB 48.2 MB/s \u001b[?25hRequirement already satisfied: numpy&gt;=1.13.3 in /usr/local/lib/python3.7/dist-packages (from imbalanced-learn==0.7.0-&gt;pycaret) (1.21.6) Requirement already satisfied: threadpoolctl&gt;=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.23.2-&gt;pycaret) (3.1.0) Requirement already satisfied: colorlover&gt;=0.2.1 in /usr/local/lib/python3.7/dist-packages (from cufflinks&gt;=0.17.0-&gt;pycaret) (0.3.0) Requirement already satisfied: setuptools&gt;=34.4.1 in /usr/local/lib/python3.7/dist-packages (from cufflinks&gt;=0.17.0-&gt;pycaret) (57.4.0) Requirement already satisfied: six&gt;=1.9.0 in /usr/local/lib/python3.7/dist-packages (from cufflinks&gt;=0.17.0-&gt;pycaret) (1.15.0) Requirement already satisfied: smart-open&gt;=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim&lt;4.0.0-&gt;pycaret) (5.2.1) Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from IPython-&gt;pycaret) (4.4.2) Requirement already satisfied: prompt-toolkit&lt;2.0.0,&gt;=1.0.4 in /usr/local/lib/python3.7/dist-packages (from IPython-&gt;pycaret) (1.0.18) Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from IPython-&gt;pycaret) (2.6.1) Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from IPython-&gt;pycaret) (4.8.0) Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from IPython-&gt;pycaret) (0.7.5) Requirement already satisfied: traitlets&gt;=4.2 in /usr/local/lib/python3.7/dist-packages (from IPython-&gt;pycaret) (5.1.1) Requirement already satisfied: simplegeneric&gt;0.8 in /usr/local/lib/python3.7/dist-packages (from IPython-&gt;pycaret) (0.8.1) Requirement already satisfied: jupyterlab-widgets&gt;=1.0.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets-&gt;pycaret) (1.1.0) Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets-&gt;pycaret) (3.6.0) Requirement already satisfied: nbformat&gt;=4.2.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets-&gt;pycaret) (5.4.0) Requirement already satisfied: ipykernel&gt;=4.5.1 in /usr/local/lib/python3.7/dist-packages (from ipywidgets-&gt;pycaret) (4.10.1) Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets-&gt;pycaret) (0.2.0) Requirement already satisfied: jupyter-client in /usr/local/lib/python3.7/dist-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;pycaret) (5.3.5) Requirement already satisfied: tornado&gt;=4.0 in /usr/local/lib/python3.7/dist-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;pycaret) (5.1.1) Requirement already satisfied: wheel in /usr/local/lib/python3.7/dist-packages (from lightgbm&gt;=2.3.1-&gt;pycaret) (0.37.1) Downloading mlxtend-0.19.0-py2.py3-none-any.whl (1.3 MB) \u001b[K |████████████████████████████████| 1.3 MB 37.7 MB/s \u001b[?25hRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;pycaret) (3.0.9) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;pycaret) (0.11.0) Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;pycaret) (2.8.2) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;pycaret) (1.4.3) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver&gt;=1.0.1-&gt;matplotlib-&gt;pycaret) (4.1.1) Requirement already satisfied: jsonschema&gt;=2.6 in /usr/local/lib/python3.7/dist-packages (from nbformat&gt;=4.2.0-&gt;ipywidgets-&gt;pycaret) (4.3.3) Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.7/dist-packages (from nbformat&gt;=4.2.0-&gt;ipywidgets-&gt;pycaret) (2.15.3) Requirement already satisfied: jupyter-core in /usr/local/lib/python3.7/dist-packages (from nbformat&gt;=4.2.0-&gt;ipywidgets-&gt;pycaret) (4.10.0) Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,&gt;=0.14.0 in /usr/local/lib/python3.7/dist-packages (from jsonschema&gt;=2.6-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets-&gt;pycaret) (0.18.1) Requirement already satisfied: attrs&gt;=17.4.0 in /usr/local/lib/python3.7/dist-packages (from jsonschema&gt;=2.6-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets-&gt;pycaret) (21.4.0) Requirement already satisfied: importlib-resources&gt;=1.4.0 in /usr/local/lib/python3.7/dist-packages (from jsonschema&gt;=2.6-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets-&gt;pycaret) (5.7.1) Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from jsonschema&gt;=2.6-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets-&gt;pycaret) (4.11.4) Requirement already satisfied: zipp&gt;=3.1.0 in /usr/local/lib/python3.7/dist-packages (from importlib-resources&gt;=1.4.0-&gt;jsonschema&gt;=2.6-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets-&gt;pycaret) (3.8.0) Requirement already satisfied: llvmlite&lt;0.35,&gt;=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba&lt;0.55-&gt;pycaret) (0.34.0) Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;pycaret) (2022.1) Requirement already satisfied: missingno&gt;=0.4.2 in /usr/local/lib/python3.7/dist-packages (from pandas-profiling&gt;=2.8.0-&gt;pycaret) (0.5.1) Requirement already satisfied: tqdm&gt;=4.48.2 in /usr/local/lib/python3.7/dist-packages (from pandas-profiling&gt;=2.8.0-&gt;pycaret) (4.64.0) Collecting visions[type_image_path]==0.7.4 Downloading visions-0.7.4-py3-none-any.whl (102 kB) \u001b[K |████████████████████████████████| 102 kB 10.2 MB/s \u001b[?25hCollecting htmlmin&gt;=0.1.12 Downloading htmlmin-0.1.12.tar.gz (19 kB) Collecting multimethod&gt;=1.4 Downloading multimethod-1.8-py3-none-any.whl (9.8 kB) Requirement already satisfied: jinja2&gt;=2.11.1 in /usr/local/lib/python3.7/dist-packages (from pandas-profiling&gt;=2.8.0-&gt;pycaret) (2.11.3) Collecting requests&gt;=2.24.0 Downloading requests-2.28.1-py3-none-any.whl (62 kB) \u001b[K |████████████████████████████████| 62 kB 1.3 MB/s \u001b[?25hCollecting phik&gt;=0.11.1 Downloading phik-0.12.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (690 kB) \u001b[K |████████████████████████████████| 690 kB 46.7 MB/s \u001b[?25hCollecting tangled-up-in-unicode==0.2.0 Downloading tangled_up_in_unicode-0.2.0-py3-none-any.whl (4.7 MB) \u001b[K |████████████████████████████████| 4.7 MB 42.8 MB/s \u001b[?25hRequirement already satisfied: pydantic&gt;=1.8.1 in /usr/local/lib/python3.7/dist-packages (from pandas-profiling&gt;=2.8.0-&gt;pycaret) (1.8.2) Collecting markupsafe~=2.1.1 Downloading MarkupSafe-2.1.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB) Collecting pyyaml&lt;6.0.0 Downloading PyYAML-5.4.1-cp37-cp37m-manylinux1_x86_64.whl (636 kB) \u001b[K |████████████████████████████████| 636 kB 48.3 MB/s \u001b[?25hRequirement already satisfied: networkx&gt;=2.4 in /usr/local/lib/python3.7/dist-packages (from visions[type_image_path]==0.7.4-&gt;pandas-profiling&gt;=2.8.0-&gt;pycaret) (2.6.3) Collecting imagehash Downloading ImageHash-4.2.1.tar.gz (812 kB) \u001b[K |████████████████████████████████| 812 kB 53.9 MB/s \u001b[?25hRequirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from visions[type_image_path]==0.7.4-&gt;pandas-profiling&gt;=2.8.0-&gt;pycaret) (7.1.2) Collecting scipy&lt;=1.5.4 Downloading scipy-1.5.4-cp37-cp37m-manylinux1_x86_64.whl (25.9 MB) \u001b[K |████████████████████████████████| 25.9 MB 55.2 MB/s \u001b[?25hRequirement already satisfied: tenacity&gt;=6.2.0 in /usr/local/lib/python3.7/dist-packages (from plotly&gt;=4.4.1-&gt;pycaret) (8.0.1) Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit&lt;2.0.0,&gt;=1.0.4-&gt;IPython-&gt;pycaret) (0.2.5) Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.24.0-&gt;pandas-profiling&gt;=2.8.0-&gt;pycaret) (1.24.3) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.24.0-&gt;pandas-profiling&gt;=2.8.0-&gt;pycaret) (2022.6.15) Requirement already satisfied: charset-normalizer&lt;3,&gt;=2 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.24.0-&gt;pandas-profiling&gt;=2.8.0-&gt;pycaret) (2.0.12) Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.24.0-&gt;pandas-profiling&gt;=2.8.0-&gt;pycaret) (2.10) Requirement already satisfied: blis&lt;0.8.0,&gt;=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;2.4.0-&gt;pycaret) (0.7.7) Collecting plac&lt;1.2.0,&gt;=0.9.6 Downloading plac-1.1.3-py2.py3-none-any.whl (20 kB) Collecting thinc&lt;7.5.0,&gt;=7.4.1 Downloading thinc-7.4.5-cp37-cp37m-manylinux2014_x86_64.whl (1.0 MB) \u001b[K |████████████████████████████████| 1.0 MB 44.5 MB/s \u001b[?25hRequirement already satisfied: wasabi&lt;1.1.0,&gt;=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;2.4.0-&gt;pycaret) (0.9.1) Requirement already satisfied: cymem&lt;2.1.0,&gt;=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;2.4.0-&gt;pycaret) (2.0.6) Collecting catalogue&lt;1.1.0,&gt;=0.0.7 Downloading catalogue-1.0.0-py2.py3-none-any.whl (7.7 kB) Collecting srsly&lt;1.1.0,&gt;=1.0.2 Downloading srsly-1.0.5-cp37-cp37m-manylinux2014_x86_64.whl (184 kB) \u001b[K |████████████████████████████████| 184 kB 48.8 MB/s \u001b[?25hRequirement already satisfied: preshed&lt;3.1.0,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;2.4.0-&gt;pycaret) (3.0.6) Requirement already satisfied: murmurhash&lt;1.1.0,&gt;=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;2.4.0-&gt;pycaret) (1.0.7) Requirement already satisfied: notebook&gt;=4.4.1 in /usr/local/lib/python3.7/dist-packages (from widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (5.3.1) Requirement already satisfied: nbconvert in /usr/local/lib/python3.7/dist-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (5.6.1) Requirement already satisfied: Send2Trash in /usr/local/lib/python3.7/dist-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (1.8.0) Requirement already satisfied: terminado&gt;=0.8.1 in /usr/local/lib/python3.7/dist-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (0.13.3) Requirement already satisfied: pyzmq&gt;=13 in /usr/local/lib/python3.7/dist-packages (from jupyter-client-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;pycaret) (23.1.0) Requirement already satisfied: ptyprocess in /usr/local/lib/python3.7/dist-packages (from terminado&gt;=0.8.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (0.7.0) Collecting yellowbrick&gt;=1.0.1 Downloading yellowbrick-1.3.post1-py3-none-any.whl (271 kB) \u001b[K |████████████████████████████████| 271 kB 51.0 MB/s \u001b[?25hCollecting numpy&gt;=1.13.3 Downloading numpy-1.19.5-cp37-cp37m-manylinux2010_x86_64.whl (14.8 MB) \u001b[K |████████████████████████████████| 14.8 MB 41.8 MB/s \u001b[?25hRequirement already satisfied: PyWavelets in /usr/local/lib/python3.7/dist-packages (from imagehash-&gt;visions[type_image_path]==0.7.4-&gt;pandas-profiling&gt;=2.8.0-&gt;pycaret) (1.3.0) Collecting querystring-parser Downloading querystring_parser-1.2.4-py2.py3-none-any.whl (7.9 kB) Collecting prometheus-flask-exporter Downloading prometheus_flask_exporter-0.20.2-py3-none-any.whl (18 kB) Requirement already satisfied: click&gt;=7.0 in /usr/local/lib/python3.7/dist-packages (from mlflow-&gt;pycaret) (7.1.2) Collecting databricks-cli&gt;=0.8.7 Downloading databricks-cli-0.17.0.tar.gz (81 kB) \u001b[K |████████████████████████████████| 81 kB 7.6 MB/s \u001b[?25hRequirement already satisfied: sqlparse&gt;=0.3.1 in /usr/local/lib/python3.7/dist-packages (from mlflow-&gt;pycaret) (0.4.2) Collecting docker&gt;=4.0.0 Downloading docker-5.0.3-py2.py3-none-any.whl (146 kB) \u001b[K |████████████████████████████████| 146 kB 46.0 MB/s \u001b[?25hRequirement already satisfied: entrypoints in /usr/local/lib/python3.7/dist-packages (from mlflow-&gt;pycaret) (0.4) Requirement already satisfied: Flask in /usr/local/lib/python3.7/dist-packages (from mlflow-&gt;pycaret) (1.1.4) Requirement already satisfied: sqlalchemy&gt;=1.4.0 in /usr/local/lib/python3.7/dist-packages (from mlflow-&gt;pycaret) (1.4.37) Requirement already satisfied: protobuf&gt;=3.12.0 in /usr/local/lib/python3.7/dist-packages (from mlflow-&gt;pycaret) (3.17.3) Collecting gunicorn Downloading gunicorn-20.1.0-py3-none-any.whl (79 kB) \u001b[K |████████████████████████████████| 79 kB 7.5 MB/s \u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from mlflow-&gt;pycaret) (21.3) Collecting alembic Downloading alembic-1.8.0-py3-none-any.whl (209 kB) \u001b[K |████████████████████████████████| 209 kB 47.5 MB/s \u001b[?25hCollecting gitpython&gt;=2.1.0 Downloading GitPython-3.1.27-py3-none-any.whl (181 kB) \u001b[K |████████████████████████████████| 181 kB 47.2 MB/s \u001b[?25hRequirement already satisfied: cloudpickle in /usr/local/lib/python3.7/dist-packages (from mlflow-&gt;pycaret) (1.3.0) Collecting pyjwt&gt;=1.7.0 Downloading PyJWT-2.4.0-py3-none-any.whl (18 kB) Requirement already satisfied: oauthlib&gt;=3.1.0 in /usr/local/lib/python3.7/dist-packages (from databricks-cli&gt;=0.8.7-&gt;mlflow-&gt;pycaret) (3.2.0) Requirement already satisfied: tabulate&gt;=0.7.7 in /usr/local/lib/python3.7/dist-packages (from databricks-cli&gt;=0.8.7-&gt;mlflow-&gt;pycaret) (0.8.9) Collecting websocket-client&gt;=0.32.0 Downloading websocket_client-1.3.3-py3-none-any.whl (54 kB) \u001b[K |████████████████████████████████| 54 kB 2.4 MB/s \u001b[?25hCollecting gitdb&lt;5,&gt;=4.0.1 Downloading gitdb-4.0.9-py3-none-any.whl (63 kB) \u001b[K |████████████████████████████████| 63 kB 1.6 MB/s \u001b[?25hCollecting smmap&lt;6,&gt;=3.0.1 Downloading smmap-5.0.0-py3-none-any.whl (24 kB) Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.7/dist-packages (from sqlalchemy&gt;=1.4.0-&gt;mlflow-&gt;pycaret) (1.1.2) Collecting Mako Downloading Mako-1.2.1-py3-none-any.whl (78 kB) \u001b[K |████████████████████████████████| 78 kB 7.2 MB/s \u001b[?25hRequirement already satisfied: Werkzeug&lt;2.0,&gt;=0.15 in /usr/local/lib/python3.7/dist-packages (from Flask-&gt;mlflow-&gt;pycaret) (1.0.1) Requirement already satisfied: itsdangerous&lt;2.0,&gt;=0.24 in /usr/local/lib/python3.7/dist-packages (from Flask-&gt;mlflow-&gt;pycaret) (1.1.0) Requirement already satisfied: defusedxml in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (0.7.1) Requirement already satisfied: testpath in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (0.6.0) Requirement already satisfied: bleach in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (5.0.0) Requirement already satisfied: pandocfilters&gt;=1.4.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (1.5.0) Requirement already satisfied: mistune&lt;2,&gt;=0.8.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (0.8.4) Requirement already satisfied: webencodings in /usr/local/lib/python3.7/dist-packages (from bleach-&gt;nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets-&gt;pycaret) (0.5.1) Requirement already satisfied: regex&gt;=2021.8.3 in /usr/local/lib/python3.7/dist-packages (from nltk-&gt;pycaret) (2022.6.2) Requirement already satisfied: prometheus-client in /usr/local/lib/python3.7/dist-packages (from prometheus-flask-exporter-&gt;mlflow-&gt;pycaret) (0.14.1) Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyLDAvis-&gt;pycaret) (0.16.0) Requirement already satisfied: numexpr in /usr/local/lib/python3.7/dist-packages (from pyLDAvis-&gt;pycaret) (2.8.1) Collecting funcy Downloading funcy-1.17-py2.py3-none-any.whl (33 kB) Collecting pyLDAvis Downloading pyLDAvis-3.3.0.tar.gz (1.7 MB) \u001b[K |████████████████████████████████| 1.7 MB 44.8 MB/s \u001b[?25h Installing build dependencies ... \u001b[?25l\u001b[?25hdone Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone Installing backend dependencies ... \u001b[?25l\u001b[?25hdone Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone Downloading pyLDAvis-3.2.2.tar.gz (1.7 MB) \u001b[K |████████████████████████████████| 1.7 MB 41.2 MB/s \u001b[?25hRequirement already satisfied: statsmodels in /usr/local/lib/python3.7/dist-packages (from pyod-&gt;pycaret) (0.10.2) Requirement already satisfied: patsy&gt;=0.4.0 in /usr/local/lib/python3.7/dist-packages (from statsmodels-&gt;pyod-&gt;pycaret) (0.5.2) Collecting pynndescent&gt;=0.5 Downloading pynndescent-0.5.7.tar.gz (1.1 MB) \u001b[K |████████████████████████████████| 1.1 MB 38.5 MB/s \u001b[?25hBuilding wheels for collected packages: htmlmin, imagehash, databricks-cli, pyLDAvis, pyod, umap-learn, pynndescent Building wheel for htmlmin (setup.py) ... \u001b[?25l\u001b[?25hdone Created wheel for htmlmin: filename=htmlmin-0.1.12-py3-none-any.whl size=27098 sha256=e3b75c8eee79619a12cedd3b632369a2955b57c93c63802a4c2732284c215696 Stored in directory: /root/.cache/pip/wheels/70/e1/52/5b14d250ba868768823940c3229e9950d201a26d0bd3ee8655 Building wheel for imagehash (setup.py) ... \u001b[?25l\u001b[?25hdone Created wheel for imagehash: filename=ImageHash-4.2.1-py2.py3-none-any.whl size=295206 sha256=d7f8a6fe5d2a22ad0255e3b49324a5256cc1d6a086382d751c62801c6f8e60af Stored in directory: /root/.cache/pip/wheels/4c/d5/59/5e3e297533ddb09407769762985d134135064c6831e29a914e Building wheel for databricks-cli (setup.py) ... \u001b[?25l\u001b[?25hdone Created wheel for databricks-cli: filename=databricks_cli-0.17.0-py3-none-any.whl size=141960 sha256=374b392a36d039a9db36341f4f77373544e118f264e946de6afc3df685b6f2a6 Stored in directory: /root/.cache/pip/wheels/55/c3/db/33705569425fd2bdc9ea73051a8053fa26965c2bce8a146747 Building wheel for pyLDAvis (setup.py) ... \u001b[?25l\u001b[?25hdone Created wheel for pyLDAvis: filename=pyLDAvis-3.2.2-py2.py3-none-any.whl size=135617 sha256=622de91d9e6d7774f7ebf96f7f8a8024bdd26fd58b3b1b64ed2b1c0c065ca25b Stored in directory: /root/.cache/pip/wheels/f8/b1/9b/560ac1931796b7303f7b517b949d2d31a4fbc512aad3b9f284 Building wheel for pyod (setup.py) ... \u001b[?25l\u001b[?25hdone Created wheel for pyod: filename=pyod-1.0.2-py3-none-any.whl size=150272 sha256=6ed42bc4ee11714dd33f87144c4a3a23358181e9046b013a1ada303f164ffe02 Stored in directory: /root/.cache/pip/wheels/e6/8f/06/5512935ed3c79659f612e8bb8f43cb51dd47c21973e0230997 Building wheel for umap-learn (setup.py) ... \u001b[?25l\u001b[?25hdone Created wheel for umap-learn: filename=umap_learn-0.5.3-py3-none-any.whl size=82829 sha256=2e291b651f239ed6f1623db5e3de3948bf354c3a1fe7c9f6c83f950cf4b33d26 Stored in directory: /root/.cache/pip/wheels/b3/52/a5/1fd9e3e76a7ab34f134c07469cd6f16e27ef3a37aeff1fe821 Building wheel for pynndescent (setup.py) ... \u001b[?25l\u001b[?25hdone Created wheel for pynndescent: filename=pynndescent-0.5.7-py3-none-any.whl size=54286 sha256=8ba2a720da2de07ca7a3a9448738941b79964439ff57c152ea33f0fd375b3e74 Stored in directory: /root/.cache/pip/wheels/7f/2a/f8/7bd5dcec71bd5c669f6f574db3113513696b98f3f9b51f496c Successfully built htmlmin imagehash databricks-cli pyLDAvis pyod umap-learn pynndescent Installing collected packages: markupsafe, numpy, tangled-up-in-unicode, smmap, scipy, multimethod, websocket-client, visions, srsly, requests, pyjwt, plac, Mako, imagehash, gitdb, catalogue, thinc, querystring-parser, pyyaml, pynndescent, prometheus-flask-exporter, phik, htmlmin, gunicorn, gitpython, funcy, docker, databricks-cli, alembic, yellowbrick, umap-learn, spacy, scikit-plot, pyod, pyLDAvis, pandas-profiling, mlxtend, mlflow, lightgbm, kmodes, imbalanced-learn, Boruta, pycaret Attempting uninstall: markupsafe Found existing installation: MarkupSafe 2.0.1 Uninstalling MarkupSafe-2.0.1: Successfully uninstalled MarkupSafe-2.0.1 Attempting uninstall: numpy Found existing installation: numpy 1.21.6 Uninstalling numpy-1.21.6: Successfully uninstalled numpy-1.21.6 Attempting uninstall: scipy Found existing installation: scipy 1.4.1 Uninstalling scipy-1.4.1: Successfully uninstalled scipy-1.4.1 Attempting uninstall: srsly Found existing installation: srsly 2.4.3 Uninstalling srsly-2.4.3: Successfully uninstalled srsly-2.4.3 Attempting uninstall: requests Found existing installation: requests 2.23.0 Uninstalling requests-2.23.0: Successfully uninstalled requests-2.23.0 Attempting uninstall: catalogue Found existing installation: catalogue 2.0.7 Uninstalling catalogue-2.0.7: Successfully uninstalled catalogue-2.0.7 Attempting uninstall: thinc Found existing installation: thinc 8.0.17 Uninstalling thinc-8.0.17: Successfully uninstalled thinc-8.0.17 Attempting uninstall: pyyaml Found existing installation: PyYAML 3.13 Uninstalling PyYAML-3.13: Successfully uninstalled PyYAML-3.13 Attempting uninstall: yellowbrick Found existing installation: yellowbrick 1.4 Uninstalling yellowbrick-1.4: Successfully uninstalled yellowbrick-1.4 Attempting uninstall: spacy Found existing installation: spacy 3.3.1 Uninstalling spacy-3.3.1: Successfully uninstalled spacy-3.3.1 Attempting uninstall: pandas-profiling Found existing installation: pandas-profiling 1.4.1 Uninstalling pandas-profiling-1.4.1: Successfully uninstalled pandas-profiling-1.4.1 Attempting uninstall: mlxtend Found existing installation: mlxtend 0.14.0 Uninstalling mlxtend-0.14.0: Successfully uninstalled mlxtend-0.14.0 Attempting uninstall: lightgbm Found existing installation: lightgbm 2.2.3 Uninstalling lightgbm-2.2.3: Successfully uninstalled lightgbm-2.2.3 Attempting uninstall: imbalanced-learn Found existing installation: imbalanced-learn 0.8.1 Uninstalling imbalanced-learn-0.8.1: Successfully uninstalled imbalanced-learn-0.8.1 \u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts. xarray-einstats 0.2.2 requires numpy&gt;=1.21, but you have numpy 1.19.5 which is incompatible. tensorflow 2.8.2+zzzcolab20220527125636 requires numpy&gt;=1.20, but you have numpy 1.19.5 which is incompatible. google-colab 1.0.0 requires requests~=2.23.0, but you have requests 2.28.1 which is incompatible. en-core-web-sm 3.3.0 requires spacy&lt;3.4.0,&gt;=3.3.0.dev0, but you have spacy 2.3.7 which is incompatible. datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible. albumentations 0.1.12 requires imgaug&lt;0.2.7,&gt;=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m Successfully installed Boruta-0.3 Mako-1.2.1 alembic-1.8.0 catalogue-1.0.0 databricks-cli-0.17.0 docker-5.0.3 funcy-1.17 gitdb-4.0.9 gitpython-3.1.27 gunicorn-20.1.0 htmlmin-0.1.12 imagehash-4.2.1 imbalanced-learn-0.7.0 kmodes-0.12.1 lightgbm-3.3.2 markupsafe-2.1.1 mlflow-1.27.0 mlxtend-0.19.0 multimethod-1.8 numpy-1.19.5 pandas-profiling-3.2.0 phik-0.12.2 plac-1.1.3 prometheus-flask-exporter-0.20.2 pyLDAvis-3.2.2 pycaret-2.3.10 pyjwt-2.4.0 pynndescent-0.5.7 pyod-1.0.2 pyyaml-5.4.1 querystring-parser-1.2.4 requests-2.28.1 scikit-plot-0.3.7 scipy-1.5.4 smmap-5.0.0 spacy-2.3.7 srsly-1.0.5 tangled-up-in-unicode-0.2.0 thinc-7.4.5 umap-learn-0.5.3 visions-0.7.4 websocket-client-1.3.3 yellowbrick-1.3.post1 Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Collecting markupsafe==2.0.1 Downloading MarkupSafe-2.0.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (31 kB) Installing collected packages: markupsafe Attempting uninstall: markupsafe Found existing installation: MarkupSafe 2.1.1 Uninstalling MarkupSafe-2.1.1: Successfully uninstalled MarkupSafe-2.1.1 \u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts. pandas-profiling 3.2.0 requires markupsafe~=2.1.1, but you have markupsafe 2.0.1 which is incompatible. datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\u001b[0m Successfully installed markupsafe-2.0.1 Pycaret을 구글 코랩에서 활성화 12from pycaret.utils import enable_colabenable_colab() Colab mode enabled. 데이터 불러오기12from pycaret.datasets import get_datadataset = get_data('credit') requirejs.config({ paths: { base: '/static/base', plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext', }, }); .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } LIMIT_BAL SEX EDUCATION MARRIAGE AGE PAY_1 PAY_2 PAY_3 PAY_4 PAY_5 ... BILL_AMT4 BILL_AMT5 BILL_AMT6 PAY_AMT1 PAY_AMT2 PAY_AMT3 PAY_AMT4 PAY_AMT5 PAY_AMT6 default 0 20000 2 2 1 24 2 2 -1 -1 -2 ... 0.0 0.0 0.0 0.0 689.0 0.0 0.0 0.0 0.0 1 1 90000 2 2 2 34 0 0 0 0 0 ... 14331.0 14948.0 15549.0 1518.0 1500.0 1000.0 1000.0 1000.0 5000.0 0 2 50000 2 2 1 37 0 0 0 0 0 ... 28314.0 28959.0 29547.0 2000.0 2019.0 1200.0 1100.0 1069.0 1000.0 0 3 50000 1 2 1 57 -1 0 -1 0 0 ... 20940.0 19146.0 19131.0 2000.0 36681.0 10000.0 9000.0 689.0 679.0 0 4 50000 1 1 2 37 0 0 0 0 0 ... 19394.0 19619.0 20024.0 2500.0 1815.0 657.0 1000.0 1000.0 800.0 0 5 rows × 24 columns &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-29e0804e-13fd-429f-bdf5-165511b24648 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-29e0804e-13fd-429f-bdf5-165511b24648'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/PyCaret/output_type'] = 'display_data'; await google.colab.images/PyCaret/output.renderimages/PyCaret/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1dataset.info() requirejs.config({ paths: { base: '/static/base', plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext', }, }); &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 24000 entries, 0 to 23999 Data columns (total 24 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 LIMIT_BAL 24000 non-null int64 1 SEX 24000 non-null int64 2 EDUCATION 24000 non-null int64 3 MARRIAGE 24000 non-null int64 4 AGE 24000 non-null int64 5 PAY_1 24000 non-null int64 6 PAY_2 24000 non-null int64 7 PAY_3 24000 non-null int64 8 PAY_4 24000 non-null int64 9 PAY_5 24000 non-null int64 10 PAY_6 24000 non-null int64 11 BILL_AMT1 24000 non-null float64 12 BILL_AMT2 24000 non-null float64 13 BILL_AMT3 24000 non-null float64 14 BILL_AMT4 24000 non-null float64 15 BILL_AMT5 24000 non-null float64 16 BILL_AMT6 24000 non-null float64 17 PAY_AMT1 24000 non-null float64 18 PAY_AMT2 24000 non-null float64 19 PAY_AMT3 24000 non-null float64 20 PAY_AMT4 24000 non-null float64 21 PAY_AMT5 24000 non-null float64 22 PAY_AMT6 24000 non-null float64 23 default 24000 non-null int64 dtypes: float64(12), int64(12) memory usage: 4.4 MB 123456data = dataset.sample(frac=0.95, random_state=786)data_unseen = dataset.drop(data.index)data.reset_index(inplace=True, drop=True)data_unseen.reset_index(inplace=True, drop=True)print('Data for Modeling: ' + str(data.shape))print('Unseen Data For Predictions: ' + str(data_unseen.shape)) requirejs.config({ paths: { base: '/static/base', plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext', }, }); Data for Modeling: (22800, 24) Unseen Data For Predictions: (1200, 24) setup 123456import jinja2from pycaret.classification import *exp_clf101 = setup(data = data, target = 'default', pca = True, pca_components = 10, session_id=123) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Description Value 0 session_id 123 1 Target default 2 Target Type Binary 3 Label Encoded None 4 Original Data (22800, 24) 5 Missing Values False 6 Numeric Features 14 7 Categorical Features 9 8 Ordinal Features False 9 High Cardinality Features False 10 High Cardinality Method None 11 Transformed Train Set (15959, 10) 12 Transformed Test Set (6841, 10) 13 Shuffle Train-Test True 14 Stratify Train-Test False 15 Fold Generator StratifiedKFold 16 Fold Number 10 17 CPU Jobs -1 18 Use GPU False 19 Log Experiment False 20 Experiment Name clf-default-name 21 USI 1256 22 Imputation Type simple 23 Iterative Imputation Iteration None 24 Numeric Imputer mean 25 Iterative Imputation Numeric Model None 26 Categorical Imputer constant 27 Iterative Imputation Categorical Model None 28 Unknown Categoricals Handling least_frequent 29 Normalize False 30 Normalize Method None 31 Transformation False 32 Transformation Method None 33 PCA True 34 PCA Method linear 35 PCA Components 10 36 Ignore Low Variance False 37 Combine Rare Levels False 38 Rare Level Threshold None 39 Numeric Binning False 40 Remove Outliers False 41 Outliers Threshold None 42 Remove Multicollinearity False 43 Multicollinearity Threshold None 44 Remove Perfect Collinearity True 45 Clustering False 46 Clustering Iteration None 47 Polynomial Features False 48 Polynomial Degree None 49 Trignometry Features False 50 Polynomial Threshold None 51 Group Features False 52 Feature Selection False 53 Feature Selection Method classic 54 Features Selection Threshold None 55 Feature Interaction False 56 Feature Ratio False 57 Interaction Threshold None 58 Fix Imbalance False 59 Fix Imbalance Method SMOTE &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-7f4d956a-b4cb-43a7-b24f-2da9353f8d09 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-7f4d956a-b4cb-43a7-b24f-2da9353f8d09'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/PyCaret/output_type'] = 'display_data'; await google.colab.images/PyCaret/output.renderimages/PyCaret/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 모델링1best_model = compare_models() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Model Accuracy AUC Recall Prec. F1 Kappa MCC TT (Sec) ridge Ridge Classifier 0.8254 0.0000 0.3637 0.6913 0.4764 0.3836 0.4122 0.048 lda Linear Discriminant Analysis 0.8247 0.7634 0.3755 0.6794 0.4835 0.3884 0.4132 0.321 gbc Gradient Boosting Classifier 0.8226 0.7789 0.3551 0.6806 0.4664 0.3725 0.4010 5.241 ada Ada Boost Classifier 0.8221 0.7697 0.3505 0.6811 0.4626 0.3690 0.3983 1.220 lightgbm Light Gradient Boosting Machine 0.8210 0.7750 0.3609 0.6679 0.4683 0.3721 0.3977 0.444 rf Random Forest Classifier 0.8199 0.7598 0.3663 0.6601 0.4707 0.3727 0.3965 2.864 et Extra Trees Classifier 0.8092 0.7377 0.3677 0.6047 0.4571 0.3497 0.3657 2.473 lr Logistic Regression 0.7814 0.6410 0.0003 0.1000 0.0006 0.0003 0.0034 1.039 dummy Dummy Classifier 0.7814 0.5000 0.0000 0.0000 0.0000 0.0000 0.0000 0.032 knn K Neighbors Classifier 0.7547 0.5939 0.1763 0.3719 0.2388 0.1145 0.1259 0.910 dt Decision Tree Classifier 0.7293 0.6147 0.4104 0.3878 0.3986 0.2242 0.2245 0.350 svm SVM - Linear Kernel 0.7277 0.0000 0.1017 0.1671 0.0984 0.0067 0.0075 0.465 qda Quadratic Discriminant Analysis 0.5098 0.5473 0.6141 0.2472 0.3488 0.0600 0.0805 0.179 nb Naive Bayes 0.3760 0.6442 0.8845 0.2441 0.3826 0.0608 0.1207 0.038 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-21491840-e08f-4856-9210-d2c4ce582989 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-21491840-e08f-4856-9210-d2c4ce582989'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/PyCaret/output_type'] = 'display_data'; await google.colab.images/PyCaret/output.renderimages/PyCaret/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 가장 좋은 모델을 뽑아주세욧! 1print(best_model) requirejs.config({ paths: { base: '/static/base', plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext', }, }); RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True, max_iter=None, normalize=False, random_state=123, solver='auto', tol=0.001) 모델 생성 모델 생성 1knn_model = create_model('knn') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Accuracy AUC Recall Prec. F1 Kappa MCC Fold 0 0.7469 0.6020 0.1920 0.3545 0.2491 0.1128 0.1204 1 0.7550 0.5894 0.2092 0.3883 0.2719 0.1402 0.1500 2 0.7506 0.5883 0.1576 0.3459 0.2165 0.0923 0.1024 3 0.7419 0.5818 0.1519 0.3136 0.2046 0.0723 0.0790 4 0.7563 0.5908 0.1490 0.3611 0.2110 0.0954 0.1085 5 0.7550 0.5997 0.1748 0.3720 0.2378 0.1139 0.1255 6 0.7638 0.5890 0.1891 0.4125 0.2593 0.1413 0.1565 7 0.7613 0.6240 0.1633 0.3904 0.2303 0.1163 0.1318 8 0.7619 0.5988 0.1862 0.4037 0.2549 0.1356 0.1500 9 0.7549 0.5756 0.1897 0.3771 0.2524 0.1246 0.1351 Mean 0.7547 0.5939 0.1763 0.3719 0.2388 0.1145 0.1259 Std 0.0065 0.0126 0.0191 0.0279 0.0214 0.0214 0.0230 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-44a04167-0b6b-4583-89b4-ca7d8baaab2f button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-44a04167-0b6b-4583-89b4-ca7d8baaab2f'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/PyCaret/output_type'] = 'display_data'; await google.colab.images/PyCaret/output.renderimages/PyCaret/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123456import numpy as np params = { 'n_neighbors' : np.arange(0, 50, 1)}tunned_knn = tune_model(knn_model, custom_grid=params)print(tunned_knn) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Accuracy AUC Recall Prec. F1 Kappa MCC Fold 0 0.7813 0.6482 0.0372 0.5000 0.0693 0.0402 0.0876 1 0.7807 0.6436 0.0315 0.4783 0.0591 0.0330 0.0759 2 0.7744 0.6563 0.0315 0.3333 0.0576 0.0206 0.0403 3 0.7845 0.6589 0.0659 0.5610 0.1179 0.0754 0.1345 4 0.7826 0.6645 0.0315 0.5500 0.0596 0.0368 0.0903 5 0.7794 0.6477 0.0544 0.4634 0.0974 0.0539 0.0961 6 0.7826 0.6278 0.0630 0.5238 0.1125 0.0688 0.1214 7 0.7751 0.6702 0.0372 0.3611 0.0675 0.0278 0.0523 8 0.7813 0.6409 0.0630 0.5000 0.1120 0.0662 0.1146 9 0.7881 0.6426 0.0661 0.6389 0.1198 0.0822 0.1548 Mean 0.7810 0.6501 0.0482 0.4910 0.0873 0.0505 0.0968 Std 0.0039 0.0119 0.0148 0.0861 0.0255 0.0206 0.0338 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-e0086458-f318-4e5f-9c06-c6167a9a4b9e button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-e0086458-f318-4e5f-9c06-c6167a9a4b9e'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/PyCaret/output_type'] = 'display_data'; await google.colab.images/PyCaret/output.renderimages/PyCaret/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski', metric_params=None, n_jobs=-1, n_neighbors=42, p=2, weights='uniform') auc 최소 0.5 좋은 모델 기준 0.8 이상 최고 1 1plot_model(tunned_knn, plot='auc') 123# 의사결정트리# plot_model(tunned_knn, plot='feature')plot_model(tunned_knn, plot='confusion_matrix') 1evaluate_model(tunned_knn) requirejs.config({ paths: { base: '/static/base', plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext', }, }); interactive(children=(ToggleButtons(description='Plot Type:', icons=('',), options=(('Hyperparameters', 'param… 1models() requirejs.config({ paths: { base: '/static/base', plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext', }, }); .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name Reference Turbo ID lr Logistic Regression sklearn.linear_model._logistic.LogisticRegression True knn K Neighbors Classifier sklearn.neighbors._classification.KNeighborsCl... True nb Naive Bayes sklearn.naive_bayes.GaussianNB True dt Decision Tree Classifier sklearn.tree._classes.DecisionTreeClassifier True svm SVM - Linear Kernel sklearn.linear_model._stochastic_gradient.SGDC... True rbfsvm SVM - Radial Kernel sklearn.svm._classes.SVC False gpc Gaussian Process Classifier sklearn.gaussian_process._gpc.GaussianProcessC... False mlp MLP Classifier sklearn.neural_network._multilayer_perceptron.... False ridge Ridge Classifier sklearn.linear_model._ridge.RidgeClassifier True rf Random Forest Classifier sklearn.ensemble._forest.RandomForestClassifier True qda Quadratic Discriminant Analysis sklearn.discriminant_analysis.QuadraticDiscrim... True ada Ada Boost Classifier sklearn.ensemble._weight_boosting.AdaBoostClas... True gbc Gradient Boosting Classifier sklearn.ensemble._gb.GradientBoostingClassifier True lda Linear Discriminant Analysis sklearn.discriminant_analysis.LinearDiscrimina... True et Extra Trees Classifier sklearn.ensemble._forest.ExtraTreesClassifier True lightgbm Light Gradient Boosting Machine lightgbm.sklearn.LGBMClassifier True dummy Dummy Classifier sklearn.dummy.DummyClassifier True &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-5101e29a-5cbb-4973-bd7d-860b0ca28b67 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-5101e29a-5cbb-4973-bd7d-860b0ca28b67'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/PyCaret/output_type'] = 'display_data'; await google.colab.images/PyCaret/output.renderimages/PyCaret/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt;","link":"/2022/07/05/PyCaret_Sample/"},{"title":"Day-1 Visualization","text":"R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: 1summary(cars) 1234567## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 Including PlotsYou can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. ggplot2 시각화1234library(ggplot2)ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()","link":"/2022/06/17/day0617/"},{"title":"파이썬 기초","text":"기초를 배운다… 12print(&quot;Hello World&quot;) Hello World 1 제목1 파이썬 입문 소제목1 여기는 소제목 1print(1+1) 2 print() 함수 사용print 1234567891011# print() 함수사용print (&quot;1줄 주석&quot;)&quot;&quot;&quot; 여러줄 주석 쌍따옴표 3개를 입력해주세요앞과 뒤로 &quot;&quot;&quot;print(&quot;여러줄 주석&quot;) 1줄 주석 여러줄 주석 주석처리 1줄 주석, 여러 줄 주석처리 여러 줄 주석처리 함수 또는 클래스를 문서화 할때 주로 사용 프로젝트 할때 전체공정 100 코드 / 코드 문서화/ 한글작업 문서화 변수 (Scalar) 자료형 Scalar형 Non-Scalar형 수치형 자료형 int, float 123num_int = 1print(num_int)print(type(num_int)) 1 &lt;class 'int'&gt; 123num_float = 0.1print(num_float)print(type (num_float)) 0.1 &lt;class 'float'&gt; None 자료형 Null값, 값이 정해지지 않은 자료형 123none_x = Noneprint(none_x)print(type(none_x)) None &lt;class 'NoneType'&gt; 사칙연산 정수형 사칙연산, 실수형 사칙연산 결괏값의 자료형 정수형 사칙연산123456a = 3b = 2print('a + b =', a+b)print('a - b =', a-b)print('a * b =', a*b)print('a / b =', a/b) a + b = 5 a - b = 1 a * b = 6 a / b = 1.5 실수형 사칙연산123a = 1.5b = 2.5print('a + b =', a+b) a + b = 4.0 논리형 연산자 Bool 형 True와 False 값으로 정의 조건식 교집합(=and), 합집합(=or) 1234print(True and True)print(True and False)print(False and True)print(False and False) True False False False 1234print(True or True)print(True or False)print(False or True)print(False or False) True True True False 비교 연산자 비교 연산자는 부동호를 의미한다 1234print(4&gt;3) # 참 = Trueprint(4&lt;3) # 거짓 = Falseprint(4&gt;3 or 4&lt;3) #False True False True 논리형 &amp; 비교 연산자 응용 input () 형변환 데이터를 타입으로 바꾸는 것 123var = input(&quot;숫자를 입력하세요!&quot;)print(var)print(type(var)) 숫자를 입력하세요!1 1 &lt;class 'str'&gt; 123var = int(input(&quot;숫자를 입력하세요!&quot;))print(var)print(type(var)) 숫자를 입력하세요!8 8 &lt;class 'int'&gt; 1234num1 = int(input(&quot;첫 번째 숫자를 입력하세요!&quot;))num2 = int(input(&quot;두 번째 숫자를 입력하세요!&quot;))num3 = int(input(&quot;세 번째 숫자를 입력하세요!&quot;))num4 = int(input(&quot;네 번째 숫자를 입력하세요!&quot;)) 첫 번째 숫자를 입력하세요!4 두 번째 숫자를 입력하세요!100 세 번째 숫자를 입력하세요!8 네 번째 숫자를 입력하세요!200 12345var1 = num1 &gt;= num2 # Falsevar2 = num3 &lt; num4 # Trueprint(var1 and var2) # True False String Non Scalar 12345print('Hello World')print(&quot;Hello World&quot;)print(&quot;'Hellp World'&quot;)print('&quot;Hellp World&quot;') Hello World Hello World 'Hellp World' &quot;Hellp World&quot; String Operatos 문자열 연산자 +,*가능 123str1 = &quot;Hello&quot;str2 = &quot;World&quot;print(str1 + str2) HelloWorld 문자열 인덱싱 인덱싱은 0번째 부터 시작 12345greeting = &quot;Hello Kaggle&quot;i = 7# print(greeting)print(greeting[i])print(greeting[7]) a a 1234greeting = &quot;Hello Kaggle&quot;i = int(input(&quot;숫자를 입력하세요!&quot;))print(greeting[i]) 숫자를 입력하세요!6 K 슬라이싱12345678greeting = &quot;Hello Kaggle&quot;# print(greeting[시작인덱스: 끝인덱스-1]) &gt; 외우는 방법밖에 없음print(greeting[0:2])print(greeting[:8])print(greeting[6:])print(greeting[0:10:2])print(greeting[0:10:3])print(greeting[0:10:4]) He Hello Ka Kaggle HloKg HlKg Hog 12alphabet_letter = &quot;abcdefghijklmnopqsrtuvwxyz&quot;print(alphabet_letter[0:5:2]) ace 12greeting = &quot;Hello Kaggle&quot;print(greeting[11]) e 문자열 관련 메서드 split( ) sort() etc 리스트 로 표시 [item, item2, item3] 12345a = [] # 빈리스트 a_func = list() # 빈 리스트 생성b = [1]d = [1,2,['apple'], 'apple']print(d) [1, 2, ['apple'], 'apple'] 리스트 값 수정하기 리스트 값 수정 1234a = [0, 1, 2]a[0] = &quot;값&quot;print(a ) [0, '값', 2] 리스트 값 추가하기 메서드 사용 12345678a = [100, 200, 300]a.append(400)print(a)a.append([500,600])print(a) [100, 200, 300, 400] [100, 200, 300, 400, [500, 600]] 1234567a = [100, 200, 300]a.append(400)print(a)a.extend([400,500])print(a) [100, 200, 300, 400] [100, 200, 300, 400, 400, 500] 삽입 insert(인덱스 위치, 값) 123a = [100,200,300]a.insert(1,1000)print(a) [100, 1000, 200, 300] 리스트 값 삭제하기 remove(),del 123a = [1,2,1,2,10]a.remove(10)print(a) [1, 2, 1, 2] del 123456a = [0,1,2,3,4]del a[1]print(a)del a[0:2]print(a) [0, 2, 3, 4] [3, 4] pop() 1234a = [1,2,3,4,5]a.pop(1)print(a) [1, 3, 4, 5] 1234567a = [1,2,3,4,5]rem = a.pop(1)print(a)print(rem)x= a.pop()print(a)print(x) [1, 3, 4, 5] 2 [1, 3, 4] 5 clear(): 리스트 내 모든 값 삭제 index(“값”): 값의 위치를 불러옴 123456a = [1,4,5,2,3,]b = [&quot;철수&quot;,&quot;영희&quot;,&quot;길동&quot;]a.index(4)print(a,a.index(4))print(b,b.index(&quot;길동&quot;)) [1, 4, 5, 2, 3] 1 ['철수', '영희', '길동'] 2 sort: 리스트의 정렬 12345678a = [14,5,2,3]a.sort()a.sort(reverse=True)print(a)# help(list.sort)help(list.index) [14, 5, 3, 2] Help on method_descriptor: index(self, value, start=0, stop=9223372036854775807, /) Return first index of value. Raises ValueError if the value is not present. 튜플 면접질문 : 리스트와 튜플의 차이가 뭐에요?간단명료하게 대답 리스트 : [] 수정, 삭제, 추가 튜플 : () 모두 안됨 조금 더 빠르게 실행된다는 얘기가 있음 1234567891011tuple1 = (0)tuple2 = (0,)tuple3 = 0,1,2print(type(tuple1))print(type(tuple2))print(type(tuple3))print(tuple1)print(tuple2)print(tuple3) &lt;class 'int'&gt; &lt;class 'tuple'&gt; &lt;class 'tuple'&gt; 0 (0,) (0, 1, 2) 12a = (0,1,2,3,'a')del a[4] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-52-2674375e5bd4&gt; in &lt;module&gt;() 1 a = (0,1,2,3,'a') ----&gt; 2 del a[4] TypeError: 'tuple' object doesn't support item deletion 123a = (0,1,2,3,'a')a[4] = 4print(a) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-53-de27a2d07797&gt; in &lt;module&gt;() 1 a = (0,1,2,3,'a') ----&gt; 2 a[4] = 4 3 print(a) TypeError: 'tuple' object does not support item assignment 튜플연산자 문자열 연산자 +,* 123t1 = [0,1,2]t2 = [3,4,5]print(t1+t2) [0, 1, 2, 3, 4, 5] 딕셔너리 Key(키)와 Value(값)으로 구성됨 슬라이싱! = (값의 순서가 존재해야 한다) 순서라는 개념 자체가 존재하지 않는다 12345678temp_dict = {'teacher':'evan', 'class':15, 'student':['s1','s2','s3']}print(temp_dict['teacher'])print(temp_dict['class'])print(temp_dict['student']) evan 15 ['s1', 's2', 's3'] keys()값만 출력 12temp_dict.keys() dict_keys(['teacher', 'class', 'student']) 1list(temp_dict.keys()) ['teacher', 'class', 'student'] values()값만 출력 1temp_dict.values() dict_values(['evan', 15, ['s1', 's2', 's3']]) items() key-value 쌍으로, list와 tuple형태로 변환 1temp_dict.items() dict_items([('teacher', 'evan'), ('class', 15), ('student', ['s1', 's2', 's3'])]) 조건문123456789a = int(input(&quot;숫자를 입력하세요!&quot;))if a&gt;5: print(&quot;a는 5보다 크다&quot;)elif a&gt;0: print(&quot;a는 0보다 크다&quot;)elif a&gt;-5: print(&quot;a는 -5보다 크다&quot;)else: print(&quot;a는 매우작다&quot;) 숫자를 입력하세요!8 a는 5보다 크다 반복문12345678# Hello World를 100번 출력하세요for i in range(100): #i : idx print(i) # print(&quot;Hello World&quot;) print(i+1,&quot;Hello World&quot;) 0 1 Hello World 1 2 Hello World 2 3 Hello World 3 4 Hello World 4 5 Hello World 5 6 Hello World 6 7 Hello World 7 8 Hello World 8 9 Hello World 9 10 Hello World 10 11 Hello World 11 12 Hello World 12 13 Hello World 13 14 Hello World 14 15 Hello World 15 16 Hello World 16 17 Hello World 17 18 Hello World 18 19 Hello World 19 20 Hello World 20 21 Hello World 21 22 Hello World 22 23 Hello World 23 24 Hello World 24 25 Hello World 25 26 Hello World 26 27 Hello World 27 28 Hello World 28 29 Hello World 29 30 Hello World 30 31 Hello World 31 32 Hello World 32 33 Hello World 33 34 Hello World 34 35 Hello World 35 36 Hello World 36 37 Hello World 37 38 Hello World 38 39 Hello World 39 40 Hello World 40 41 Hello World 41 42 Hello World 42 43 Hello World 43 44 Hello World 44 45 Hello World 45 46 Hello World 46 47 Hello World 47 48 Hello World 48 49 Hello World 49 50 Hello World 50 51 Hello World 51 52 Hello World 52 53 Hello World 53 54 Hello World 54 55 Hello World 55 56 Hello World 56 57 Hello World 57 58 Hello World 58 59 Hello World 59 60 Hello World 60 61 Hello World 61 62 Hello World 62 63 Hello World 63 64 Hello World 64 65 Hello World 65 66 Hello World 66 67 Hello World 67 68 Hello World 68 69 Hello World 69 70 Hello World 70 71 Hello World 71 72 Hello World 72 73 Hello World 73 74 Hello World 74 75 Hello World 75 76 Hello World 76 77 Hello World 77 78 Hello World 78 79 Hello World 79 80 Hello World 80 81 Hello World 81 82 Hello World 82 83 Hello World 83 84 Hello World 84 85 Hello World 85 86 Hello World 86 87 Hello World 87 88 Hello World 88 89 Hello World 89 90 Hello World 90 91 Hello World 91 92 Hello World 92 93 Hello World 93 94 Hello World 94 95 Hello World 95 96 Hello World 96 97 Hello World 97 98 Hello World 98 99 Hello World 99 100 Hello World for loop if 조건문 문자열, 리스트 등 –&gt;시퀀스 데이터 1234567a = &quot;Kaggle&quot;# g가 시작하면 반복문을 멈추세요for x in a: print(x) if x=='g': break # print(x) K a g enumerate() 123alphabets = ['A', 'B', 'C']for index, value in enumerate(alphabets): print(index, value) 0 A 1 B 2 C 리스트 컴프리헨션list comprehension 반복문을 한줄로 표시한다 123456789fruits = ['apple', 'kiwi','mango']newlists = []#알파벳 a가 있는 과일만 추출후, 새로운 리스트에 담기for fruit in fruits: #print(fruit) if &quot;a&quot; in fruit: newlists.append(fruit) print(newlists) ['apple'] ['apple'] ['apple', 'mango'] 123# 리스트 컴프리헨션newlist = [fruit for fruit in fruits if 'a' in fruit]print(newlist) ['apple', 'mango']","link":"/2022/06/27/basic0627/"},{"title":"R기초문법 - 기초통계","text":"데이터 불러오기1mpg1&lt;-read.csv(&quot;data/mpg1.csv&quot;, stringsAsFactors = F) 통계요약 구하기1summary(iris) 1234567891011121314## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 빈도의 비율 구하기12a &lt;- table(mpg1$trans)prop.table(a) 123## ## auto manual ## 0.6709402 0.3290598","link":"/2022/06/21/day0621/"},{"title":"결측치 이상치 처리","text":"먼저 라이브러리 불러오기1library(dplyr) 12## ## 다음의 패키지를 부착합니다: 'dplyr' 123## The following objects are masked from 'package:stats':## ## filter, lag 123## The following objects are masked from 'package:base':## ## intersect, setdiff, setequal, union 1library(ggplot2) 데이터 불러오기 데이터를 불러오세요 1exam_na &lt;- read.csv(&quot;data/exam_na.csv&quot;) 결측치 확인1is.na(exam_na) 123456## id sex korean english math## [1,] FALSE FALSE FALSE TRUE FALSE## [2,] FALSE FALSE FALSE FALSE FALSE## [3,] FALSE FALSE FALSE FALSE FALSE## [4,] FALSE FALSE TRUE FALSE FALSE## [5,] FALSE FALSE FALSE TRUE FALSE 결측치 빈도 구하기 table(): 빈도구하기 1table(is.na(exam_na)) 123## ## FALSE TRUE ## 22 3 1table(is.na(exam_na$korean)) 123## ## FALSE TRUE ## 4 1 1summary(is.na(exam_na)) 12345678## id sex korean english ## Mode :logical Mode :logical Mode :logical Mode :logical ## FALSE:5 FALSE:5 FALSE:4 FALSE:3 ## TRUE :1 TRUE :2 ## math ## Mode :logical ## FALSE:5 ## 1summary(exam_na) 12345678## id sex korean english math ## Min. :1 Length:5 Min. :87.00 Min. :84.00 Min. :80.0 ## 1st Qu.:2 Class :character 1st Qu.:87.00 1st Qu.:88.00 1st Qu.:82.0 ## Median :3 Mode :character Median :89.50 Median :92.00 Median :88.0 ## Mean :3 Mean :90.25 Mean :90.33 Mean :86.6 ## 3rd Qu.:4 3rd Qu.:92.75 3rd Qu.:93.50 3rd Qu.:90.0 ## Max. :5 Max. :95.00 Max. :95.00 Max. :93.0 ## NA's :1 NA's :2 결측치 처리 방법 제거하고 처리하기 다른 값으로 대체하기 (중요) 평균 입력 (1) 결측치를 제외하고 분석하기1na.rm = T 1mean(exam_na$korean, na.rm = T) 1## [1] 90.25 na.omit() 결측치가 있는 행을 모두 제거 실무에서는 가급적 사용하지 말것 filter()활용 1exam_na %&gt;% filter(!is.na(korean)) 12345## id sex korean english math## 1 1 M 87 NA 82## 2 2 F 92 95 93## 3 3 F 95 92 90## 4 5 F 87 NA 88 이번에는 is.na(korean)을 적용한다 1exam_na %&gt;% filter(is.na(korean)) 12## id sex korean english math## 1 4 M NA 84 80 결측치를 다른 값으로 대체하기 imputation 참고자료 A Solution to Missing Data: Imputation Using R R 결측값(NA) 제거, 대체 방법 이상치 데이터의 특정 값이 뭔가 ‘이상’이 있다 case1: 정해진 범주에서 벗어난 데이터 2000년 4월 30일 / 2000년 40월 30일–&gt; 9999 case2: 숫자 / 아웃라이어(outlier) / 극단값 평균: 평균임금 320만원 / 손흥민 몇십억원 12mpg1_out &lt;- read.csv(&quot;data/mpg1_out.csv&quot;)glimpse(mpg1_out) 12345## Rows: 234## Columns: 3## $ trans &lt;int&gt; 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 1, 1…## $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;5&quot;,…## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 15, 15, … trans의 갯수를 구하자 1table(mpg1_out$trans) 123## ## 1 2 3 ## 154 76 4 ifelse 만약 -라면, 내가 무억을 할것이다 (가정법) 만약 trans의 값이 3이라면, 결측치로 바꿔주세요. 나머지는 그대로 유지하세요 12mpg1_out$trans &lt;- ifelse(mpg1_out$trans == 3, NA, mpg1_out$trans)table(is.na(mpg1_out$trans)) 123## ## FALSE TRUE ## 230 4 결측치 제거 1mpg1_out %&gt;% filter(!is.na(trans)) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231## trans drv cty## 1 1 f 18## 2 2 f 21## 3 2 f 20## 4 1 f 21## 5 1 f 16## 6 2 f 18## 7 1 f 18## 8 2 4 18## 9 1 4 16## 10 2 4 20## 11 1 4 19## 12 1 4 15## 13 2 5 17## 14 1 4 17## 15 2 4 15## 16 1 4 15## 17 1 4 17## 18 1 4 16## 19 1 r 14## 20 1 r 14## 21 1 r 13## 22 1 r 12## 23 2 r 16## 24 1 r 15## 25 2 r 16## 26 1 r 15## 27 1 4 14## 28 1 4 11## 29 1 4 11## 30 1 4 14## 31 1 f 19## 32 1 f 22## 33 1 f 18## 34 1 f 18## 35 1 f 17## 36 1 f 18## 37 1 f 17## 38 1 f 16## 39 1 f 16## 40 1 f 17## 41 1 f 17## 42 1 f 11## 43 1 f 15## 44 1 f 16## 45 1 f 16## 46 2 4 15## 47 1 4 14## 48 1 4 13## 49 2 4 14## 50 1 4 14## 51 1 4 14## 52 1 5 9## 53 2 4 11## 54 1 4 11## 55 1 4 13## 56 1 4 13## 57 1 4 9## 58 1 4 11## 59 1 4 13## 60 1 4 11## 61 2 4 12## 62 1 4 9## 63 1 4 13## 64 1 4 13## 65 2 4 12## 66 2 4 9## 67 1 4 11## 68 2 4 11## 69 1 4 13## 70 1 4 11## 71 1 r 11## 72 1 r 11## 73 1 r 12## 74 1 4 14## 75 2 4 15## 76 1 4 14## 77 1 4 13## 78 1 4 13## 79 1 5 13## 80 1 4 14## 81 2 4 14## 82 2 4 13## 83 1 4 13## 84 1 4 13## 85 1 4 11## 86 1 4 13## 87 2 r 18## 88 1 r 18## 89 2 r 17## 90 1 r 16## 91 1 r 15## 92 2 r 15## 93 2 r 15## 94 1 r 15## 95 2 r 14## 96 2 f 28## 97 1 f 24## 98 2 f 25## 99 2 f 23## 100 1 f 24## 101 2 f 26## 102 1 f 25## 103 1 f 24## 104 2 f 21## 105 1 f 18## 106 2 f 18## 107 1 f 21## 108 2 f 21## 109 1 f 18## 110 2 f 18## 111 1 f 19## 112 1 f 19## 113 2 f 19## 114 2 f 20## 115 1 f 20## 116 1 f 17## 117 2 f 16## 118 2 f 17## 119 1 4 17## 120 1 4 15## 121 1 4 15## 122 1 4 14## 123 1 4 9## 124 1 4 14## 125 1 4 13## 126 1 4 11## 127 1 4 11## 128 1 4 12## 129 1 4 12## 130 1 4 11## 131 1 r 11## 132 1 r 11## 133 1 r 12## 134 1 4 14## 135 1 4 13## 136 1 4 13## 137 1 4 13## 138 2 f 21## 139 1 f 19## 140 1 f 23## 141 2 f 23## 142 2 f 19## 143 1 f 19## 144 1 f 18## 145 2 f 19## 146 1 f 19## 147 1 4 14## 148 2 4 15## 149 1 4 14## 150 1 4 12## 151 1 f 18## 152 1 f 16## 153 1 f 17## 154 1 f 18## 155 1 f 16## 156 2 4 18## 157 1 4 18## 158 2 4 20## 159 2 4 19## 160 1 4 20## 161 1 4 18## 162 1 4 21## 163 2 4 19## 164 2 4 19## 165 1 4 19## 166 1 4 20## 167 1 4 20## 168 2 4 19## 169 2 4 20## 170 2 4 15## 171 1 4 16## 172 1 4 15## 173 2 4 15## 174 1 4 16## 175 1 4 14## 176 2 f 21## 177 1 f 21## 178 2 f 21## 179 1 f 21## 180 1 f 18## 181 2 f 18## 182 1 f 19## 183 1 f 21## 184 2 f 21## 185 2 f 21## 186 1 f 22## 187 1 f 18## 188 2 f 18## 189 1 f 18## 190 1 f 24## 191 1 f 24## 192 2 f 26## 193 2 f 28## 194 1 f 26## 195 1 4 11## 196 1 4 13## 197 2 4 15## 198 1 4 16## 199 2 4 17## 200 2 4 15## 201 1 4 15## 202 2 4 15## 203 1 4 16## 204 2 f 21## 205 1 f 19## 206 2 f 21## 207 1 f 22## 208 2 f 17## 209 2 f 33## 210 2 f 21## 211 1 f 19## 212 1 f 22## 213 2 f 21## 214 1 f 21## 215 2 f 21## 216 1 f 16## 217 2 f 17## 218 2 f 35## 219 1 f 29## 220 2 f 21## 221 1 f 19## 222 2 f 20## 223 1 f 20## 224 2 f 21## 225 1 f 18## 226 1 f 19## 227 2 f 21## 228 1 f 16## 229 2 f 18## 230 1 f 17 12result &lt;- mpg1_out %&gt;% filter(!is.na(trans))table(is.na(result$trans)) 123## ## FALSE ## 230 이렇게 해도 가능하다 1mpg1_out %&gt;% filter(trans !=3) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231## trans drv cty## 1 1 f 18## 2 2 f 21## 3 2 f 20## 4 1 f 21## 5 1 f 16## 6 2 f 18## 7 1 f 18## 8 2 4 18## 9 1 4 16## 10 2 4 20## 11 1 4 19## 12 1 4 15## 13 2 5 17## 14 1 4 17## 15 2 4 15## 16 1 4 15## 17 1 4 17## 18 1 4 16## 19 1 r 14## 20 1 r 14## 21 1 r 13## 22 1 r 12## 23 2 r 16## 24 1 r 15## 25 2 r 16## 26 1 r 15## 27 1 4 14## 28 1 4 11## 29 1 4 11## 30 1 4 14## 31 1 f 19## 32 1 f 22## 33 1 f 18## 34 1 f 18## 35 1 f 17## 36 1 f 18## 37 1 f 17## 38 1 f 16## 39 1 f 16## 40 1 f 17## 41 1 f 17## 42 1 f 11## 43 1 f 15## 44 1 f 16## 45 1 f 16## 46 2 4 15## 47 1 4 14## 48 1 4 13## 49 2 4 14## 50 1 4 14## 51 1 4 14## 52 1 5 9## 53 2 4 11## 54 1 4 11## 55 1 4 13## 56 1 4 13## 57 1 4 9## 58 1 4 11## 59 1 4 13## 60 1 4 11## 61 2 4 12## 62 1 4 9## 63 1 4 13## 64 1 4 13## 65 2 4 12## 66 2 4 9## 67 1 4 11## 68 2 4 11## 69 1 4 13## 70 1 4 11## 71 1 r 11## 72 1 r 11## 73 1 r 12## 74 1 4 14## 75 2 4 15## 76 1 4 14## 77 1 4 13## 78 1 4 13## 79 1 5 13## 80 1 4 14## 81 2 4 14## 82 2 4 13## 83 1 4 13## 84 1 4 13## 85 1 4 11## 86 1 4 13## 87 2 r 18## 88 1 r 18## 89 2 r 17## 90 1 r 16## 91 1 r 15## 92 2 r 15## 93 2 r 15## 94 1 r 15## 95 2 r 14## 96 2 f 28## 97 1 f 24## 98 2 f 25## 99 2 f 23## 100 1 f 24## 101 2 f 26## 102 1 f 25## 103 1 f 24## 104 2 f 21## 105 1 f 18## 106 2 f 18## 107 1 f 21## 108 2 f 21## 109 1 f 18## 110 2 f 18## 111 1 f 19## 112 1 f 19## 113 2 f 19## 114 2 f 20## 115 1 f 20## 116 1 f 17## 117 2 f 16## 118 2 f 17## 119 1 4 17## 120 1 4 15## 121 1 4 15## 122 1 4 14## 123 1 4 9## 124 1 4 14## 125 1 4 13## 126 1 4 11## 127 1 4 11## 128 1 4 12## 129 1 4 12## 130 1 4 11## 131 1 r 11## 132 1 r 11## 133 1 r 12## 134 1 4 14## 135 1 4 13## 136 1 4 13## 137 1 4 13## 138 2 f 21## 139 1 f 19## 140 1 f 23## 141 2 f 23## 142 2 f 19## 143 1 f 19## 144 1 f 18## 145 2 f 19## 146 1 f 19## 147 1 4 14## 148 2 4 15## 149 1 4 14## 150 1 4 12## 151 1 f 18## 152 1 f 16## 153 1 f 17## 154 1 f 18## 155 1 f 16## 156 2 4 18## 157 1 4 18## 158 2 4 20## 159 2 4 19## 160 1 4 20## 161 1 4 18## 162 1 4 21## 163 2 4 19## 164 2 4 19## 165 1 4 19## 166 1 4 20## 167 1 4 20## 168 2 4 19## 169 2 4 20## 170 2 4 15## 171 1 4 16## 172 1 4 15## 173 2 4 15## 174 1 4 16## 175 1 4 14## 176 2 f 21## 177 1 f 21## 178 2 f 21## 179 1 f 21## 180 1 f 18## 181 2 f 18## 182 1 f 19## 183 1 f 21## 184 2 f 21## 185 2 f 21## 186 1 f 22## 187 1 f 18## 188 2 f 18## 189 1 f 18## 190 1 f 24## 191 1 f 24## 192 2 f 26## 193 2 f 28## 194 1 f 26## 195 1 4 11## 196 1 4 13## 197 2 4 15## 198 1 4 16## 199 2 4 17## 200 2 4 15## 201 1 4 15## 202 2 4 15## 203 1 4 16## 204 2 f 21## 205 1 f 19## 206 2 f 21## 207 1 f 22## 208 2 f 17## 209 2 f 33## 210 2 f 21## 211 1 f 19## 212 1 f 22## 213 2 f 21## 214 1 f 21## 215 2 f 21## 216 1 f 16## 217 2 f 17## 218 2 f 35## 219 1 f 29## 220 2 f 21## 221 1 f 19## 222 2 f 20## 223 1 f 20## 224 2 f 21## 225 1 f 18## 226 1 f 19## 227 2 f 21## 228 1 f 16## 229 2 f 18## 230 1 f 17 극단치 처리 숫자 데이터 boxplot() boxplot() 함수를 통해서 극단치가 있는지 없는지 확인가능 경계값:IQR + IQR * 1.5 상한 / IQR - IQR * 1.5 123mpg1 &lt;- read.csv(&quot;data/mpg1.csv&quot;)boxplot(mpg1$cty)boxplot(mpg1$cty)$stats 123456## [,1]## [1,] 9## [2,] 14## [3,] 17## [4,] 19## [5,] 26","link":"/2022/06/22/day0622/"},{"title":"ggplot2","text":"ggplot2 강의 데이터 불러오기 1234# install.packages(&quot;nycflights13&quot;)# install.packages(&quot;tidyverse&quot;)library(dplyr) 12## ## 다음의 패키지를 부착합니다: 'dplyr' 123## The following objects are masked from 'package:stats':## ## filter, lag 123## The following objects are masked from 'package:base':## ## intersect, setdiff, setequal, union 12345library(readxl)library(ggplot2)library(nycflights13)library(tidyverse) 1## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── 123## ✔ tibble 3.1.7 ✔ purrr 0.3.4## ✔ tidyr 1.2.0 ✔ stringr 1.4.0## ✔ readr 2.1.2 ✔ forcats 0.5.1 123## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──## ✖ dplyr::filter() masks stats::filter()## ✖ dplyr::lag() masks stats::lag() 1234567who_disease &lt;- read_xlsx(&quot;data/who_disease.xlsx&quot;)# 기본 시각화ggplot(who_disease, aes(x = year, y = cases))+ # 그래프 종류 geom_point() 1234# 옵션 1. 투명도 주기ggplot(who_disease, aes(x = year, y = cases))+ # 그래프 종류 geom_point(alpha = 0.1) 1234# 옵션 2. 색상 변화ggplot(who_disease, aes(x = year, y = cases))+ # 그래프 종류 geom_point(alpha = 0.1, colour = &quot;red&quot;) 123ggplot(who_disease, aes(x = year, y = cases))+ # 그래프 종류 geom_point(alpha = 0.1, colour = &quot;#F8A821&quot;) 1?geom_point 1## httpd 도움말 서버를 시작합니다 ... 1## 완료 colour 입력 위치 geom_point(colour=red) aes(x, y, colour = 칼럼명) 1str(iris) 123456## 'data.frame': 150 obs. of 5 variables:## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 12345ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species, size = Petal.Length))+geom_point() 산점도: x축 수치형 연속형 데이터, y축 수치형 연속형 데이터 12ggplot(who_disease, aes(x = year, y = cases))+ geom_point(alpha = 0.1) 히스토그램 질병 데이터 region = AMR, year = 1980, disease = 백일해(pertussis) case &gt; 0 12library(dplyr)str(who_disease) 1234567## tibble [43,262 × 6] (S3: tbl_df/tbl/data.frame)## $ region : chr [1:43262] &quot;EMR&quot; &quot;EUR&quot; &quot;AFR&quot; &quot;EUR&quot; ...## $ countryCode: chr [1:43262] &quot;AFG&quot; &quot;ALB&quot; &quot;DZA&quot; &quot;AND&quot; ...## $ country : chr [1:43262] &quot;Afghanistan&quot; &quot;Albania&quot; &quot;Algeria&quot; &quot;Andorra&quot; ...## $ disease : chr [1:43262] &quot;measles&quot; &quot;measles&quot; &quot;measles&quot; &quot;measles&quot; ...## $ year : num [1:43262] 2016 2016 2016 2016 2016 ...## $ cases : num [1:43262] 638 17 41 0 53 0 0 2 99 27 ... 12345678data2 &lt;- who_disease %&gt;% filter(region == 'AMR', year == 1980, disease == 'pertussis', cases &gt; 0) -&gt; data2ggplot(data2, aes(x = cases))+ geom_histogram() 1## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 명료하지 않다 1234ggplot(data2, aes(x = country, y = cases))+ geom_col()+ # 옵션 coord_flip() 1234ggplot(data2, aes(x = country, y = cases))+ geom_col(fill = &quot;blue&quot;)+ # 옵션 coord_flip() #산점도 그래프 그리기 1library(ggplot2) 12diamonds &lt;- ggplot2::diamondsggplot(diamonds, aes(x=carat, y=price))+geom_point() 막대그래프 그리기1table(diamonds$cut) 123## ## Fair Good Very Good Premium Ideal ## 1610 4906 12082 13791 21551 1ggplot(diamonds, aes(x=cut,y=price))+geom_bar(stat = &quot;identity&quot;) ggplot() 정교하게 그리기 산점도 그리기 12345diamonds &lt;- ggplot2::diamondsggplot(diamonds, aes(x=carat, y=price, col=cut))+ geom_point() 막대그래프에 2개 범주 내용 반영하기 12ggplot(diamonds, aes(x=color))+ geom_bar() 12ggplot(diamonds, aes(x=color, fill=cut))+ geom_bar() 12ggplot(diamonds, aes(x=color, fill=cut))+ geom_bar(position = &quot;fill&quot;) p219선 그래프에 2개 범주 내용 반영 12leisure &lt;- read.csv(&quot;data/leisure.csv&quot;)str(leisure) 1234## 'data.frame': 200 obs. of 3 variables:## $ age : int 2 2 3 3 4 4 5 5 6 6 ...## $ sex : chr &quot;female&quot; &quot;male&quot; &quot;female&quot; &quot;male&quot; ...## $ expense: num 25.8 21 30 16.3 25.7 ... 12ggplot(data=leisure, aes(x=age, y=expense))+ geom_line() 1234ggplot(data=leisure, aes(x=age, y=expense, col=sex))+ geom_line() 1234ggplot(data=leisure, aes(x=age, y=expense, col=sex))+ geom_line(size=1.5, linetype=6) 막대그래프의 순서변경 reorder() 1234567mpg1 &lt;- read.csv(&quot;data/mpg1.csv&quot;, stringsAsFactors = F)# 데이터 가공drv_hwy &lt;- mpg1 %&gt;% group_by(drv) %&gt;% summarise(mean_hwy=mean(hwy)) 오름차순 12ggplot(data = drv_hwy, aes(x=reorder(drv,mean_hwy), y=mean_hwy))+ geom_col() 내림차순 12ggplot(data = drv_hwy, aes(x=reorder(drv,-mean_hwy), y=mean_hwy))+ geom_col() 123456789ggplot(data = drv_hwy, aes(x=drv, y=mean_hwy))+ geom_col()+ labs( title = &quot;그래프 제목을 입력하세요&quot;, subtitle = &quot;그래프 소제목을 입력하세요&quot;, x=&quot;x변수명을 입력하세요&quot;, y=&quot;y변수명을 입력하세요&quot;, caption = &quot;데이터 출처를 입력하세요&quot; )","link":"/2022/06/22/day0622_gg/"},{"title":"시각화 &amp; 통계분석","text":"복습iris데이터, sepal.length, sepal.width 활용해서 종류별로 산점도를 그리세요. 제목과 x축, y축을 변경하세요. x축은 길이, y축 너비 1234library(readxl)library(ggplot2)library(nycflights13)library(tidyverse) 1## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── 1234## ✔ tibble 3.1.7 ✔ dplyr 1.0.9## ✔ tidyr 1.2.0 ✔ stringr 1.4.0## ✔ readr 2.1.2 ✔ forcats 0.5.1## ✔ purrr 0.3.4 123## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──## ✖ dplyr::filter() masks stats::filter()## ✖ dplyr::lag() masks stats::lag() 1str(iris) 123456## 'data.frame': 150 obs. of 5 variables:## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 1234567ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, colour = Species))+ geom_point()+ labs( title = &quot;제목&quot;, x = &quot;길이&quot;, y = &quot;너비&quot; ) 12ggplot(economics, aes(x=pop, y=psavert))+ geom_point() 색상변경 1234567891011ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, colour = Species))+ geom_point()+ labs( title = &quot;제목&quot;, x = &quot;길이&quot;, y = &quot;너비&quot; )+ scale_color_manual( labels = c(&quot;setosa&quot;, &quot;versicolor&quot;, &quot;virginica&quot;), values = c(&quot;orange&quot;, &quot;blue&quot;, &quot;yellow&quot;) ) 통계 기술통계: 평균, 최소값, 최댓값, 중간값 추론통계: 변수 간의 관계를 파악/새로운 사실을 발견(=추정) 평균 차이 검정 가설검정: 각그룹간 평균의 차이를 검정 남자(그룹)의 평균키와 여자(그룹)의 평균키는 차이가 있을 것이다. 교차분석 (= 빈도분석) 가설검정: 각 범주별 빈도를 활용해서 관계성을 검정 상관관계 분석 수치데이터 두 변수간에 상관관계가 있느냐 없느냐? 단순회귀분석 1차방정식 y(종속변수)=a(기울기)x+b(상수항) x값이 y값에 영향을 주는것인가? 예)기온, 판매량 가설검정+ 기온(독립변수)가 판매량(종속변수)에 영향을 주고 있을 것이다. ##통계 검정 P.176 가설 Hypothesis 연구: 내가 궁금한 것을 찾는 것 남자와 여자가 키가 동일하다는 귀무가설: 두 그룹간의 평균 차이가 없다. 대립가설: 두 그룹간의 평균 차이가 있다. 가설검정에서 인정하는 유의수준 5%(0.05), 1%(0.01), 0.1%(0.001) 또는 10%(0.1) 오차범위 내에 있는지 없는지 남자 평균 키와 여자 평균 키 실험유의 수준 &gt; 0.05 t.test 어떻게 데이터를 입력하는지 확인 p-value, 유의수준 0.05이상: 귀무가설, 0.05이내: 대립가설 12mpg1 &lt;- read.csv(&quot;data/mpg1.csv&quot;, stringsAsFactors = F)str(mpg1) 123456## 'data.frame': 234 obs. of 5 variables:## $ manufacturer: chr &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; ...## $ trans : chr &quot;auto&quot; &quot;manual&quot; &quot;manual&quot; &quot;auto&quot; ...## $ drv : chr &quot;f&quot; &quot;f&quot; &quot;f&quot; &quot;f&quot; ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ... -시각화 123library(ggplot2)ggplot(mpg1, aes(x = trans, y = cty))+ geom_boxplot() t.test 검정 귀무가설: auto와 manual의 cty 평균은 차이가 없다. 대립가설: auto와 manual의 cty 평균은 차이가 있다. 1t.test(data = mpg1, cty ~ trans) 1234567891011## ## Welch Two Sample t-test## ## data: cty by trans## t = -4.5375, df = 132.32, p-value = 1.263e-05## alternative hypothesis: true difference in means between group auto and group manual is not equal to 0## 95 percent confidence interval:## -3.887311 -1.527033## sample estimates:## mean in group auto mean in group manual ## 15.96815 18.67532 123# 종속변수 ~ 독립변수# 반응변수 ~ 설명변수# y x 두 그룹의 평균 차이 검정 사전 필수 검증 등분산 검정 두 그룹간의 분산이 비슷하면 –&gt; t.test (모수검정) 두 그룹간의 분산이 다르다면 –&gt; 비모수 검정 귀무가설: 두 그룹간의 분산이 비슷하다.대립가설: 두 그룹산의 분산이 다르다. 1var.test(data = mpg1, cty ~ trans) 1234567891011## ## F test to compare two variances## ## data: cty by trans## F = 0.73539, num df = 156, denom df = 76, p-value = 0.1101## alternative hypothesis: true ratio of variances is not equal to 1## 95 percent confidence interval:## 0.4912917 1.0719468## sample estimates:## ratio of variances ## 0.7353887 123ggplot(mpg1, aes(x=cty, fill=trans))+ # geom_histogram()+ geom_density(alpha = 0.1) 교차 분석 범주형 변수들이 관계가 있다는 것을 검정 비율의 차이가 있는지 검정 교차분석 검정은 R의 chisq.test()함수로 진행 귀무가설: test에 따라 drv(4,f,r)의 비율 차이가 없다 대립가설: test에 따라 drv(4,f,r)의 비율 차이가 있다 빈도표 / 비율 1table(mpg1$trans, mpg1$drv) #교차분석 1234## ## 4 f r## auto 75 65 17## manual 28 41 8 비율 1prop.table(table(mpg1$trans, mpg1$drv),1) 1234## ## 4 f r## auto 0.4777070 0.4140127 0.1082803## manual 0.3636364 0.5324675 0.1038961 auto 4륜 구동(4)인 47.8% manual 전륜구동(f) 53.2% 가장 많음 실제 통계적으로 봤을때, 차이가 있는지 검정 귀무가설: test에 따라 drv(4,f,r)의 비율 차이가 없다 대립가설: test에 따라 drv(4,f,r)의 비율 차이가 있다 1chisq.test(mpg1$trans, mpg1$drv) 12345## ## Pearson's Chi-squared test## ## data: mpg1$trans and mpg1$drv## X-squared = 3.1368, df = 2, p-value = 0.2084","link":"/2022/06/23/day0623/"},{"title":"회귀분석","text":"복습 통계 검정 평균 차이 검정: 수치데이터 + 범주데이터(두 그룹) 분산분석 : 세 그룹 이상 평균차이검정 (중급이상) 비율 차이 검정: 범주데이터 상관관계: 수치데이터 회귀 통계 검정 사전 준비 분석을 위한 데이터가 적절한지 검정 +등분산 검정, 수치 데이터가 정규분포를 이루는가(정규성검증 ) 귀무가설, 대립가설 적절하게 설정 예)서울의 평균임금과 부산의 평균임금이 차이가 있을것이다. 선행연구(논문찾아서 응용) 테스트 t.test, chisq.test, cor.test p.value p.value &gt; 0.05 –&gt; 귀무가설지지 p.value &lt; 0.05 –&gt; 대립가설지지 회귀의 중요성 기초통계: 특정한 결과에 영향을 주는 요인이 무엇인가를 찾는 것이 회귀 회귀분석과 종류 1세대 회귀방법론: 다항회귀분석, 다중회귀분석, 포아송 회귀분석, ect 2세대 회귀방법론: 구조방정식 귀무가설 &amp; 대립가설 존재 귀무가설: x(독립변수)가 y(종속변수)에 영향을 주지 않는다 대립가설: x(독립변수)가 y(종속변수)에 영향을 준다 머신러닝, 인공지능 주 목적은 예측 y = ax + b 에서 출발 lm (종속변수 ~ 독립변수, data) p.value 12RA &lt;- lm(data=mtcars, mpg~disp)summary(RA) 123456789101112131415161718## ## Call:## lm(formula = mpg ~ disp, data = mtcars)## ## Residuals:## Min 1Q Median 3Q Max ## -4.8922 -2.2022 -0.9631 1.6272 7.2305 ## ## Coefficients:## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 29.599855 1.229720 24.070 &lt; 2e-16 ***## disp -0.041215 0.004712 -8.747 9.38e-10 ***## ---## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## ## Residual standard error: 3.251 on 30 degrees of freedom## Multiple R-squared: 0.7183, Adjusted R-squared: 0.709 ## F-statistic: 76.51 on 1 and 30 DF, p-value: 9.38e-10 실제로는 이렇게 깔끔하게 안나온다 ANOVA (분산분석) 식1 : y = disp + var1 + var2 + var3 …. 식2 : y = disp + var1 + var2 …. 컬럼갯수가 100개 라면 100개를 위와 같이 해야 한다 컬램갯수를 다 사용하는 것은 아니므로 선별해야 한다 -전진소거법, 후진소거법 Multiple R-squared: 0.7183, Adjusted R-squared: 0.709 R-squared 결정계수 (=설명력) 범위 0 - 1 1로 수렴할수록 설명력이 좋다","link":"/2022/06/24/day0624/"},{"title":"파이썬 &amp; 구글드라이브연동","text":"반복문 복습123456for i in range(1000): print(&quot;No : &quot;, i+1) if i == 10: break print(&quot;Hello World&quot;) print(&quot;안녕하세요&quot;) No : 1 Hello World 안녕하세요 No : 2 Hello World 안녕하세요 No : 3 Hello World 안녕하세요 No : 4 Hello World 안녕하세요 No : 5 Hello World 안녕하세요 No : 6 Hello World 안녕하세요 No : 7 Hello World 안녕하세요 No : 8 Hello World 안녕하세요 No : 9 Hello World 안녕하세요 No : 10 Hello World 안녕하세요 No : 11 123456a = &quot;Kaggle&quot;for i in a: print(i) if i == &quot;a&quot;: break K a 리스트의 값이 존재 12345678910numbers = [1,2,3,4,5]sum = 0for num in numbers: print(&quot;numbers:&quot;, num) sum = sum + num print(&quot;total:&quot;, sum) print(&quot;-- 최종결괏값 --&quot;) print(sum) numbers: 1 total: 1 -- 최종결괏값 -- 1 numbers: 2 total: 3 -- 최종결괏값 -- 3 numbers: 3 total: 6 -- 최종결괏값 -- 6 numbers: 4 total: 10 -- 최종결괏값 -- 10 numbers: 5 total: 15 -- 최종결괏값 -- 15 123456789101112fruits = ['apple','kiwi','manggo']newlist=[]# apple : a가 있나요? 있네요. newlist에 추가하세요.# kiwi : a가 있나요? 없네요. 그럼 넘어가요.# mango : a가 있나요? 있네요. newlist에 추가하세요.for fruit in fruits: print(&quot;조건문 밖 :&quot;,fruit) if &quot;a&quot; in fruit: print(&quot;조건문 안쪽 :&quot;, fruit) newlist.append(fruit)print(newlist) 조건문 밖 : apple 조건문 안쪽 : apple 조건문 밖 : kiwi 조건문 밖 : manggo 조건문 안쪽 : manggo ['apple', 'manggo'] While LoopWhile문 : 분석할때 거의 사용안함, 개발할때 많이 사용 123456i = 1while i &lt; 10: #참일때만 반복문 코드실행됨 # 코드 print(i) i +=1 # 1씩 증가 #i -=1 #1씩 감소 1 2 3 4 5 6 7 8 9 사용자 정의함수 내가 필요에 의해 직접 함수를 작성 12345def 함수명(param1, param2): #코드 return None 123456def add(a = 0, b = 1): c = a + b return cprint(add(a = 5, b = 4))print(add()) 9 1 사칙연산 사용자 정의함수 만들기 123456def na(a=10, b=100): c = a * b return cprint(na()) 1000 123456def love(a=8,b=100): c = a / b return cprint(love(a=10,b=20))print(love()) 0.5 0.08 123456789101112def add(a, b) : return a + bprint(add(1,2))def cal(a, b) : return a - bprint(cal(1,2))def cal(a, b) : return a * bprint(cal(1,2))def cal(a, b) : return a / bprint(cal(1,2)) 3 -1 2 0.5 12345def subtract(a,b): return a-bprint(subtract(a=5,b=10)) -5 함수 문서화(매우중요) 키워드 : Docsting 123456789101112131415def subtract(a,b): &quot;&quot;&quot;a,b를 빼는 함수 Parameters: a(int):int형 숫자 a가 입력 b(int): int형 숫자 b가 입력 Return: int:반환값 &quot;&quot;&quot; return a-bprint(subtract(a=5,b=10))print(subtract.__doc__) -5 a,b를 빼는 함수 Parameters: a(int):int형 숫자 a가 입력 b(int): int형 숫자 b가 입력 Return: int:반환값 Numpy 내장모듈(=라이브러리=패키지) (X) 별도 라이브러리 설치 12import numpy as npprint(np.__version__) 1.21.6 1234temp = [1,2,3]temp_array = np.array(temp)print(type(temp))print(type(temp_array)) &lt;class 'list'&gt; &lt;class 'numpy.ndarray'&gt; 사칙연산12345678910math_score = [90,80,100]eng_score = [80,90,100]# math_score + eng_scoremath_array = np.array(math_score)eng_array = np.array(eng_score)total = math_array + eng_arrayprint(total)print(type(total)) [170 170 200] &lt;class 'numpy.ndarray'&gt; 1- 집계함수 123print(np.min(total))print(np.max(total))print(np.sum(total)) 170 200 540 차원 확인 배열의 차원 확인 필요 12345# 1차원 배열temp_arr = np.array([1,2,3])print(temp_arr.shape) # 값이 몇개?print(temp_arr.ndim) # 몇 차원?print(temp_arr) (3,) 1 [1 2 3] 123456# 2차원 배열 생성temp_arr = np.array([[1,2,3,],[4,5,6]]) # 2묶음, 3개씩print(temp_arr.shape)print(temp_arr.ndim)print(temp_arr) (2, 3) 2 [[1 2 3] [4 5 6]] 12345# 3차원 배열 -&gt; 이미지temp_arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])print(temp_arr.shape)print(temp_arr.ndim)print(temp_arr) (2, 2, 3) 3 [[[ 1 2 3] [ 4 5 6]] [[ 7 8 9] [10 11 12]]] 배열 생성의 다양한 방법들 모두 0으로 채운다 12import numpy as npprint(np.__version__) 1.21.6 12temp_arr = np.zeros((3,3,3))temp_arr array([[[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]], [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]], [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]]) a모두 1로 채운다 12temp_arr = np.ones((2,3))temp_arr array([[1., 1., 1.], [1., 1., 1.]]) 임의의 상수값으로 채운다 12temp_arr = np.full((3,3),5)temp_arr array([[5, 5, 5], [5, 5, 5], [5, 5, 5]]) 최소, 최대 숫자의 범위를 정해두고, 각 구간별로 값을 생성 12temp_arr = np.linspace(5,10,10)temp_arr array([ 5. , 5.55555556, 6.11111111, 6.66666667, 7.22222222, 7.77777778, 8.33333333, 8.88888889, 9.44444444, 10. ]) 반복문 시, 자주 등장하는 배열 12temp_arr = np.arange(1,11,1)temp_arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) 난수 생성 123from numpy import randomx = random.rand()print(x) 0.47713558758041374 1위와 같은 코드 다른형식 123import numpy x = numpy.random.rand()print(x) 0.7337058404065017 랜덤 정수값 추출 1234from numpy import randomx = random.randint(100,size = (5))print(x)print(type(x)) [66 59 51 62 52] &lt;class 'numpy.ndarray'&gt; 랜덤 배열, 실수 값 추출 1234from numpy import randomx = random.rand(2,5)print(x)print(type(x)) [[0.20589017 0.44450341 0.98789043 0.31725431 0.64770063] [0.80055663 0.52180604 0.31230452 0.25684295 0.96396122]] &lt;class 'numpy.ndarray'&gt; NumPy 사칙연산12345678910111213141516171819202122232425import numpy as nparray_01 = np.array([1,2,3])array_02 = np.array([10,20,30])# 덧셈newArr = np.add(array_01, array_02)print(newArr)# 뺄셈 newArr = np.subtract(array_01, array_02)print(newArr)# 나누기newArr = np.divide(array_01, array_02)print(newArr)# 거듭제곱array_01 = np.array([1, 2, 3])array_02 = np.array([2, 4, 2])newArr = np.power(array_01, array_02)print(newArr) [11 22 33] [ -9 -18 -27] [0.1 0.1 0.1] [ 1 16 9] 소수점정렬 소수점을 정렬하는 다양한 방법 1234567# 소수점 제거 import numpy as notemp_arr = np.trunc([-1.23,1.23])print(temp_arr)temp_arr = np.fix([-1.23,1.23])print(temp_arr) [-1. 1.] [-1. 1.] 123#임의의 소숫점 자리에서 반올림temp_arr = np.around([-1.2345678, 1.2345678],5)print(temp_arr) [-1.23457 1.23457] 조건식 (중요) pandas 가공 numpy 조건식 하나의 조건식 다중 조건식 12temp_arr = np.arange(10)temp_arr array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 12# 5보다 작으면 그냥 원 값 유지# 5보다 크면 기존 값에 곱하기 10을 해줌 12# np.where(조건식, 참일때, 거짓일때)np.where(temp_arr &lt; 5, temp_arr, temp_arr * 10) array([ 0, 1, 2, 3, 4, 50, 60, 70, 80, 90]) 1234567temp_arr = np.arange(10)# temp_arrcond_list = [temp_arr &gt;5, temp_arr &lt;2]choice_list = [temp_arr * 2, temp_arr + 100]# np.select (조건식 리스트, 결괏값리스트, default = )np.select(cond_list, choice_list, default = temp_arr) array([100, 101, 2, 3, 4, 5, 12, 14, 16, 18]) Reshape 배열의 차원 또는 크기를 바꾼다 곱셈만 할 줄 알면 문제없음 1234import numpy as nptemp_array = np.ones((3,4))print(temp_array.shape)print(temp_array) (3, 4) [[1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.]] 123after_reshape = temp_array.reshape(1, 12) #괄호안에 수의 곱이 12로 조합하면 결과실행print(after_reshape.shape)print(after_reshape) (1, 12) [[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]] 123after_reshape = temp_array.reshape(2,-1) #-1넣으면 알아서 맞춰줌print(after_reshape.shape)print(after_reshape) (2, 6) [[1. 1. 1. 1. 1. 1.] [1. 1. 1. 1. 1. 1.]] 브로드 캐스팅 (중요한 개념, 논문작성시 사용): 서로 다른 크기의 배열을 연산할때의 기본적인 규칙을 의미한다 pandas 튜토리얼12import pandas as pdprint(pd.__version__) 1.3.5 12345678temp_dict = { 'col1' : [1,2], 'col2' : [3,4]} df = pd.DataFrame(temp_dict)print(df)print(type(df)) col1 col2 0 1 3 1 2 4 &lt;class 'pandas.core.frame.DataFrame'&gt; 구글 드라이브 연동12from google.colab import drivedrive.mount('/content/drive') Mounted at /content/drive 12345DATA_PATH = '/content/drive/MyDrive/Colab Notebooks/human_AI/Basic/Chapter 3. pandas/data/Lemonade2016.csv'lemonade = pd.read_csv(DATA_PATH)lemonade.info() #str &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 32 entries, 0 to 31 Data columns (total 7 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Date 31 non-null object 1 Location 32 non-null object 2 Lemon 32 non-null int64 3 Orange 32 non-null int64 4 Temperature 32 non-null int64 5 Leaflets 31 non-null float64 6 Price 32 non-null float64 dtypes: float64(2), int64(3), object(2) memory usage: 1.9+ KB","link":"/2022/06/28/day0628/"},{"title":"K-최근접 이웃 회귀","text":"123456## K-최근접 이웃 회귀- 지도학습 알고리즘은 크게 분류와 회귀- 지도학습 : 종속변수 존재 + 분류 : 도미와 빙어 분류 문제 해결 + 회귀 : 통계 회귀분석 y=ax+b / 수치예측 데이터 불러오기12import numpy as npprint(np.__version__) 1.21.6 1234567891011121314151617perch_length = np.array( [8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0, 21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7, 23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5, 27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0, 39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5, 44.0] )perch_weight = np.array( [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0, 1000.0] ) 123456import matplotlib.pyplot as pltplt.scatter(perch_length, perch_weight)plt.xlabel('length')plt.ylabel('weight')plt.show() 농어의 길이가 커짐에 따라 무게도 늘어난다 훈련세트와 테스트 세트로 나누기 12345from sklearn.model_selection import train_test_splittrain_input, test_input, train_target, test_target = train_test_split( perch_length, perch_weight, random_state=42)train_input.shape, test_input.shape, train_target.shape, test_target.shape ((42,), (14,), (42,), (14,)) 1차원 배열 -&gt; 2차원 배열 앞장 2개의 특성 사용&gt; 자연스럽게 열이2개인 2차원배열 사용 이번 예제는 특성1개만 사용&gt; 수동으로 2차원 배열을 만들어야 한다 reshape() 메서드로 바꾸려는 배열의 크기를 지정 예) (4, ) 배열 -&gt; (2,2) 크기로 변경 1234train_input = train_input.reshape(-1,1) #크기에 -1지정 : 나머지 원소개수로 모두 채우라는 의미 test_input = test_input.reshape(-1,1) # reshape(-1,1) : 첫번째 크기를 나머지 원소로 채우고, 두번째 크기를 1로 하라print(train_input.shape, test_input.shape)print(train_input.ndim) (42, 1) (14, 1) 2 결정계수 Adjusted-R Squared 정확한 지표 0과 1 사이의 지표 1에 가까울 수록 예측 모형이 잘 맞춘다 123456789from sklearn.neighbors import KNeighborsRegressorknr = KNeighborsRegressor()#모형 학습knr.fit(train_input, train_target)# 테스트 세트의 점수를 확인한다print(knr.score(test_input, test_target)) 0.992809406101064 1test_input[0:5] / 8.2, 17.5 (array([[1.02439024], [2.19512195], [3.35365854], [2.59756098], [2.74390244]]), 17.5) 12345from sklearn.metrics import mean_absolute_error #mean_absolute_error: 타깃과 예측의 절대값 오차를 평균하여 반환한다# 예측 데이터 test_prediction = knr.predict(test_input)test_prediction[:5] array([ 60. , 79.6, 248. , 122. , 136. ]) 1test_target[:5] array([ 5.9, 100. , 250. , 130. , 130. ]) 12345678from sklearn.metrics import mean_absolute_error# 예측 데이터 test_prediction = knr.predict(test_input)# 테스트 세트에 대한 평균 절대값 오차mae = mean_absolute_error(test_target, test_prediction)print(mae) 19.157142857142862 예측이 평균적으로 19g 정도 다르다 확실한 건 오차가 존재한다 19g 정도가 의미하는 것은 무엇인가? 오차 개선 : 17g 개선 : 15g 개선 : 0g 이 될때까지(오차가 존재하지 않을때까지) 1print(knr.score(train_input, train_target)) 0.9698823289099254 과대 적합 vs 과소 적합 매우 힘든 작업 과대적합 : 훈련세트 점수 좋음, 테스트 점수 (매우) 안좋음 과소적합 : 테스트세트의 점수가 매우 좋음 결론 : 모형이 제대로 훈련이 안된것임 모형 서비스에 탑재 시킬 수 없음 12print(&quot;훈련평가:&quot;,knr.score(train_input, train_target))print(&quot;테스트 평가:&quot;, knr.score(test_input, test_target)) 훈련평가: 0.9698823289099254 테스트 평가: 0.992809406101064 모형 개선 1234567# 이웃의 개수를 3으로 재지정knr.n_neighbors = 3# 모형 다시 훈련knr.fit(train_input,train_target)print(&quot;훈련 평가:&quot;,knr.score(train_input,train_target))print(&quot;테스트 평가:&quot;, knr.score(test_input, test_target)) 훈련 평가: 0.9804899950518966 테스트 평가: 0.9746459963987609","link":"/2022/06/30/day0630_ch3/"},{"title":"pandas &amp; numpy","text":"라이브러리 불러오기1234import pandas as pdimport numpy as npprint(&quot;pandas version:&quot;, pd.__version__)print(&quot;numpy version:&quot;, np.__version__) pandas version: 1.3.5 numpy version: 1.21.6 데이터 불러오기12from google.colab import drivedrive.mount('/content/drive') Mounted at /content/drive 12345DATA_PATH = '/content/drive/MyDrive/Colab Notebooks/human_AI/Basic/Chapter 3. pandas/data/Lemonade2016.csv'lemonade = pd.read_csv(DATA_PATH)print(type(lemonade))lemonade.info() #str &lt;class 'pandas.core.frame.DataFrame'&gt; &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 32 entries, 0 to 31 Data columns (total 7 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Date 31 non-null object 1 Location 32 non-null object 2 Lemon 32 non-null int64 3 Orange 32 non-null int64 4 Temperature 32 non-null int64 5 Leaflets 31 non-null float64 6 Price 32 non-null float64 dtypes: float64(2), int64(3), object(2) memory usage: 1.9+ KB 데이터 맛보기 1print(lemonade.head()) Date Location Lemon Orange Temperature Leaflets Price 0 7/1/2016 Park 97 67 70 90.0 0.25 1 7/2/2016 Park 98 67 72 90.0 0.25 2 7/3/2016 Park 110 77 71 104.0 0.25 3 7/4/2016 Beach 134 99 76 98.0 0.25 4 7/5/2016 Beach 159 118 78 135.0 0.25 1print(lemonade.tail()) Date Location Lemon Orange Temperature Leaflets Price 27 7/27/2016 Park 104 68 80 99.0 0.35 28 7/28/2016 Park 96 63 82 90.0 0.35 29 7/29/2016 Park 100 66 81 95.0 0.35 30 7/30/2016 Beach 88 57 82 81.0 0.35 31 7/31/2016 Beach 76 47 82 68.0 0.35 기술 통계량 보는 함수 dscreibe( ) 1print(lemonade.describe()) Lemon Orange Temperature Leaflets Price count 32.000000 32.000000 32.000000 31.000000 32.000000 mean 116.156250 80.000000 78.968750 108.548387 0.354688 std 25.823357 21.863211 4.067847 20.117718 0.113137 min 71.000000 42.000000 70.000000 68.000000 0.250000 25% 98.000000 66.750000 77.000000 90.000000 0.250000 50% 113.500000 76.500000 80.500000 108.000000 0.350000 75% 131.750000 95.000000 82.000000 124.000000 0.500000 max 176.000000 129.000000 84.000000 158.000000 0.500000 범주형 데이터 빈도수 구하기 1lemonade['Location'] 0 Park 1 Park 2 Park 3 Beach 4 Beach 5 Beach 6 Beach 7 Beach 8 Beach 9 Beach 10 Beach 11 Beach 12 Beach 13 Beach 14 Beach 15 Beach 16 Beach 17 Beach 18 Park 19 Park 20 Park 21 Park 22 Park 23 Park 24 Park 25 Park 26 Park 27 Park 28 Park 29 Park 30 Beach 31 Beach Name: Location, dtype: object 1lemonade['Location'].value_counts() Beach 17 Park 15 Name: Location, dtype: int64 value_counts()는 판다스에서 시리즈에 있음 1print(type(lemonade['Location'])) &lt;class 'pandas.core.series.Series'&gt; 행과 열 다루기 Sold(판매량) 컬럼 (=피쳐=feature)을 추가 12lemonade['Sold'] = 0 #lemonade.Sold으로도 가능하지만, 메서드인지 칼럼인지 헷갈리는 경우가 있음print(lemonade.head(3)) Date Location Lemon Orange Temperature Leaflets Price Sold 0 7/1/2016 Park 97 67 70 90.0 0.25 0 1 7/2/2016 Park 98 67 72 90.0 0.25 0 2 7/3/2016 Park 110 77 71 104.0 0.25 0 12lemonade['Sold'] = lemonade['Lemon'] + lemonade['Orange']print(lemonade.head(3)) Date Location Lemon Orange Temperature Leaflets Price Sold 0 7/1/2016 Park 97 67 70 90.0 0.25 164 1 7/2/2016 Park 98 67 72 90.0 0.25 165 2 7/3/2016 Park 110 77 71 104.0 0.25 187 Revenue(매출) = 단가 x 판매량 12lemonade['Revenue'] = 0print(lemonade.head(3)) Date Location Lemon Orange Temperature Leaflets Price Sold \\ 0 7/1/2016 Park 97 67 70 90.0 0.25 164 1 7/2/2016 Park 98 67 72 90.0 0.25 165 2 7/3/2016 Park 110 77 71 104.0 0.25 187 Revenue 0 0 1 0 2 0 1234lemonade['Revenue'] = lemonade['Price'] * lemonade['Sold']print(lemonade.head(3)) Date Location Lemon Orange Temperature Leaflets Price Sold \\ 0 7/1/2016 Park 97 67 70 90.0 0.25 164 1 7/2/2016 Park 98 67 72 90.0 0.25 165 2 7/3/2016 Park 110 77 71 104.0 0.25 187 Revenue 0 41.00 1 41.25 2 46.75 drop 함수 사용해서 열 제거 123# 컬럼 제거 col_drop = lemonade.drop('Sold', axis=1)print(col_drop.head()) Date Location Lemon Orange Temperature Leaflets Price Revenue 0 7/1/2016 Park 97 67 70 90.0 0.25 41.00 1 7/2/2016 Park 98 67 72 90.0 0.25 41.25 2 7/3/2016 Park 110 77 71 104.0 0.25 46.75 3 7/4/2016 Beach 134 99 76 98.0 0.25 58.25 4 7/5/2016 Beach 159 118 78 135.0 0.25 69.25 123# 행 제거row_drop = lemonade.drop(2, axis = 0)print(row_drop.head()) Date Location Lemon Orange Temperature Leaflets Price Sold \\ 0 7/1/2016 Park 97 67 70 90.0 0.25 164 1 7/2/2016 Park 98 67 72 90.0 0.25 165 3 7/4/2016 Beach 134 99 76 98.0 0.25 233 4 7/5/2016 Beach 159 118 78 135.0 0.25 277 5 7/6/2016 Beach 103 69 82 90.0 0.25 172 Revenue 0 41.00 1 41.25 3 58.25 4 69.25 5 43.00 123# 범위 제거row_drop = lemonade.drop([0,1,2], axis = 0)print(row_drop.head()) Date Location Lemon Orange Temperature Leaflets Price Sold \\ 3 7/4/2016 Beach 134 99 76 98.0 0.25 233 4 7/5/2016 Beach 159 118 78 135.0 0.25 277 5 7/6/2016 Beach 103 69 82 90.0 0.25 172 6 7/6/2016 Beach 103 69 82 90.0 0.25 172 7 7/7/2016 Beach 143 101 81 135.0 0.25 244 Revenue 3 58.25 4 69.25 5 43.00 6 43.00 7 61.00 데이터 인덱싱 (문자가 있어 다루기 어려움)1print(lemonade[4:7]) Date Location Lemon Orange Temperature Leaflets Price Sold \\ 4 7/5/2016 Beach 159 118 78 135.0 0.25 277 5 7/6/2016 Beach 103 69 82 90.0 0.25 172 6 7/6/2016 Beach 103 69 82 90.0 0.25 172 Revenue 4 69.25 5 43.00 6 43.00 특정 값만 추출 filter 1234# lemonade[데이터 컬럼 == 특정값]lemonade['Location'] == 'Beach'lemonade[조건식 &amp; 조건식] 0 False 1 False 2 False 3 True 4 True 5 True 6 True 7 True 8 True 9 True 10 True 11 True 12 True 13 True 14 True 15 True 16 True 17 True 18 False 19 False 20 False 21 False 22 False 23 False 24 False 25 False 26 False 27 False 28 False 29 False 30 True 31 True Name: Location, dtype: bool 1lemonade[lemonade['Location'] == 'Beach'] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Location Lemon Orange Temperature Leaflets Price Sold Revenue 3 7/4/2016 Beach 134 99 76 98.0 0.25 233 58.25 4 7/5/2016 Beach 159 118 78 135.0 0.25 277 69.25 5 7/6/2016 Beach 103 69 82 90.0 0.25 172 43.00 6 7/6/2016 Beach 103 69 82 90.0 0.25 172 43.00 7 7/7/2016 Beach 143 101 81 135.0 0.25 244 61.00 8 NaN Beach 123 86 82 113.0 0.25 209 52.25 9 7/9/2016 Beach 134 95 80 126.0 0.25 229 57.25 10 7/10/2016 Beach 140 98 82 131.0 0.25 238 59.50 11 7/11/2016 Beach 162 120 83 135.0 0.25 282 70.50 12 7/12/2016 Beach 130 95 84 99.0 0.25 225 56.25 13 7/13/2016 Beach 109 75 77 99.0 0.25 184 46.00 14 7/14/2016 Beach 122 85 78 113.0 0.25 207 51.75 15 7/15/2016 Beach 98 62 75 108.0 0.50 160 80.00 16 7/16/2016 Beach 81 50 74 90.0 0.50 131 65.50 17 7/17/2016 Beach 115 76 77 126.0 0.50 191 95.50 30 7/30/2016 Beach 88 57 82 81.0 0.35 145 50.75 31 7/31/2016 Beach 76 47 82 68.0 0.35 123 43.05 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-9290165e-8ef6-46f3-aac5-16d67164dc30 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-9290165e-8ef6-46f3-aac5-16d67164dc30'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1lemonade['Temperature'] &gt;=80, lemonade['Orange'] &gt;= 100 (0 False 1 False 2 False 3 False 4 False 5 True 6 True 7 True 8 True 9 True 10 True 11 True 12 True 13 False 14 False 15 False 16 False 17 False 18 True 19 False 20 False 21 False 22 True 23 True 24 True 25 True 26 True 27 True 28 True 29 True 30 True 31 True Name: Temperature, dtype: bool, 0 False 1 False 2 False 3 False 4 True 5 False 6 False 7 True 8 False 9 False 10 False 11 True 12 False 13 False 14 False 15 False 16 False 17 False 18 False 19 False 20 False 21 False 22 False 23 False 24 False 25 True 26 True 27 False 28 False 29 False 30 False 31 False Name: Orange, dtype: bool) 1lemonade[(lemonade['Temperature']&gt;=80) &amp; (lemonade['Orange']&gt;=100)] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Location Lemon Orange Temperature Leaflets Price Sold Revenue 7 7/7/2016 Beach 143 101 81 135.0 0.25 244 61.00 11 7/11/2016 Beach 162 120 83 135.0 0.25 282 70.50 25 7/25/2016 Park 156 113 84 135.0 0.50 269 134.50 26 7/26/2016 Park 176 129 83 158.0 0.35 305 106.75 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-7e4faf7d-9bd3-42bd-87ae-91187983c261 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-7e4faf7d-9bd3-42bd-87ae-91187983c261'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1lemonade[(lemonade['Temperature'] &gt;= 80) &amp; (lemonade['Orange'] &gt;= 100) &amp; (lemonade['Location'] == &quot;Park&quot;)] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Location Lemon Orange Temperature Leaflets Price Sold Revenue 25 7/25/2016 Park 156 113 84 135.0 0.50 269 134.50 26 7/26/2016 Park 176 129 83 158.0 0.35 305 106.75 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-c2c4436e-205d-409a-8b79-dd8120fe890c button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-c2c4436e-205d-409a-8b79-dd8120fe890c'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1lemonade.loc[lemonade['Temperature'] &gt;= 80, ['Date', 'Sold']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Sold 5 7/6/2016 172 6 7/6/2016 172 7 7/7/2016 244 8 NaN 209 9 7/9/2016 229 10 7/10/2016 238 11 7/11/2016 282 12 7/12/2016 225 18 7/18/2016 223 22 7/22/2016 187 23 7/23/2016 202 24 7/24/2016 203 25 7/25/2016 269 26 7/26/2016 305 27 7/27/2016 172 28 7/28/2016 159 29 7/29/2016 166 30 7/30/2016 145 31 7/31/2016 123 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-6218cadb-b920-4a88-91cc-bd612c230913 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-6218cadb-b920-4a88-91cc-bd612c230913'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; iloc vs loc-문법상의 차이 1lemonade.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Location Lemon Orange Temperature Leaflets Price Sold Revenue 0 7/1/2016 Park 97 67 70 90.0 0.25 164 41.00 1 7/2/2016 Park 98 67 72 90.0 0.25 165 41.25 2 7/3/2016 Park 110 77 71 104.0 0.25 187 46.75 3 7/4/2016 Beach 134 99 76 98.0 0.25 233 58.25 4 7/5/2016 Beach 159 118 78 135.0 0.25 277 69.25 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-e647b034-9b2e-4cef-bd5b-3a9ff7f4827e button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-e647b034-9b2e-4cef-bd5b-3a9ff7f4827e'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; iloc 숫자만 들어간다 필터링시 사용이 용이하지 않다 1print(lemonade.iloc[0:3,0:2]) Date Location 0 7/1/2016 Park 1 7/2/2016 Park 2 7/3/2016 Park loc: 숫자 (X) 라벨= 글자(숫자,문자 동시) 사용 추천 1print(lemonade.loc[0:2,['Date','Location']]) Date Location 0 7/1/2016 Park 1 7/2/2016 Park 2 7/3/2016 Park 데이터 정렬 sort_values() 1print(lemonade[['Date', 'Temperature', 'Revenue']].sort_values(by=['Revenue']).head(10)) Date Temperature Revenue 0 7/1/2016 70 41.00 1 7/2/2016 72 41.25 6 7/6/2016 82 43.00 5 7/6/2016 82 43.00 31 7/31/2016 82 43.05 13 7/13/2016 77 46.00 2 7/3/2016 71 46.75 30 7/30/2016 82 50.75 14 7/14/2016 78 51.75 8 NaN 82 52.25 1print(lemonade[['Date', 'Temperature', 'Revenue']].sort_values(by=['Temperature', 'Revenue'], ascending = [True, False]).head(5)) Date Temperature Revenue 20 7/20/2016 70 56.50 0 7/1/2016 70 41.00 2 7/3/2016 71 46.75 1 7/2/2016 72 41.25 16 7/16/2016 74 65.50 Gruop by123df = lemonade.groupby(by='Location').count()print(df)print(type(df)) Date Lemon Orange Temperature Leaflets Price Sold Revenue Location Beach 16 17 17 17 17 17 17 17 Park 15 15 15 15 14 15 15 15 &lt;class 'pandas.core.frame.DataFrame'&gt; 1df[['Date','Lemon']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lemon Location Beach 16 17 Park 15 15 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-4534bfe8-0348-4685-b720-325ccdb7b17b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4534bfe8-0348-4685-b720-325ccdb7b17b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123df = lemonade.groupby(by='Location').count()print(df)print(type(df)) Date Lemon Orange Temperature Leaflets Price Sold Revenue Location Beach 16 17 17 17 17 17 17 17 Park 15 15 15 15 14 15 15 15 &lt;class 'pandas.core.frame.DataFrame'&gt; 1234df[['Date', 'Lemon']]print(df.iloc[0:1, 0:2])print(df.loc['Park', ['Date', 'Lemon']]) Date Lemon Orange Temperature Leaflets Price Sold Revenue Location Beach 16 17 17 17 17 17 17 17 Park 15 15 15 15 14 15 15 15 &lt;class 'pandas.core.frame.DataFrame'&gt; Date Lemon Location Beach 16 17 Date 15 Lemon 15 Name: Park, dtype: int64 간단한 피벗테이블 만들기 1lemonade.groupby('Location')['Revenue'].agg([max, min]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max min Location Beach 95.5 43.0 Park 134.5 41.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-b0b9e563-4843-4bac-9605-063c3d0d884c button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-b0b9e563-4843-4bac-9605-063c3d0d884c'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1lemonade.groupby('Location')['Revenue'].agg([max, min,sum,np.mean]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max min sum mean Location Beach 95.5 43.0 1002.8 58.988235 Park 134.5 41.0 1178.2 78.546667 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-4b341231-bf81-4fe6-bfca-1f4b378cea62 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4b341231-bf81-4fe6-bfca-1f4b378cea62'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1lemonade.groupby('Location')[['Revenue','Sold','Temperature']].agg([max, min,sum,np.mean]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } Revenue Sold Temperature max min sum mean max min sum mean max min sum mean Location Beach 95.5 43.0 1002.8 58.988235 282 123 3422 201.294118 84 74 1355 79.705882 Park 134.5 41.0 1178.2 78.546667 305 113 2855 190.333333 84 70 1172 78.133333 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-f37d9c3f-ae7a-4f8e-b1a0-bbfdbf687e75 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-f37d9c3f-ae7a-4f8e-b1a0-bbfdbf687e75'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1lemonade.head() #Location은 컬럼명 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Location Lemon Orange Temperature Leaflets Price Sold Revenue 0 7/1/2016 Park 97 67 70 90.0 0.25 164 41.00 1 7/2/2016 Park 98 67 72 90.0 0.25 165 41.25 2 7/3/2016 Park 110 77 71 104.0 0.25 187 46.75 3 7/4/2016 Beach 134 99 76 98.0 0.25 233 58.25 4 7/5/2016 Beach 159 118 78 135.0 0.25 277 69.25 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-6161dcd9-ff28-4df5-a237-49a77b1964fe button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-6161dcd9-ff28-4df5-a237-49a77b1964fe'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1lemonade.groupby('Location')['Revenue'].agg([max, min,sum,np.mean]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max min sum mean Location Beach 95.5 43.0 1002.8 58.988235 Park 134.5 41.0 1178.2 78.546667 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-afc12970-5a1e-4a8c-b2d7-739c95cb66e8 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-afc12970-5a1e-4a8c-b2d7-739c95cb66e8'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1lemonade.groupby(['Location', 'Price'])['Orange'].agg([max, min, sum, np.mean]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max min sum mean Location Price Beach 0.25 120 69 1110 92.500000 0.35 57 47 104 52.000000 0.50 76 50 188 62.666667 Park 0.25 77 67 211 70.333333 0.35 129 63 326 81.500000 0.50 113 42 621 77.625000 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-2d8c5d53-8bd7-4554-a754-1e2344d548be button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-2d8c5d53-8bd7-4554-a754-1e2344d548be'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt;","link":"/2022/06/29/day0629/"},{"title":"머신러닝_데이터 다루기","text":"1234567891011## 파이썬 주요 라이브러리- Machine Leaning + 정형 데이터 + 시이킷런 (https://scikit-learn.org/stable/)- Deep Leaning + 비정형 데이터 + Tensorflow(구글) vs Python(페이스북) + 혼공머 : Teansorflow + 실제 상용 서비스 - Tensorflow vs R&amp;D - Pytorch 12345## 생선 분류- p. 45- 도미, 곤들매기, 농어, 등등- 이 생선들을 프로그램을 분류한다 1234# 30cm이면 도미라고 알려줘라fish_length = 31if fish_length &gt;= 30: print(&quot;도미&quot;) 도미 도미 데이터 수집12345# 도미의 길이 bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]#도미의 무게bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0] 데이터 가공 여기서는 생략 데이터 시각화 여러 인사이트 확인을 위해 시각화, 통계수치계산 탐색적 자료분석(EDA, Exploratory Data Analysis) https://jehyunlee.github.io/ 참고github 1234567import matplotlib.pyplot as pltplt.scatter(bream_length, bream_weight)plt.xlabel('length')plt.ylabel('weight')plt.show() 2차원 그래프 파이썬 시각화는 객체지향으로 한다. 이유 : 조금 더 예쁘고, 아름답게 다듬기위해서 캐글 시각화, 참고할 때, 아래와 같이 하는 분들이 많음 다음과 같이 코딩하면 더욱 확장성있게 시각화 할 수 있다 1234567import matplotlib.pyplot as pltfig, ax = plt.subplots()ax.scatter(bream_length, bream_weight)ax.set_xlabel('length')ax.set_ylabel('weight')plt.show() 빙어 데이터 수집12smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9] 데이터 시각화 도미와 빙어 데이터를 합침 123456fig, ax = plt.subplots()ax.scatter(bream_length, bream_weight)ax.scatter(smelt_length, smelt_weight)ax.set_xlabel('length')ax.set_ylabel('weight')plt.show() 두 개의 리스트 합치기 12length = bream_length + smelt_lengthweight = bream_weight + smelt_length 2차원 리스트로 만든다 123fish_data = [[l,w]for l, w in zip(length, weight)] # zip: 나열된 원소를 하나씩 꺼내주는일을 한다(하나싹 거낸데이터 반복 =&gt; for문)print(fish_data) [[25.4, 242.0], [26.3, 290.0], [26.5, 340.0], [29.0, 363.0], [29.0, 430.0], [29.7, 450.0], [29.7, 500.0], [30.0, 390.0], [30.0, 450.0], [30.7, 500.0], [31.0, 475.0], [31.0, 500.0], [31.5, 500.0], [32.0, 340.0], [32.0, 600.0], [32.0, 600.0], [33.0, 700.0], [33.0, 700.0], [33.5, 610.0], [33.5, 650.0], [34.0, 575.0], [34.0, 685.0], [34.5, 620.0], [35.0, 680.0], [35.0, 700.0], [35.0, 725.0], [35.0, 720.0], [36.0, 714.0], [36.0, 850.0], [37.0, 1000.0], [38.5, 920.0], [38.5, 955.0], [39.5, 925.0], [41.0, 975.0], [41.0, 950.0], [9.8, 9.8], [10.5, 10.5], [10.6, 10.6], [11.0, 11.0], [11.2, 11.2], [11.3, 11.3], [11.8, 11.8], [11.8, 11.8], [12.0, 12.0], [12.2, 12.2], [12.4, 12.4], [13.0, 13.0], [14.3, 14.3], [15.0, 15.0]] 12fish_data = [[l,w]for l, w in zip(length, weight)]fish_data[0:5] [[25.4, 242.0], [26.3, 290.0], [26.5, 340.0], [29.0, 363.0], [29.0, 430.0]] 라벨링을 해준다 = 지도해준다= 지도학습 머신러닝에서 2개를 구분하는 경우 찾으려는 대상을 1로 놓고, 그외에는 0으로 놓는다 12fish_target = [1] * 35 + [0] *14print(fish_target) [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 모델링123456from sklearn.neighbors import KNeighborsClassifier# 클래스 인스턴스화 (클래스의 객체 만들기)kn = KNeighborsClassifier() 123# 모형 학습# 독립변수 종속변수kn.fit(fish_data, fish_target) # fit()메서드는 주어진 데이터로 알고리즘을 훈련한다 KNeighborsClassifier() 12# 예측 정확도 kn.score(fish_data, fish_target) # score()메서드: 사이킷런에서모델을 평가(0-1의 값// 1은 정확히 맞혔다, 0.5라면 절반만 맞혔다) 1.0 실제 예측을 해보자 새로운 물고기 도착했습니다 길이: 30, 몸무게: 600 1234567891011ac_length = int(input(&quot;물고기 길이를 입력하세요__&quot;))ac_weight = int(input(&quot;물고기 무게를 입력하세요__&quot;))preds = int(kn.predict ([[ac_length,ac_weight]])) #주의사항 : x,y,z는 모두 이차원 배열 만을 취급할 수 있다. [[]]형태print(preds)if preds == 1: print(&quot;도미&quot;)else: print(&quot;빙어&quot;) 물고기 길이를 입력하세요__30 물고기 무게를 입력하세요__600 1 도미 새로운 모델 제안 Default : 정확도 100% 제안 : 정확도 71% ——–&gt; 실험단계 하이퍼 파라미터 세팅(처음 머신러닝 접할시 이 세팅 하지 않을것) 예) n_neighbors = 49 default(처음 머신러닝 접할시 사용하기) 머신러닝 알고리즘 두개의 흐름-선형모델 : 선형회귀, 로지스틱 회귀 -의사결정트리 모델 : 1975년 의사결정트리 모델, KNN 캐글에서 자주사용되는 모델: 의사결정트리 모델 랜덤포레스트 부스틴계열 : LightGBM(2017), XGBoost(2016) 공부시 : 선형회귀, 로지스틱 회귀, 랜덤포레스트, LightGBM(=XGBoost) 위주로 공부할 것 123Kn49 = KNeighborsClassifier(n_neighbors= 49) #KNeighborsClassifier 클래스의 기본값은 5/ n_neighbors= 49:기준Kn49 .fit(fish_data, fish_target)Kn49.score(fish_data, fish_target) 0.7142857142857143 문제점: 이미 도미/빙어 박스 분류되었었음 12345678fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9] 2차원 파이썬 리스트 라벨링 123fish_data = [[l, w] for l, w in zip(fish_length, fish_weight)]fish_target = [1] * 35 + [0] * 14print(fish_target) [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 1234fish_data = [[l, w] for l, w in zip(fish_length, fish_weight)]fish_target = [1] * 35 + [0] * 14print(fish_target[0:40:5])print(fish_data[0:40:5]) [1, 1, 1, 1, 1, 1, 1, 0] [[25.4, 242.0], [29.7, 450.0], [31.0, 475.0], [32.0, 600.0], [34.0, 575.0], [35.0, 725.0], [38.5, 920.0], [9.8, 6.7]] sample 도미 35마리, 빙어 14마리 49개의 샘플존재 처음 35개를 훈련 / 나머지 14개를 테스트 1234567891011121314151617from sklearn.neighbors import KNeighborsClassifier# 클래스 인스턴스화 (클래스의 객체 만들기)kn = KNeighborsClassifier()# 훈련 세트로 0:34 인덱스 활용train_input = fish_data[:35]train_target = fish_target[:35]# 테스 세트로 35: 마지막 인덱스 활용test_input = fish_data[35:]test_target = fish_target[35:]# 모형 학습kn = kn.fit(train_input, train_target)print(kn.score(test_input,test_target)) 0.0 샘플링 편향 훈련 세트와 테스트 세트가 골고루 섞이지 않음 샘플링 작업12345import numpy as npinput_arr = np.array(fish_data)target_arr = np.array(fish_target)print(input_arr[0:49:7]) [[ 25.4 242. ] [ 30. 390. ] [ 32. 600. ] [ 34. 685. ] [ 36. 850. ] [ 9.8 6.7] [ 11.8 9.9]] 1print(input_arr.shape, target_arr.shape) (49, 2) (49,) 0-48까지 정수를 섞기 1234# random으로 무작위 배열을 만들거나 설정할때 (중요)np.random.seed(42) # random.seed: 일정한 결과를 얻기위해 초기에 지정/ random.seed(0)또는random.seed(42)모두 상관없음index = np.arange(49) # arange(): 1씩 증가하는 함수np.random.shuffle(index) # shuffle(): 주어진 배열을 무작위로 섞는 함수 1print(index) [13 45 47 44 17 27 26 25 31 19 12 4 34 8 3 6 40 41 46 15 9 16 24 33 30 0 43 32 5 29 11 36 1 21 2 37 35 23 39 10 22 18 48 20 7 42 14 28 38] 배열 인덱싱 1234567# 35개 훈련 세트만들기train_input = input_arr[index[:35]] train_target = target_arr[index[:35]]# 14개 테스트 세트 만들기 test_input = input_arr[index[35:]]test_target = target_arr[index[35:]] 시각화1train_input[:,0] # 길이 리스트 array([32. , 12.4, 14.3, 12.2, 33. , 36. , 35. , 35. , 38.5, 33.5, 31.5, 29. , 41. , 30. , 29. , 29.7, 11.3, 11.8, 13. , 32. , 30.7, 33. , 35. , 41. , 38.5, 25.4, 12. , 39.5, 29.7, 37. , 31. , 10.5, 26.3, 34. , 26.5]) 12345678import matplotlib.pyplot as pltfig, ax = plt.subplots()ax.scatter(train_input[:,0], train_input[:,1])ax.scatter(test_input[:,0],test_input[:,1])ax.set_xlabel(&quot;length&quot;)ax.set_ylabel(&quot;weight&quot;)plt.show() 1kn = kn.fit(train_input, train_target) 1kn.score(test_input, test_target) 1.0 1kn.predict(test_input) array([0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0]) 1test_target array([0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0]) 데이터 전처리 머신러닝시 데이터 전처리 결측치 처리, 이상치 처리 12345678fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9] 12# cloumn_stack()활용np.column_stack(([1,2,3],[4,5,6])) #2차원 배열로 만드는 과정 생략가능 array([[1, 4], [2, 5], [3, 6]]) 12fish_data = np.column_stack((fish_length, fish_weight))print(fish_data[:5]) [[ 25.4 242. ] [ 26.3 290. ] [ 26.5 340. ] [ 29. 363. ] [ 29. 430. ]] 종속변수 = Y = 타깃데이터 = Target 12fish_target = np.concatenate((np.ones(35),np.zeros(14)))print(fish_target) [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] Scikit-learn 훈련세트와 테스트 세트 나누기 (외우기)123456from sklearn.model_selection import train_test_splittrain_input, test_input, train_target, test_target = train_test_split( fish_data, fish_target, random_state = 42)train_input.shape, test_input.shape, train_target.shape, test_target.shape ((36, 2), (13, 2), (36,), (13,)) 도미와 빙어가 잘 섞여 있는가? 1print(test_target) [1. 0. 0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1.] 35(도미) : 14(빙어) +2.5 : 1 테스트 셋 (비율) 3.3 : 1 층화샘플링 기초 통계, 설문 조사 비율 여론 조사 남성 속옷을 구매하는 비율(남자9, 여자1) 신제품(남자5, 여자5) 123456train_input, test_input, train_target, test_target = train_test_split( fish_data, fish_target, random_state = 42)print(test_target) [1. 0. 0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1.] 이제 테스트 세트의 비율이 2.25:1 이다 수상한 도미 한 마리 1234from sklearn.model_selection import train_test_splitkn = KNeighborsClassifier()kn.fit(train_input, train_target)kn.score(test_input, test_target) 1.0 1print(kn.predict([[25,150]])) [0.] 1234567import matplotlib.pyplot as pltplt.scatter(train_input[:,0], train_input[:,1])plt.scatter(25,150,marker=&quot;^&quot;)plt.xlabel('length')plt.ylabel('weight')plt.show() 1distance, indexes = kn.kneighbors([[25,150]]) 123456plt.scatter(train_input[:,0], train_input[:,1])plt.scatter(25, 150, marker='^')plt.scatter(train_input[indexes,0], train_input[indexes,1], marker='D')plt.xlabel('length')plt.ylabel('weight')plt.show() 1234567plt.scatter(train_input[:,0], train_input[:,1])plt.scatter(25, 150, marker='^')plt.scatter(train_input[indexes,0], train_input[indexes,1], marker='D')plt.xlim((0, 1000))plt.xlabel('length')plt.ylabel('weight')plt.show() p98 두 특성(길이와 무게)의 값이 놓인 범위가 매우 다음 두 특성의 스케일이 다름 스케일이 같도록 통계처리 필요 Feature Engineering (피처엔지니어링) 머신러닝 데이터 전처리(결측치 처리, 이상치 처리) 데이터 분리 Feature Engineering 1 표준 점수 z 점수 1234mean = np.mean(train_input, axis = 0)std = np.std(train_input, axis=0)print(mean, std) [ 26.175 418.08888889] [ 10.21073441 321.67847023] 표준 점수 구하기 123# 브로드 캐스팅 서로 다른 배열을 계산할때 print(train_input.shape, mean.shape, std.shape)train_scaled = (train_input - mean) / std (36, 2) (2,) (2,) 12345plt.scatter(train_scaled[:,0], train_scaled[:,1])plt.scatter(25, 150, marker='^')plt.xlabel('length')plt.ylabel('weight')plt.show() 123456new = ([25, 150] - mean) / stdplt.scatter(train_scaled[:,0], train_scaled[:,1])plt.scatter(new[0], new[1], marker='^')plt.xlabel('length')plt.ylabel('weight')plt.show() 통계 처리 전 : KNN –&gt; 예측이 다름 통계 처리 후 : KNN –&gt; 예측이 정확히 맞음 – 통계 처리 –&gt; Feature Engineering 모형 학습 1kn.fit(train_scaled, train_target) KNeighborsClassifier() 123# kn.score(test_input, test_target)test_scaled = (test_input-mean) /stdkn.score(test_scaled, test_target) 1.0 예측 1print(kn.predict([new])) [1.] 1234567distances, indexes = kn.kneighbors([new])plt.scatter(train_scaled[:,0], train_scaled[:,1])plt.scatter(new[0], new[1], marker='^')plt.scatter(train_scaled[indexes,0], train_scaled[indexes,1], marker='D')plt.xlabel('length')plt.ylabel('weight')plt.show()","link":"/2022/06/30/day0630_ml/"},{"title":"최근접 이웃회귀2","text":"데이터 불러오기1import numpy as np 1234567891011121314151617181920perch_length = np.array( [8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0, 21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7, 23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5, 27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0, 39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5, 44.0] )perch_weight = np.array( [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0, 1000.0] )print(perch_length.shape, perch_weight.shape) (56,) (56,) 훈련 세트와 테스트 세트로 나눈 후, 1차원 -&gt; 2차원 배열로 변환123456from sklearn.model_selection import train_test_split train_input, test_input, train_target, test_target = train_test_split( perch_length, perch_weight, random_state = 42)train_input.shape, test_input.shape, train_target.shape, test_target.shape ((42,), (14,), (42,), (14,)) 1차원 -&gt; 2차원 배열 1234train_input = train_input.reshape(-1,1)test_input = test_input.reshape(-1,1)train_input.shape, test_input.shape ((42, 1), (14, 1)) 데이터 시각화 -&gt; 데이터 재가공 모델링 최근접 이웃개수를 3개로 하는 모델을 훈련한다 (기본값은 5개) 12345from sklearn.neighbors import KNeighborsRegressorknr = KNeighborsRegressor(n_neighbors=3)# 모형훈련knr.fit(train_input, train_target) KNeighborsRegressor(n_neighbors=3) 모델 평가 모델 예측 서비스를 함 12# 농어의 길이50cm -&gt; 농어의 무게?print(knr.predict([[50]])) [1033.33333333] 모델은 50cm농어의 무게를 1,033g정도로 예측했다. 그런데 이 농어의 실제 무게는 훨씬 더 많이 나간다. 어디서 문제가 발생한 것인가? 모형 평가를 위한 시각화1234567from scipy.spatial import distanceimport matplotlib.pyplot as plt# 50cm 농어의 이웃을 3개distance, indexes = knr.kneighbors([[50]]) #kneighbors()메서드:가장 가까운 이웃까지의 거리와 이웃의 샘플을 얻을 수 있음print(distance, indexes) [[6. 7. 7.]] [[34 8 14]] 1234567891011# 훈련세트의 산점도를 그린다plt.scatter(train_input, train_target)# 훈련세트 중에서 이웃 샘플만 다시 그린다plt.scatter(train_input[indexes], train_target[indexes], marker='D')# 50cm 농어데이터plt.scatter(50, 1033, marker='^')plt.xlabel('length')plt.ylabel('weight')plt.show() k-최근접 이웃회귀는 가장 가까운 샘플을 찾아 타깃을 평균한다 따라서 새로운 샘플이 훈련세트의 범위를 벗어나면 엉뚱한 값을 예측할 수 있다 예를 들어 길이가 100cm인 농어도 여전히 1033g으로 예측한다 1234567891011distance, indexes = knr.kneighbors([[100]])plt.scatter(train_input, train_target)plt.scatter(train_input[indexes], train_target[indexes], marker='D')plt.scatter(100, 1033, marker='^')plt.xlabel('length')plt.ylabel('weight')plt.show() 선형회귀 p136 123456789# Pythonfrom sklearn.linear_model import LinearRegressionlr = LinearRegression()lr.fit(train_input, train_target)# 50cm 농어에 대해 예측print(lr.predict([[50]])) [1241.83860323] 선형회귀의 모형 기울기, 절편 coef_ : 기울기, 계수(coefficient) 또는 가중치(weight) 1print(lr.coef_, lr.intercept_) [39.01714496] -709.0186449535477 시각화 12345678910plt.scatter(train_input, train_target)# 15에서 50까지 1차방정식 그래프를 그린다 plt.plot([15,50], [15*lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept_])#50cm 농어 데이터 plt.scatter(50, 1241.8, marker='^')plt.xlabel('length')plt.ylabel('weight')plt.show() 직선대로 예측하면 농어의 무게가 0g이하로 내려갈텐데 현실에서는 있을 수 없는일이다 농어의 길이와 무게에 대한 산점도를 자세히 보면 일직선이라기 보다는 왼쪽 위로 조금 구부러진 곡선에 가깝다 = 2차방정식 선형 회귀 다항 회귀 농어 1cm = -650g 직선의 기울기 대신, 곡선의 기울기를 쓰자 직선 = 1차방정식, 곡선 = 2차방정식 $y = ax^2 + bx + b$ $무게 = a길이^2 + b길이 + 절편$ 12345678# p140train_poly = np.column_stack((train_input ** 2, train_input)) #train_input ** 2: train_input을 제곱 / column_stack():1 차원 배열을 2 차원 배열에 열로 쌓습니다.test_poly = np.column_stack((test_input **2, test_input))# 데이터셋 크기 확인print(train_poly.shape, test_poly.shape)print(&quot; --------train poly --------&quot;)print(&quot; --------test poy --------&quot;) (42, 2) (14, 2) --------train poly -------- --------test poy -------- 주목할 부분: 2차방정식의 그래프를 찾기위해 훈련세트에 제곱항을 추가했지만, 타깃값은 그대로 사용한다는 것 목표하는 값은 어떠한 그래프를 훈련하든지 바꿀필요가 없다 ** 12345lr = LinearRegression()lr.fit(train_poly, train_target)# 이 모델에 농어의 길이의 제곱과 원래의 길이를 함께 넣어줘야 한다 **print(lr.predict([[50**2, 50]])) [1573.98423528] 1print(lr.coef_, lr.intercept_) [ 1.01433211 -21.55792498] 116.0502107827827 시각화 123456789101112# 구각별 직선을 그리기 위해 15에서 49까지 정수배열을 만든다point = np.arange(15, 50)plt.scatter(train_input, train_target)# 15에서 49까지 2차방정식 그래프를 그린다 **plt.plot(point, 1.01*point**2 - 21.6*point + 116.05)plt.scatter(50, 1574, marker='^')plt.xlabel('length')plt.ylabel('weight')plt.show() 점수확인 12print(lr.score(train_poly,train_target))print(lr.score(test_poly, test_target)) 0.9706807451768623 0.9775935108325122 훈련세트와 테스트세트의 점수가 크게 높아졌다 하지만 여전치 테스트 세트의 점수가 조금 더 높다 과소적합이 아직 남아있다","link":"/2022/07/01/day0701_ch03/"},{"title":"로지스틱 회귀","text":"로지스틱 회귀 선형회귀에서 출발 이진 분류 문제 해결 클래스 확률 예측 딥러닝에서도 사용됨 p177 x가 사각형일 확률 30% y가 삼각형일 확률 50% x가 원일 확률 20% 데이터 불러오기 Species (종속변수=Y) -&gt; 타깃 독립변수 : Weight, Length, Diagonal, Height, Width -&gt; 입력 데이터 파이썬을 통해 데이터 분석을 할 때, Pandas를 빼놓고 이야기할 수 없다. 온전히 통계 분석을 위해 고안된 R 과는 다르게 python은 일반적인 프로그래밍 언어(general purpose programming language) 이며, 데이터 분석을 하기 위해서는 여러가지 라이브러리를 사용할 수 밖에 없다. 이 패키지들 중 R의 dataframe 데이터 타입을 참고하여 만든 것이 바로 pandas dataframe이다. pandas는 dataframe을 주로 다루기 위한 라이브러리이며, dataframe을 자유롭게 가공하는 것은 데이터 과학자들에게 중요하다. 데이터 프레임은 넘파이로 상호변환이 쉽고, 사이런킷과도 잘 호환된다 1234import pandas as pdfish = pd.read_csv('https://bit.ly/fish_csv_data')fish.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Species Weight Length Diagonal Height Width 0 Bream 242.0 25.4 30.0 11.5200 4.0200 1 Bream 290.0 26.3 31.2 12.4800 4.3056 2 Bream 340.0 26.5 31.1 12.3778 4.6961 3 Bream 363.0 29.0 33.5 12.7300 4.4555 4 Bream 430.0 29.0 34.0 12.4440 5.1340 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-76aa0f66-ffe7-4987-a45c-016731eef719 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-76aa0f66-ffe7-4987-a45c-016731eef719'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 데이터 탐색 (실제작업시 시간소요)12# 종속변수print(pd.unique(fish['Species'])) #unique():데이터에 고유값들이 어떠한 종류들이 있는지 알고 싶을때 사용하는 함수 ['Bream' 'Roach' 'Whitefish' 'Parkki' 'Perch' 'Pike' 'Smelt'] 1print(fish['Species'].value_counts()) Perch 56 Bream 35 Roach 20 Pike 17 Smelt 14 Parkki 11 Whitefish 6 Name: Species, dtype: int64 데이터 가공1234# 입력데이터 만들기# 데이터프레임에서 여러열을 선택하면 새로운 데이터 프레임이 반환되며, 이를 to_numpy()메서드로 넘파이 배열로 바꾼다fish_input = fish[['Weight', 'Length','Diagonal','Height','Width' ]].to_numpy() fish_input.shape (159, 5) 1print(fish_input[:5]) #[:5] : 처음 5개 행 [[242. 25.4 30. 11.52 4.02 ] [290. 26.3 31.2 12.48 4.3056] [340. 26.5 31.1 12.3778 4.6961] [363. 29. 33.5 12.73 4.4555] [430. 29. 34. 12.444 5.134 ]] 12# 타깃데이터 만들기fish_target = fish['Species'].to_numpy() # ['Species'] : [['Species']]사용하지 않도록 주의, 그렇게 하면 fish_target이 2차원 배열이 됨 ** 데이터 분리1234567# 데이터 세트 2개 만들기 from sklearn.model_selection import train_test_splittrain_input, test_input, train_target, test_target = train_test_split( fish_input, fish_target, random_state=42)# 층화 샘플링 표준화 전처리 여기에서도 훈련 세트의 통계 값으로 테스트 세트를 변환해야 한다는 점을 잊지 않기 ** 데이터 가공 숫자 결측치가 존재, 평균값으로 대체 원본 데이터 평균 대치 (x) &gt; 훈련 데이터로 평균대치 (o) 훈련 데이터와 테스트 데이터 분리 데이터 누수(Data Leakage) 훈련데이터 평균값 70을 대치 (o) 테스트데이터 평균값 75를 대치 (x) 모든 데이터 평균값 72.5를 대치 (x) 참고 사이트 https://scikit-learn.org/stable/common_pitfalls.html 참고 코드 (무조건 pipeline 으로 사용: 중간에 복잡한 내용없이 안전하게 실행가능) : Data Leakage 방지가능 from sklearn.pipeline import make_pipeline model = make_pipeline(StandardScaler(), LinearRegression()) model.fit(X_train, y_train) Pipeline(steps=[(‘standardscaler’, StandardScaler()), (‘linearregression’, LinearRegression())]) mean_squared_error(y_test, model.predict(X_test))0.90… Pipelines also help avoiding another common pitfall: leaking the test data into the training data. 교재 p97 기준을 맞춰라 –&gt; 데이터 표준화(표준점수) 수동으로 mean, std 12# p100# train_scaled = (train_input - mean)/std StandardScaler() 참고 https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html 1234567# StandardScaler 클래스 사용하여 훈련세트와 데이터세트를 표준화 전처리하기from sklearn.preprocessing import StandardScalerss = StandardScaler()ss.fit(train_input)# ss.fit(test_input) (x)train_scaled = ss.transform(train_input)test_scaled = ss.transform(test_input) 모형 만들기 k-최근접 이웃 보통 1개의 모형만 만들지는 않음 / 여러개의 샘플링 12345from sklearn.neighbors import KNeighborsClassifierkn = KNeighborsClassifier(n_neighbors=3)kn.fit(train_scaled, train_target)print(kn.score(train_scaled, train_target))print(kn.score(test_scaled, test_target)) 0.8907563025210085 0.85 타깃값 확인 알파벳 순으로 정렬 1print(kn.classes_) ['Bream' 'Parkki' 'Perch' 'Pike' 'Roach' 'Smelt' 'Whitefish'] 1print(kn.predict(test_scaled[:5])) ['Perch' 'Smelt' 'Pike' 'Perch' 'Perch'] 5개 샘플에 대한 예측은 어떤 확률인가? 12345import numpy as npproba = kn.predict_proba(test_scaled[:5]) #predict_proba()메서드: 클래스별 확률값 반환 #round()함수는 기본으로 소수점 첫째자리에서 반올림, decimals 매개변수로 유지할 소수점 아래자릿수 지정가능print(np.round(proba, decimals=4)) [[0. 0. 1. 0. 0. 0. 0. ] [0. 0. 0. 0. 0. 1. 0. ] [0. 0. 0. 1. 0. 0. 0. ] [0. 0. 0.6667 0. 0.3333 0. 0. ] [0. 0. 0.6667 0. 0.3333 0. 0. ]] 첫 번째 클래스 Perch +100% 확률로 Perch 예측 네번째 클래스 Perch 66.7% 확률로 Perch로 예측 33.3% 확률로 Perch로 예측 회귀식y = ax + b 양변에 로그를 취함 로지스틱회귀12345678import numpy as npimport matplotlib.pyplot as pltz = np.arange(-5,5,0.5)phi = 1/(1+np.exp(-z)) #np.exp 지수함수계산plt.plot(z, phi)plt.xlabel('z')plt.ylabel('phi')plt.show() 로지스틱 회귀로 이진 분류 수행123# 넘파이배열은 True, False값을 전달하여 행을 선택 char_arr = np.array(['A', 'B', 'C', 'D', 'E'])print(char_arr[[True, False, True, False, False]]) ['A' 'C'] 12345bream_smelt_indexes = (train_target == 'Bream') | (train_target == 'Smelt') # | : OR연산자 / bream_smelt_indexes배열: 도미와 빙어일경우 True, 그외에는 모두 Falsetrain_bream_smelt = train_scaled[bream_smelt_indexes]target_bream_smelt = train_target[bream_smelt_indexes]train_scaled.shape, train_bream_smelt.shape ((119, 5), (33, 5)) 모델 만들기1234from sklearn.linear_model import LogisticRegressionlr = LogisticRegression()lr.fit(train_bream_smelt, target_bream_smelt) LogisticRegression() 12# 클래스를 예측print(lr.predict(train_bream_smelt[:5])) ['Bream' 'Smelt' 'Bream' 'Bream' 'Bream'] 확률값 구하기 1print(lr.predict_proba(train_bream_smelt[:5])) [[0.99759855 0.00240145] [0.02735183 0.97264817] [0.99486072 0.00513928] [0.98584202 0.01415798] [0.99767269 0.00232731]] 1print(lr.classes_) ['Bream' 'Smelt'] 분류기준: threshold 임계값 설정 (경계선을 긋는) 계수와 절편 1print(lr.coef_, lr.intercept_) [[-0.4037798 -0.57620209 -0.66280298 -1.01290277 -0.73168947]] [-2.16155132] 12decisions = lr.decision_function(train_bream_smelt[:5])print(decisions) [-6.02927744 3.57123907 -5.26568906 -4.24321775 -6.0607117 ] z값을 확률값으로 변환 12from scipy.special import expitprint(expit(decisions)) [0.00240145 0.97264817 0.00513928 0.01415798 0.00232731] 다중 분류 수행하기 이진분류의 확장판 12345678# 하이퍼 파라미터 세팅# 모형을 튜닝# 모형 결과의 과대적합 또는 과소적합을 방지하기 위한 것lr = LogisticRegression(C=20, max_iter=1000)lr.fit(train_scaled, train_target)print(lr.score(train_scaled, train_target))print(lr.score(test_scaled, test_target)) 0.9327731092436975 0.925 1print(lr.predict(test_scaled[:5])) ['Perch' 'Smelt' 'Pike' 'Roach' 'Perch'] 12proba = lr.predict_proba(test_scaled[:5])print(np.round(proba, decimals=3)) [[0. 0.014 0.841 0. 0.136 0.007 0.003] [0. 0.003 0.044 0. 0.007 0.946 0. ] [0. 0. 0.034 0.935 0.015 0.016 0. ] [0.011 0.034 0.306 0.007 0.567 0. 0.076] [0. 0. 0.904 0.002 0.089 0.002 0.001]] 다중 분류일 경우 선형 방정식은 어떤 모습일까? 분류 7개, 칼럼 값 5개 1print(lr.classes_) ['Bream' 'Parkki' 'Perch' 'Pike' 'Roach' 'Smelt' 'Whitefish'] 1print(lr.coef_.shape, lr.intercept_.shape) (7, 5) (7,) 12decision = lr.decision_function(test_scaled[:5])print(np.round(decision, decimals=2)) [[ -6.5 1.03 5.16 -2.73 3.34 0.33 -0.63] [-10.86 1.93 4.77 -2.4 2.98 7.84 -4.26] [ -4.34 -6.23 3.17 6.49 2.36 2.42 -3.87] [ -0.68 0.45 2.65 -1.19 3.26 -5.75 1.26] [ -6.4 -1.99 5.82 -0.11 3.5 -0.11 -0.71]] 123from scipy.special import softmaxproba = softmax(decision, axis =1)print(np.round(proba, decimals=3)) [[0. 0.014 0.841 0. 0.136 0.007 0.003] [0. 0.003 0.044 0. 0.007 0.946 0. ] [0. 0. 0.034 0.935 0.015 0.016 0. ] [0.011 0.034 0.306 0.007 0.567 0. 0.076] [0. 0. 0.904 0.002 0.089 0.002 0.001]] 교재에는 관련 내용없음 평가 지표 (실제 평가시 이용) 회귀 평가지표 결정 계수 (p121) (타깃-예측)^2의 합 / (타깃-평균)^2의 합 MAE, MSE, RMSE (실제 - 예측)= 오차 MAE(Mean Absoluted Error) : 오차의 절댓값의 평균 MES(Meen Squared Error) : 오차 제곱의 평균 RMSE(Root Mean Squared Error):MSE에 제곱근을 취한 값 좋은 모델이란? 결정계수 : 1에 수렴하면 좋은 모델 MAE, MSE, RMSE : 0에 수렴하면 좋은 모델 참고 https://scikit-learn.org/stable/modules/model_evaluation.html 12345678910111213141516171819202122import numpy as npfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_scoretrue = np.array([1, 2, 3, 2, 3, 5, 4, 6, 5, 6, 7, 8, 8]) # 실제값preds = np.array([1, 1, 2, 2, 3, 4, 4, 5, 5, 7, 7, 6, 8]) # 예측값#절대값 오차의 평균mae = mean_absolute_error(true, preds)print(mae)#제곱 오차의 평균mse = mean_squared_error(true, preds)print(mse)# mse제곱근rmse = np.sqrt(mse)print(rmse)# 결정계수r2 = r2_score(true, preds)print(r2) 0.5384615384615384 0.6923076923076923 0.8320502943378437 0.8617021276595744 분류 평가 지표 오차 행렬 실제 값 [빙어, 도미, 도미, 빙어, 도미] [빙어, 빙어, 도미, 빙어, 빙어] TP(빙어를 빙어로 예측) : 2TN(도미를 도미로 예측) : 1FN(실제 도미, 예측 빙어) : 2FP(실제 빙어, 예측 도미) : 0 TP, TN, FP, FN TP=5, TN=5, FP=3, FN=7 정확도 :(TP+TN)/(TP+TN+FP+FN) 정밀도 : 양성이라고 예측한 값(TP+FP)중 실제 양성인 값의 비율 재현율 : 실제 양성인 값 중에서 양성으로 예측한 값(TP)의 비율 코로나검사 양성(1) : 음성(99) 머신러닝 모형 : 정확도 98% / 정밀도 99% 인간 음성진단 : 정확도 99% / 정밀도 95% 검사자가 실제는 양성, 진단은 음성으로 내림 로그손실 ROC Curve (=AUC) 정밀도, 재현율 : 타깃데이터가 불안정시/ 정확도 확인어려울시 모형의 정확도 3/5 = 60% 분류 모델 평가방법 참고 https://velog.io/@skyepodium/%EB%B6%84%EB%A5%98-%EB%AA%A8%EB%8D%B8-%ED%8F%89%EA%B0%80-%EB%B0%A9%EB%B2%95 123456from sklearn.metrics import confusion_matrixtrue = [0,1,1,0,0]pred = [1,0,0,0,0]confusion_matrix(true, pred) array([[2, 1], [2, 0]])","link":"/2022/07/01/day0701_ch4/"},{"title":"랜덤포레스트 &amp; 그레이디언트 부스팅 &amp; 주성분 분석","text":"랜덤 포레스트 Decision Tree (나무 1개) 여러개 심음 샘플링 Feature Importances 예측해야 할 행의 갯수, 100만개 컬럼의 갯수 200개 –&gt; 100개 나무 100개를 심고 평균을 내자 나무 1개 당 컬럼을 10개로 T1 mae : 20 / T2 mae : 30 / T3 mae 10, …. T1 ~ T100 mae : 20 feature importances 샘플링 : 부트스트랩 샘플 (복원 추출) 123456# 라이브러리 불러오기 import numpy as np import pandas as pd from sklearn.model_selection import train_test_split, cross_validatefrom sklearn.ensemble import RandomForestClassifier 123# 데이터 불러오기wine = pd.read_csv('https://bit.ly/wine_csv_data') 1234# input, target 분리 data = wine[['alcohol', 'sugar', 'pH']].to_numpy()target = wine['class'].to_numpy() 1234# 훈련데이터, 테스트 데이터 분리train_input, test_input, train_target, test_target = train_test_split( data, target, test_size = 0.2, random_state = 42) 12# 모델링rf = RandomForestClassifier(n_jobs=-1, random_state = 42) #n_jobs=-1 : 시스템에 있는 모든 코어를 사용 1234# 모형 평가scores = cross_validate(rf, train_input, train_target, return_train_score = True, n_jobs =-1)print(np.mean(scores['train_score']), np.mean(scores['test_score'])) 0.9973541965122431 0.8905151032797809 12345# 특성 중요rf.fit(train_input, train_target)# print(rf.feature_importances_)print(rf.feature_importances_) [0.23167441 0.50039841 0.26792718] 1234# OOB rf = RandomForestClassifier(oob_score = True, n_jobs = -1, random_state = 42)rf.fit(train_input, train_target)print(rf.oob_score_) 0.8934000384837406 그레이디언트 부스팅 경사하강법의 원리를 이용함. T1 ~ TN 증가하면서 오차를 보정해주며 정확성을 높임 랜덤포레스트와의 차이점 랜덤포레스트는 각 나무간 상호 연관성 없음 부스팅은 각 나무간 상호 연관성 있음 단점 속도가 너무 느려요 대안 XGBoost, LightGBM 1234from sklearn.ensemble import GradientBoostingClassifiergb = GradientBoostingClassifier(random_state=42)scores = cross_validate(gb, train_input, train_target, return_train_score=True, n_jobs=-1)print(np.mean(scores['train_score']), np.mean(scores['test_score'])) 0.8881086892152563 0.8720430147331015 123gb = GradientBoostingClassifier(n_estimators = 500, learning_rate = 0.2, random_state=42)scores = cross_validate(gb, train_input, train_target, return_train_score=True, n_jobs=-1)print(np.mean(scores['train_score']), np.mean(scores['test_score'])) 0.9464595437171814 0.8780082549788999 특성 중요도 12gb.fit(train_input, train_target)print(gb.feature_importances_) [0.15872278 0.68010884 0.16116839] p318 주성분 분석 이론적으로 어려움 좌표계 공간 개념 직교 + 회전 공분산 등(통계관련내용) Feature Engineering 기법 StandardScaler() 현 ML의 문제점 : 컬럼의 갯수 매우 많음 차원축소 특성이 많으면 훈련데이터에 쉽게 과대적합된다 특성을 줄여서 학습모델의 성능을 향상시킨다 모델의 학습시간을 감소시켜준다 대표적인 방법론 중 하나가 PCA, EFA PCA vs EFA EFA(탐색적 요인 분석), Factor Analysis 예) 국어, 수학, 과학, 영어 예) 국어40, 수학100, 과학100, 영어30 / 위 학생은 언어영역은 수준이 낮은 편이나 수리영역은 매우 수준이 높습니다 예) 범주형 &amp; 수치데이터 PCA(주성분분석) 장비1, 장비2, 장비3, 장비4, …. PC1, PC2, PC3, ….PCN 원래 가지고 있던 정보를 알 수 없음(정보손실) 범주형 데이터셋에는 사용 안됨 무조건 수치형 데이터에만 사용 PCA 실행 전, 반드시 표준화처리(스케일링 실행) p.320 1!wget https://bit.ly/fruits_300_data -O fruits_300.npy --2022-07-05 04:58:41-- https://bit.ly/fruits_300_data Resolving bit.ly (bit.ly)... 67.199.248.10, 67.199.248.11 Connecting to bit.ly (bit.ly)|67.199.248.10|:443... connected. HTTP request sent, awaiting response... 301 Moved Permanently Location: https://github.com/rickiepark/hg-mldl/raw/master/fruits_300.npy [following] --2022-07-05 04:58:41-- https://github.com/rickiepark/hg-mldl/raw/master/fruits_300.npy Resolving github.com (github.com)... 192.30.255.112 Connecting to github.com (github.com)|192.30.255.112|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://raw.githubusercontent.com/rickiepark/hg-mldl/master/fruits_300.npy [following] --2022-07-05 04:58:41-- https://raw.githubusercontent.com/rickiepark/hg-mldl/master/fruits_300.npy Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.110.133, 185.199.109.133, ... Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 3000128 (2.9M) [application/octet-stream] Saving to: ‘fruits_300.npy’ fruits_300.npy 100%[===================&gt;] 2.86M --.-KB/s in 0.04s 2022-07-05 04:58:41 (64.2 MB/s) - ‘fruits_300.npy’ saved [3000128/3000128] 12345import numpy as npfruits = np. load('/content/fruits_300.npy')fruits_2d = fruits.reshape(-1, 100*100)fruits_2d.shape (300, 10000) PCA 123from sklearn.decomposition import PCApca = PCA(n_components=50)pca.fit(fruits_2d) PCA(n_components=50) 1print(pca.components_.shape) (50, 10000) 12345678910111213141516import matplotlib.pyplot as pltdef draw_fruits(arr, ratio=1): n = len(arr) # n은 샘플 개수입니다 # 한 줄에 10개씩 이미지를 그립니다. 샘플 개수를 10으로 나누어 전체 행 개수를 계산합니다. rows = int(np.ceil(n/10)) # 행이 1개 이면 열 개수는 샘플 개수입니다. 그렇지 않으면 10개입니다. cols = n if rows &lt; 2 else 10 fig, axs = plt.subplots(rows, cols, figsize=(cols*ratio, rows*ratio), squeeze=False) for i in range(rows): for j in range(cols): if i*10 + j &lt; n: # n 개까지만 그립니다. axs[i, j].imshow(arr[i*10 + j], cmap='gray_r') axs[i, j].axis('off') plt.show() 1draw_fruits(pca.components_.reshape(-1,100,100)) 1234# 머신러닝에서 컬럼갯수를 10000개에서 50개로 줄임fruits_pca = pca.transform(fruits_2d)print(fruits_pca.shape) (300, 50) 훈련데이터, 테스트 데이터 분리 설명된 분산 주성분이 원본데이터의 분산을 얼마나 잘 나타내는지 기록한 값 1print(np.sum(pca.explained_variance_ratio_)) 0.9214955656462601 12plt.plot(pca.explained_variance_ratio_)plt.show() 1print(np.sum(pca.explained_variance_ratio_[:])) 0.9214955656462601","link":"/2022/07/05/day0705/"},{"title":"확률적경사하강법 &amp; 결정트리","text":"1234## 확률적 경사 하강법- 점진적 학습(step, 보폭)- 학습률- XGBoost, LightGBM, 딥러닝(이미지분류, 자연어처리, 옵티마이저) 신경망 이미지 데이터, 자연어 자율주행 하루 데이터 1TB –&gt; 학습 한꺼번에 다 모델을 학습하기 어려움 샘플링, 배치, 에포크, 오차가 가장 적은 지점을 찾아야 한다 결론적으로 확률적 경사 하강법 손실함수 로지스틱 손실함수 123import pandas as pdfish = pd.read_csv(&quot;https://bit.ly/fish_csv_data&quot;)fish.info() &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 159 entries, 0 to 158 Data columns (total 6 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Species 159 non-null object 1 Weight 159 non-null float64 2 Length 159 non-null float64 3 Diagonal 159 non-null float64 4 Height 159 non-null float64 5 Width 159 non-null float64 dtypes: float64(5), object(1) memory usage: 7.6+ KB 입력데이터와 타깃데이터 분리 12fish_input = fish[['Weight','Length','Diagonal', 'Height', 'Width']].to_numpy()fish_target = fish[['Species']].to_numpy() 1234from sklearn.model_selection import train_test_splittrain_input, test_input, train_target, test_target = train_test_split( fish_input, fish_target, random_state=42) 12345from sklearn.preprocessing import StandardScalerss = StandardScaler()ss.fit(train_input)train_scaled = ss.transform(train_input)test_scaled = ss.transform(test_input) 12from sklearn.linear_model import SGDClassifier 1234sc = SGDClassifier(loss='log', max_iter=10, random_state=42)sc.fit(train_scaled, train_target)print(sc.score(train_scaled, train_target))print(sc.score(test_scaled, test_target)) 0.773109243697479 0.775 /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_stochastic_gradient.py:700: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit. ConvergenceWarning, 123sc.partial_fit(train_scaled, train_target)print(sc.score(train_scaled, train_target))print(sc.score(test_scaled, test_target)) 0.8151260504201681 0.85 /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) 12345## 에포크와 과대/ 과소적합- 에포크 숫자가 적으면 -&gt; 덜 학습- early_stoping + 에포크 숫자를 1000, 손실 10, 9, 8,,3 + 3에 도달한 시점이 150 12345678910111213import numpy as npsc = SGDClassifier(loss='log', random_state = 42)train_score = []test_score = []classes = np.unique(train_target)# 300번 에포크 훈련을 반복# 훈련 할때마다 train_score, test_score 추가를 한다for _ in range(0,300): sc.partial_fit(train_scaled, train_target, classes=classes) train_score.append(sc.score(train_scaled, train_target)) test_score.append(sc.score(test_scaled, test_target)) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) 12345import matplotlib.pyplot as plt plt.plot(train_score)plt.plot(test_score)plt.legend([&quot;train&quot;, &quot;test&quot;])plt.show() 결정트리 wine데이터 가져오기 12import pandas as pdwine = pd.read_csv('https://bit.ly/wine_csv_data') 1wine.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } alcohol sugar pH class 0 9.4 1.9 3.51 0.0 1 9.8 2.6 3.20 0.0 2 9.8 2.3 3.26 0.0 3 9.8 1.9 3.16 0.0 4 9.4 1.9 3.51 0.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-608990b6-164e-4c58-b650-84617bfdd0a0 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-608990b6-164e-4c58-b650-84617bfdd0a0'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0704/output_type'] = 'display_data'; await google.colab.images/0704/output.renderimages/0704/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1wine.info() &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 6497 entries, 0 to 6496 Data columns (total 4 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 alcohol 6497 non-null float64 1 sugar 6497 non-null float64 2 pH 6497 non-null float64 3 class 6497 non-null float64 dtypes: float64(4) memory usage: 203.2 KB 1wine.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } alcohol sugar pH class count 6497.000000 6497.000000 6497.000000 6497.000000 mean 10.491801 5.443235 3.218501 0.753886 std 1.192712 4.757804 0.160787 0.430779 min 8.000000 0.600000 2.720000 0.000000 25% 9.500000 1.800000 3.110000 1.000000 50% 10.300000 3.000000 3.210000 1.000000 75% 11.300000 8.100000 3.320000 1.000000 max 14.900000 65.800000 4.010000 1.000000 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-02cb83bf-d4f5-4092-9f7e-747daf214f5f button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-02cb83bf-d4f5-4092-9f7e-747daf214f5f'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0704/output_type'] = 'display_data'; await google.colab.images/0704/output.renderimages/0704/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12data = wine[['alcohol','sugar','pH']].to_numpy()target = wine['class'].to_numpy() 1234from sklearn.model_selection import train_test_splittrain_input, test_input, train_target, test_target = train_test_split( data, target,test_size=0.2,random_state=42) 1print(train_input.shape, test_input.shape) (5197, 3) (1300, 3) 12345from sklearn.preprocessing import StandardScalerss = StandardScaler()ss.fit(train_input)train_scaled = ss.transform(train_input)test_scaled = ss.transform(test_input) 12345from sklearn.linear_model import LogisticRegressionlr = LogisticRegression()lr.fit(train_scaled, train_target)print(lr.score(train_scaled, train_target))print(lr.score(test_scaled, test_target)) 0.7808350971714451 0.7776923076923077 1print(lr.coef_, lr.intercept_) [[ 0.51270274 1.6733911 -0.68767781]] [1.81777902] 모델 만들기 12345from sklearn.tree import DecisionTreeClassifierdt = DecisionTreeClassifier(random_state=42)dt.fit(train_scaled, train_target)print(dt.score(train_scaled, train_target))print(dt.score(test_scaled, test_target)) 0.996921300750433 0.8592307692307692 훈련세트에 대한 점수가 높다 / 과대적합 12345import matplotlib.pyplot as pltfrom sklearn.tree import plot_treeplt.figure(figsize=(10,7))plot_tree(dt)plt.show() 모델 만들기 (연습) 123456789101112from sklearn.tree import DecisionTreeClassifierimport matplotlib.pyplot as pltfrom sklearn.tree import plot_tree dt = DecisionTreeClassifier(max_depth=8, random_state=42)dt.fit(train_scaled, train_target)print(dt.score(train_scaled, train_target))print(dt.score(test_scaled, test_target))plt.figure(figsize=(10,7))plot_tree(dt)plt.show() 0.9003271117952665 0.8576923076923076 노드란 무엇인가? 0 이면 레드와인 1 이면 화이트와인 123plt.figure(figsize=(10,7))plot_tree(dt, max_depth=1, filled=True, feature_names=['alcohol','sugar','pH'])plt.show() 불순도 비율 레드와인 5:5 화이트와인 (균등하게 섞여 있을때 0.5로 가장높다) 한 범주 안에서 서로 다른 데이터가 얼마나 섞여 있는지를 나타냄 흰색과 검은색이 각각 50개 섞여있다 불순도 최대 0.5 흰색과 검은색이 완전 100% 분리가 됨 흰색 노드 불순도 최소 0 검은색 노드 불순도 최소 0 엔트로피(Entropy) +불확실한 정도를 의미한다 (0-1사이) 흰색과 검은색이 각각 50개 섞여있다 엔트로피 최대 1 흰색과 검은색이 완전 100%분리됨 흰색노드 엔트로피 최소0 검은색노드 엔트로피 최소0 123456789101112from sklearn.tree import DecisionTreeClassifierimport matplotlib.pyplot as pltfrom sklearn.tree import plot_tree dt = DecisionTreeClassifier(criterion = 'entropy', max_depth = 1, random_state=42)dt.fit(train_scaled, train_target)print(dt.score(train_scaled, train_target))print(dt.score(test_scaled, test_target))plt.figure(figsize=(10,7))plot_tree(dt, max_depth=1, filled=True, feature_names=['alcohol','sugar','pH'])plt.show() 0.7579372715027901 0.7376923076923076 특성 중요도 어떤 특성이 결정트리 모델에 영향을 주었는가? 1print(dt.feature_importances_) #feature_importances_ : 인과관계와는 관계가 없다, 인과관계는 P-Value로 확인한다 [0.15533444 0.6675247 0.17714086] 현업에서의 적용 현업에서 DescisionTreeClassifier(1970년대) 랜던포레스트, XGboost pamameters, 하이퍼파라미터 매우 많음 p242 검증 세트 훈련세트와 테스트세트 훈련: 교과서 공부하는 것 훈련세트, 모의평가 검증: 강남대성 모의고사 테스트: 6월 / 9월 실전: 수능 12import pandas as pdwine = pd.read_csv('https://bit.ly/wine_csv_data') 12data = wine[['alcohol','sugar','pH']].to_numpy()target = wine['class'].to_numpy() 12345678# 훈련 80%# 테스트 20%from sklearn.model_selection import train_test_splittrain_input, test_input, train_target, test_target = train_test_split( data, target,test_size=0.2,random_state=42)train_input.shape, test_input.shape, train_target.shape, test_target.shape ((5197, 3), (1300, 3), (5197,), (1300,)) 1234567# 훈련80% # 검증 20%sub_input, val_input, sub_target, val_target = train_test_split( train_input, train_target,test_size=0.2,random_state=42)sub_input.shape, val_input.shape, sub_target.shape, val_target.shape ((4157, 3), (1040, 3), (4157,), (1040,)) 모형 만들기 123456from sklearn.tree import DecisionTreeClassifierdt=DecisionTreeClassifier(random_state=42)dt.fit(sub_input, sub_target)print(&quot;훈련성과&quot;,dt.score(sub_input, sub_target))print(&quot;검증성과&quot;,dt.score(val_input, val_target))print(&quot;마지막최종&quot;,dt.score(test_input, test_target)) 훈련성과 0.9971133028626413 검증성과 0.864423076923077 마지막최종 0.8569230769230769 교차검증 데이터셋을 반복 분할 For loop 샘플링 편향적일 수 있음 교차검증을 한다고 해서, 정확도가 무조건 올라간다?(x) 모형을 안정적으로 만들어 준다 과대 적합 방지 123456789import numpy as npfrom sklearn.model_selection import KFolddf = np.array([1,2,3,4,5,6,7,8,9,10])# 데이터를 K폴드로 나눈다folds = KFold(n_splits=5, shuffle=True)for train_idx, valid_idx in folds.split(df): print(f'훈련데이터:{df[train_idx]},검증데이터:{df[valid_idx]}') 훈련데이터:[ 2 3 5 6 7 8 9 10],검증데이터:[1 4] 훈련데이터:[ 1 2 4 5 6 8 9 10],검증데이터:[3 7] 훈련데이터:[ 1 2 3 4 6 7 9 10],검증데이터:[5 8] 훈련데이터:[ 1 2 3 4 5 7 8 10],검증데이터:[6 9] 훈련데이터:[1 3 4 5 6 7 8 9],검증데이터:[ 2 10] 교차검증 함수 1234from sklearn.model_selection import cross_validatescores = cross_validate(dt, train_input, train_target)print(scores)print(&quot;평균&quot;, np.mean(scores['test_score'])) {'fit_time': array([0.01242208, 0.0106051 , 0.01989627, 0.01051641, 0.01058054]), 'score_time': array([0.00130367, 0.00125098, 0.0013361 , 0.00134611, 0.00127673]), 'test_score': array([0.86923077, 0.84615385, 0.87680462, 0.84889317, 0.83541867])} 평균 0.855300214703487 StratifiedKFold 사용 (이것까지 들어가면 좋은 코드) 참조할만한 좋은 코드를 찾는 것도 실력 12345from sklearn.model_selection import StratifiedKFoldsplitter = StratifiedKFold(n_splits=10, shuffle = True, random_state=42)scores = cross_validate(dt, train_input, train_target, cv = splitter)print(scores)print(&quot;평균:&quot;, np.mean(scores['test_score'])) {'fit_time': array([0.0142889 , 0.01287746, 0.01375127, 0.01249719, 0.01662874, 0.01322246, 0.01277661, 0.01421905, 0.0130713 , 0.01299787]), 'score_time': array([0.00124955, 0.00112534, 0.0013597 , 0.00117397, 0.00105834, 0.00120282, 0.0014286 , 0.00127149, 0.00107288, 0.00111914]), 'test_score': array([0.83461538, 0.87884615, 0.85384615, 0.85384615, 0.84615385, 0.87307692, 0.85961538, 0.85549133, 0.85163776, 0.86705202])} 평균: 0.8574181117533719 하이퍼 파라미터 튜닝 그리드 서치 (용어기억) 사람이 수동적으로 입력 Max_Depth:[1,3,7] 랜덤 서치 (용어기억) 사람이 범위만 지정 Max_Depth: 1-10 / by random 베이지안 옵티마이제이션 사람의 개입 없이 하이퍼 파라미터 튜닝을 자동으로 수행하는 기술을 AutoML이라고 한다 예)PyCaret 각 모델마다 적게는 1-2개에서 , 많게는 5-6개의 매개변수를 제공한다 XGBoost 100개….? 하이퍼파라미터와 동시에 교차검증을 수행 미친짓 교차검증 5번교차검증 1회 실행시 Max Depth 3번 적용 총 결괏값 3 X 5 나온다 Max Depth = 1,3,7 Criterion = gini, entropy 12from sklearn.model_selection import GridSearchCVparams = {'min_impurity_decrease':[0.0001, 0.0002, 0.0003, 0.0004, 0.0005]} 1gs = GridSearchCV(DecisionTreeClassifier(random_state=42), params, n_jobs=-1) 1gs.fit(train_input, train_target) GridSearchCV(estimator=DecisionTreeClassifier(random_state=42), n_jobs=-1, param_grid={'min_impurity_decrease': [0.0001, 0.0002, 0.0003, 0.0004, 0.0005]}) 12dt = gs.best_estimator_print(dt.score(train_input, train_target)) 0.9615162593804117 1print(gs.best_params_) {'min_impurity_decrease': 0.0001} 1print(gs.cv_results_['mean_test_score']) [0.86819297 0.86453617 0.86492226 0.86780891 0.86761605] 12best_index=np.argmax(gs.cv_results_['mean_test_score'])print(gs.cv_results_['params'][best_index]) {'min_impurity_decrease': 0.0001} 123params = {'min_impurity_decrease':np.arange(0.0001, 0.001, 0.0001), 'max_depth':range(5,20,1), 'min_samples_split':range(2,100,10)} 12gs = GridSearchCV(DecisionTreeClassifier(random_state=42), params, n_jobs=-1)gs.fit(train_input, train_target) GridSearchCV(estimator=DecisionTreeClassifier(random_state=42), n_jobs=-1, param_grid={'max_depth': range(5, 20), 'min_impurity_decrease': array([0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009]), 'min_samples_split': range(2, 100, 10)}) 1print(gs.best_params_) {'max_depth': 14, 'min_impurity_decrease': 0.0004, 'min_samples_split': 12} 1print(np.max(gs.cv_results_['mean_test_score'])) 0.8683865773302731","link":"/2022/07/04/day0704/"},{"title":"머신러닝 기초","text":"파이썬 주요 라이브러리 Machine Learning 정형데이터 사이킷런 (Scikit-Learn) Deep Learning 비정형데이터 Tensorflow(구글) vs Pytorch(페이스북) 혼공머 : Tensorflow 실제 상용서비스 - Tensorflow vs R&amp;D - Pytorch 생선분류 p.45 도미, 곤들매기, 농어, 등등 이 생선들을 프로그램으로 분류한다. 30cm 도미라고 알려줘라 123fish_length = 31if fish_length &gt;= 30: print(&quot;도미&quot;) 도미 p.47 도미데이터 데이터 수집12345# 도미의 길이bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]# 도미의 무게bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0] 데이터 가공 여기서는 생략 데이터 시각화 여러 인사이트 확인 위해 시각화, 통계 수치 계산 탐색적 자료 분석(EDA : Exploratory Data Analysis) 얘는 참고만 한다. 123456import matplotlib.pyplot as pltplt.scatter(bream_length, bream_weight)plt.xlabel('length')plt.ylabel('weight')plt.show() 파이썬 시각화는 객체지향으로 한다. 이유 : 좀 더 이쁘고, 아름답게 다듬으려면… 캐글 시각화, 참고할 때, 아래와 같이 하는 분들이 많음 1234567import matplotlib.pyplot as pltfig, ax = plt.subplots()ax.scatter(bream_length, bream_weight)ax.set_xlabel('length')ax.set_ylabel('weight')plt.show() 빙어 데이터 준비하기 12smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9] 시각화 p.50 시각화 123456fig, ax = plt.subplots()ax.scatter(bream_length, bream_weight)ax.scatter(smelt_length, smelt_weight)ax.set_xlabel('length')ax.set_ylabel('weight')plt.show() 두개의 리스트 합치기 12length = bream_length + smelt_length weight = bream_weight + smelt_weight 2차원 리스트로 만든다. 12fish_data = [[l, w] for l, w in zip(length, weight)]fish_data[0:5] [[25.4, 242.0], [26.3, 290.0], [26.5, 340.0], [29.0, 363.0], [29.0, 430.0]] 라벨링을 해준다 = 지도 해준다 = 지도학습 12fish_target = [1] * 35 + [0] * 14print(fish_target) [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 모델링1234567from sklearn.neighbors import KNeighborsClassifier# 클래스 인스턴스화kn = KNeighborsClassifier()# 모형 학습kn.fit(fish_data, fish_target) 1.0 12# 예측 정확도kn.score(fish_data, fish_target) 1.0 실제 예측을 해보자 새로운 물고기 도착했습니다. 길이 : 30, 몸무게 : 600 1234567891011ac_length = int(input(&quot;물고기 길이를 입력하세요...&quot;))ac_weight = int(input(&quot;물고기 무게를 입력하세요...&quot;))preds = int(kn.predict([[ac_length, ac_weight]]))print(preds)if preds == 1: print(&quot;도미&quot;)else: print(&quot;빙어&quot;) 물고기 길이를 입력하세요...30 물고기 무게를 입력하세요...600 1 도미","link":"/2022/06/29/day29_ml/"},{"title":"group_by(), summarise()","text":"1library(dplyr) 12## ## 다음의 패키지를 부착합니다: 'dplyr' 123## The following objects are masked from 'package:stats':## ## filter, lag 123## The following objects are masked from 'package:base':## ## intersect, setdiff, setequal, union 1mpg1&lt;-read.csv(&quot;data/mpg1.csv&quot;, stringsAsFactors = F) 12345mpg1 %&gt;% group_by(trans) %&gt;% #trans범주로 분류 summarise(n=n()) %&gt;% #trans 범주별 데이터 빈도 구하기 mutate(total=sum(n), pct=n/total*100) 12345## # A tibble: 2 × 4## trans n total pct## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;## 1 auto 157 234 67.1## 2 manual 77 234 32.9","link":"/2022/06/21/group_by/"},{"title":"test from labtop","text":"CSV 파일 불러오기 CSV 파일을 불러옵니다 12mpg1 &lt;- read.csv(&quot;mpg1.csv&quot;)str(mpg1) 123456## 'data.frame': 234 obs. of 5 variables:## $ manufacturer: chr &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; ...## $ trans : chr &quot;auto&quot; &quot;manual&quot; &quot;manual&quot; &quot;auto&quot; ...## $ drv : chr &quot;f&quot; &quot;f&quot; &quot;f&quot; &quot;f&quot; ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ... 데이터 시각화하기 cty, hwy 산점도를 그려본다 12library(ggplot2)ggplot(mpg1,aes(x=cty, y=hwy))+geom_point()","link":"/2022/07/06/test/"},{"title":"코딩도장 Unit29","text":"1234hello()def hello(): print('Hello, world!') Hello world! 12def hello(): pass 1234def add(a,b): print(a+b)add(10,20) 30 12345678def add(a, b): &quot;&quot;&quot;이 함수는 a와 b를 더한 뒤 결과를 반환하는 함수입니다.&quot;&quot;&quot; return a + b x = add(10, 20) # 함수를 호출해도 독스트링은 출력되지 않음print(x) print(add.__doc__) # 함수의 __doc__로 독스트링 출력 30 이 함수는 a와 b를 더한 뒤 결과를 반환하는 함수입니다. 12345678def add(a,b): return a+bx = add(10,20)x 30 1print(add(10, 20)) 30 12345def one(): return 1x = one()x 1 123456 def not_ten(a): if a == 10: return print(a, '입니다.',sep='') not_ten(5) 5입니다. 123456def add_sub(a, b): return a + b, a - bx, y = add_sub(10, 20)x 30 1y -10 12x, y = (30, -10)x 30 1y -10 12def one_two(): return 1, 2 # return (1, 2)와 같음 12345def one_two(): return [1, 2]x, y = one_two()print(x, y) 1 2 12345678910111213def mul(a, b): c = a * b return cdef add(a, b): c = a + b print(c) d = mul(a, b) print(d) x = 10y = 20add(x, y) 30 200 다음 소스 코드를 완성하여 x를 y로 나누었을 때의 몫과 나머지가 출력되게 만드세요. 123456789x = 10y = 3 def get_quotient_remainder(a, b): return a // b, a % b quotient, remainder = get_quotient_remainder(x, y)print('몫: {0}, 나머지: {1}'.format(quotient, remainder)) 몫: 3, 나머지: 1","link":"/2022/06/28/unit29/"},{"title":"판다스10분완성 &amp; 10 minutes to pandas","text":"판다스 10분 완성1.Object Creation (객체 생성)1import pandas as pd 12import numpy as np 12import matplotlib.pyplot as plt 12s = pd.Series([1,3,5,np.nan,6,8])s 0 1.0 1 3.0 2 5.0 3 NaN 4 6.0 5 8.0 dtype: float64 12dates = pd.date_range('20130101', periods=6)dates DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06'], dtype='datetime64[ns]', freq='D') 12df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 0.537168 -1.522940 0.831195 3.560677 2013-01-02 -1.417607 0.740138 -0.305933 0.790458 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 2013-01-04 0.189727 -0.956915 -1.698703 1.692175 2013-01-05 -0.041846 0.346492 0.508304 -1.669365 2013-01-06 -0.171845 1.194779 0.289561 0.563102 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-297c6298-2b0c-44b9-ade5-7892dee2cea8 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-297c6298-2b0c-44b9-ade5-7892dee2cea8'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1234567df2 = pd.DataFrame({'A' : 1., 'B' : pd.Timestamp('20130102'), 'C' : pd.Series(1,index=list(range(4)), dtype='float32'), 'D' : np.array([3]*4, dtype='int32'), 'E' : pd.Categorical([&quot;test&quot;,&quot;train&quot;,&quot;test&quot;,&quot;train&quot;]), 'F' : 'foo'})df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 1.0 2013-01-02 1.0 3 test foo 1 1.0 2013-01-02 1.0 3 train foo 2 1.0 2013-01-02 1.0 3 test foo 3 1.0 2013-01-02 1.0 3 train foo &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-7af859af-f274-4bcc-a563-c9bb908d2e51 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-7af859af-f274-4bcc-a563-c9bb908d2e51'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df2.dtypes A float64 B datetime64[ns] C float32 D int32 E category F object dtype: object 2. Viewing Data (데이터 확인하기)1df.tail(3) # 끝에서 마지막 3줄을 불러옴 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-04 0.189727 -0.956915 -1.698703 1.692175 2013-01-05 -0.041846 0.346492 0.508304 -1.669365 2013-01-06 -0.171845 1.194779 0.289561 0.563102 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-8453c49a-c03a-4238-89e8-303c69fb1bc2 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-8453c49a-c03a-4238-89e8-303c69fb1bc2'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.tail() # 끝에서 마지막 5줄 불러옴 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-02 -1.417607 0.740138 -0.305933 0.790458 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 2013-01-04 0.189727 -0.956915 -1.698703 1.692175 2013-01-05 -0.041846 0.346492 0.508304 -1.669365 2013-01-06 -0.171845 1.194779 0.289561 0.563102 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-8b585dfb-1100-4b9a-b85e-9bfbbb907338 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-8b585dfb-1100-4b9a-b85e-9bfbbb907338'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 0.537168 -1.522940 0.831195 3.560677 2013-01-02 -1.417607 0.740138 -0.305933 0.790458 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 2013-01-04 0.189727 -0.956915 -1.698703 1.692175 2013-01-05 -0.041846 0.346492 0.508304 -1.669365 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-4a09ad1b-47d8-4b10-9221-ca31a2485c8e button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4a09ad1b-47d8-4b10-9221-ca31a2485c8e'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.index DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06'], dtype='datetime64[ns]', freq='D') 1df.columns Index(['A', 'B', 'C', 'D'], dtype='object') 1df.values array([[ 0.53716808, -1.52293994, 0.83119534, 3.56067665], [-1.41760691, 0.74013831, -0.30593316, 0.79045842], [-0.82676805, -0.32656947, -0.69089334, -0.24781903], [ 0.18972719, -0.95691494, -1.69870345, 1.69217468], [-0.0418464 , 0.34649156, 0.50830366, -1.66936518], [-0.17184456, 1.19477948, 0.28956138, 0.56310241]]) 1df.describe() #통계적 정보요약 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D count 6.000000 6.000000 6.000000 6.000000 mean -0.288528 -0.087503 -0.177745 0.781538 std 0.714071 1.038374 0.927369 1.770151 min -1.417607 -1.522940 -1.698703 -1.669365 25% -0.663037 -0.799329 -0.594653 -0.045089 50% -0.106845 0.009961 -0.008186 0.676780 75% 0.131834 0.641727 0.453618 1.466746 max 0.537168 1.194779 0.831195 3.560677 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-21bfa1d4-71f8-4e1d-b1df-f5d730972057 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-21bfa1d4-71f8-4e1d-b1df-f5d730972057'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.T #데이터를 전치 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 2013-01-01 2013-01-02 2013-01-03 2013-01-04 2013-01-05 2013-01-06 A 0.537168 -1.417607 -0.826768 0.189727 -0.041846 -0.171845 B -1.522940 0.740138 -0.326569 -0.956915 0.346492 1.194779 C 0.831195 -0.305933 -0.690893 -1.698703 0.508304 0.289561 D 3.560677 0.790458 -0.247819 1.692175 -1.669365 0.563102 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-674c98c7-1a45-400b-9087-0fb229db68c8 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-674c98c7-1a45-400b-9087-0fb229db68c8'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.sort_index(axis=1, ascending=False) #축 별로 정렬 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D C B A 2013-01-01 3.560677 0.831195 -1.522940 0.537168 2013-01-02 0.790458 -0.305933 0.740138 -1.417607 2013-01-03 -0.247819 -0.690893 -0.326569 -0.826768 2013-01-04 1.692175 -1.698703 -0.956915 0.189727 2013-01-05 -1.669365 0.508304 0.346492 -0.041846 2013-01-06 0.563102 0.289561 1.194779 -0.171845 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-fa4570b6-e59e-42c9-b583-d26205628b6a button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-fa4570b6-e59e-42c9-b583-d26205628b6a'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.sort_values(by='B') #값 별로 정렬 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 0.537168 -1.522940 0.831195 3.560677 2013-01-04 0.189727 -0.956915 -1.698703 1.692175 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 2013-01-05 -0.041846 0.346492 0.508304 -1.669365 2013-01-02 -1.417607 0.740138 -0.305933 0.790458 2013-01-06 -0.171845 1.194779 0.289561 0.563102 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-aab35bfa-3bc4-4a9c-9ea3-6f3880b7d65b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-aab35bfa-3bc4-4a9c-9ea3-6f3880b7d65b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 3. Selection (선택) Getting (데이터 얻기) 1df['A'] 2013-01-01 0.537168 2013-01-02 -1.417607 2013-01-03 -0.826768 2013-01-04 0.189727 2013-01-05 -0.041846 2013-01-06 -0.171845 Freq: D, Name: A, dtype: float64 1df[0:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 0.537168 -1.522940 0.831195 3.560677 2013-01-02 -1.417607 0.740138 -0.305933 0.790458 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-53514ae2-a33d-4790-a8fd-4e08e10b0a08 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-53514ae2-a33d-4790-a8fd-4e08e10b0a08'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df['20130102':'20130104'] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-02 -1.417607 0.740138 -0.305933 0.790458 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 2013-01-04 0.189727 -0.956915 -1.698703 1.692175 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-f3e5b563-4299-4afb-bcb1-3d67b2c96254 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-f3e5b563-4299-4afb-bcb1-3d67b2c96254'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Selection by Label (Label 을 통한 선택) 1df.loc[dates[0]] A 0.537168 B -1.522940 C 0.831195 D 3.560677 Name: 2013-01-01 00:00:00, dtype: float64 1df.loc[:,['A','B']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2013-01-01 0.537168 -1.522940 2013-01-02 -1.417607 0.740138 2013-01-03 -0.826768 -0.326569 2013-01-04 0.189727 -0.956915 2013-01-05 -0.041846 0.346492 2013-01-06 -0.171845 1.194779 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-59afa290-c5ee-4463-b738-c32fd4b55408 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-59afa290-c5ee-4463-b738-c32fd4b55408'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.loc['20130102':'20130104', ['A','B']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2013-01-02 -1.417607 0.740138 2013-01-03 -0.826768 -0.326569 2013-01-04 0.189727 -0.956915 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-35f24da7-42c3-4584-8ac7-6682f7c6a178 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-35f24da7-42c3-4584-8ac7-6682f7c6a178'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.loc['20130102',['A','B']] A -1.417607 B 0.740138 Name: 2013-01-02 00:00:00, dtype: float64 1df.loc[dates[0],'A'] 0.5371680822425628 1df.at[dates[0],'A'] 0.5371680822425628 Selection by Position (위치로 선택하기) 1df.iloc[3] A 0.189727 B -0.956915 C -1.698703 D 1.692175 Name: 2013-01-04 00:00:00, dtype: float64 1df.iloc[3:5,0:2] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2013-01-04 0.189727 -0.956915 2013-01-05 -0.041846 0.346492 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-e2ae1786-30a3-4f25-ad1f-89614786b75a button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-e2ae1786-30a3-4f25-ad1f-89614786b75a'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.iloc[[1,2,4],[0,2]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A C 2013-01-02 -1.417607 -0.305933 2013-01-03 -0.826768 -0.690893 2013-01-05 -0.041846 0.508304 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-91d96dc3-f389-4e1e-b885-464aeb29f04b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-91d96dc3-f389-4e1e-b885-464aeb29f04b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.iloc[1:3,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-02 -1.417607 0.740138 -0.305933 0.790458 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-23fdfccf-4510-48e1-9862-26ddc4f5098b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-23fdfccf-4510-48e1-9862-26ddc4f5098b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.iloc[:,1:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } B C 2013-01-01 -1.522940 0.831195 2013-01-02 0.740138 -0.305933 2013-01-03 -0.326569 -0.690893 2013-01-04 -0.956915 -1.698703 2013-01-05 0.346492 0.508304 2013-01-06 1.194779 0.289561 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-1722704d-dcf4-4de7-a171-cdf9e2fd053e button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-1722704d-dcf4-4de7-a171-cdf9e2fd053e'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.iloc[1,1] 0.7401383124245268 1df.iat[1,1] 0.7401383124245268 Boolean Indexing 1df[df.A &gt; 0] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 0.537168 -1.522940 0.831195 3.560677 2013-01-04 0.189727 -0.956915 -1.698703 1.692175 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-8dcd0b28-cf46-441e-a58c-5bbf1ab65ce6 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-8dcd0b28-cf46-441e-a58c-5bbf1ab65ce6'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df[df &gt; 0] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 0.537168 NaN 0.831195 3.560677 2013-01-02 NaN 0.740138 NaN 0.790458 2013-01-03 NaN NaN NaN NaN 2013-01-04 0.189727 NaN NaN 1.692175 2013-01-05 NaN 0.346492 0.508304 NaN 2013-01-06 NaN 1.194779 0.289561 0.563102 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-d860931e-1fe7-48d9-9002-ce4a668ac272 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-d860931e-1fe7-48d9-9002-ce4a668ac272'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123df2 = df.copy()df2['E'] = ['one', 'one', 'two', 'three', 'four', 'three']df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E 2013-01-01 0.537168 -1.522940 0.831195 3.560677 one 2013-01-02 -1.417607 0.740138 -0.305933 0.790458 one 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 two 2013-01-04 0.189727 -0.956915 -1.698703 1.692175 three 2013-01-05 -0.041846 0.346492 0.508304 -1.669365 four 2013-01-06 -0.171845 1.194779 0.289561 0.563102 three &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-01603bf3-1cf2-476e-8353-c66d3bd568d5 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-01603bf3-1cf2-476e-8353-c66d3bd568d5'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df2[df2['E'].isin(['two','four'])] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E 2013-01-03 -0.826768 -0.326569 -0.690893 -0.247819 two 2013-01-05 -0.041846 0.346492 0.508304 -1.669365 four &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-0e947ccd-84f1-4656-9d5e-3bc1fcc9fc9b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-0e947ccd-84f1-4656-9d5e-3bc1fcc9fc9b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Setting (설정) 12s1 = pd.Series([1,2,3,4,5,6], index=pd.date_range('20130102', periods=6))s1 2013-01-02 1 2013-01-03 2 2013-01-04 3 2013-01-05 4 2013-01-06 5 2013-01-07 6 Freq: D, dtype: int64 1df['F'] = s1 1234df.at[dates[0],'A'] = 0df.iat[0,1] = 0df.loc[:,'D'] = np.array([5] * len(df))df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2013-01-01 0.000000 0.000000 0.831195 5 NaN 2013-01-02 -1.417607 0.740138 -0.305933 5 1.0 2013-01-03 -0.826768 -0.326569 -0.690893 5 2.0 2013-01-04 0.189727 -0.956915 -1.698703 5 3.0 2013-01-05 -0.041846 0.346492 0.508304 5 4.0 2013-01-06 -0.171845 1.194779 0.289561 5 5.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-89a167af-8fb4-4a4b-8712-9dd3caea4f92 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-89a167af-8fb4-4a4b-8712-9dd3caea4f92'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123df2 = df.copy()df2[df2 &gt; 0] = -df2df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2013-01-01 0.000000 0.000000 -0.831195 -5 NaN 2013-01-02 -1.417607 -0.740138 -0.305933 -5 -1.0 2013-01-03 -0.826768 -0.326569 -0.690893 -5 -2.0 2013-01-04 -0.189727 -0.956915 -1.698703 -5 -3.0 2013-01-05 -0.041846 -0.346492 -0.508304 -5 -4.0 2013-01-06 -0.171845 -1.194779 -0.289561 -5 -5.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-83c17164-6249-421d-9f2a-34b782101b09 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-83c17164-6249-421d-9f2a-34b782101b09'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 4. Missing Data (결측치)123df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])df1.loc[dates[0]:dates[1],'E'] = 1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2013-01-01 0.000000 0.000000 0.831195 5 NaN 1.0 2013-01-02 -1.417607 0.740138 -0.305933 5 1.0 1.0 2013-01-03 -0.826768 -0.326569 -0.690893 5 2.0 NaN 2013-01-04 0.189727 -0.956915 -1.698703 5 3.0 NaN &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-352a185d-2117-4793-98c8-0a7602fb7859 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-352a185d-2117-4793-98c8-0a7602fb7859'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df1.dropna(how='any') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2013-01-02 -1.417607 0.740138 -0.305933 5 1.0 1.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-dd76ed94-aec9-4821-8c06-9e0a086babc6 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-dd76ed94-aec9-4821-8c06-9e0a086babc6'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df1.fillna(value=5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2013-01-01 0.000000 0.000000 0.831195 5 5.0 1.0 2013-01-02 -1.417607 0.740138 -0.305933 5 1.0 1.0 2013-01-03 -0.826768 -0.326569 -0.690893 5 2.0 5.0 2013-01-04 0.189727 -0.956915 -1.698703 5 3.0 5.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-7b520ef6-15cd-43ef-8f87-610f8166fda3 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-7b520ef6-15cd-43ef-8f87-610f8166fda3'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1pd.isna(df1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2013-01-01 False False False False True False 2013-01-02 False False False False False False 2013-01-03 False False False False False True 2013-01-04 False False False False False True &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-c9baba86-48d4-4961-aeda-e11c6d799c50 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-c9baba86-48d4-4961-aeda-e11c6d799c50'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 5. Operation (연산) Stats (통계) 1df.mean() A -0.378056 B 0.166321 C -0.177745 D 5.000000 F 3.000000 dtype: float64 1df.mean(1) 2013-01-01 1.457799 2013-01-02 1.003320 2013-01-03 1.031154 2013-01-04 1.106822 2013-01-05 1.962590 2013-01-06 2.262499 Freq: D, dtype: float64 12s = pd.Series([1,3,5,np.nan,6,8], index=dates).shift(2)s 2013-01-01 NaN 2013-01-02 NaN 2013-01-03 1.0 2013-01-04 3.0 2013-01-05 5.0 2013-01-06 NaN Freq: D, dtype: float64 1df.sub(s, axis='index') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2013-01-01 NaN NaN NaN NaN NaN 2013-01-02 NaN NaN NaN NaN NaN 2013-01-03 -1.826768 -1.326569 -1.690893 4.0 1.0 2013-01-04 -2.810273 -3.956915 -4.698703 2.0 0.0 2013-01-05 -5.041846 -4.653508 -4.491696 0.0 -1.0 2013-01-06 NaN NaN NaN NaN NaN &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-8c01854c-e9f2-46e7-8ae6-fb8eeb6aaa4d button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-8c01854c-e9f2-46e7-8ae6-fb8eeb6aaa4d'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Apply (적용) 1df.apply(np.cumsum) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2013-01-01 0.000000 0.000000 0.831195 5 NaN 2013-01-02 -1.417607 0.740138 0.525262 10 1.0 2013-01-03 -2.244375 0.413569 -0.165631 15 3.0 2013-01-04 -2.054648 -0.543346 -1.864335 20 6.0 2013-01-05 -2.096494 -0.196855 -1.356031 25 10.0 2013-01-06 -2.268339 0.997925 -1.066470 30 15.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-008ddd9f-786a-49e6-ac28-7301ffab16cd button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-008ddd9f-786a-49e6-ac28-7301ffab16cd'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.apply(lambda x: x.max() - x.min()) A 1.607334 B 2.151694 C 2.529899 D 0.000000 F 4.000000 dtype: float64 Histogramming (히스토그래밍) 12s = pd.Series(np.random.randint(0, 7, size=10))s 0 1 1 2 2 3 3 2 4 2 5 1 6 5 7 2 8 3 9 5 dtype: int64 1s.value_counts() 2 4 1 2 3 2 5 2 dtype: int64 String Methods (문자열 메소드) 12s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])s.str.lower() 0 a 1 b 2 c 3 aaba 4 baca 5 NaN 6 caba 7 dog 8 cat dtype: object 6. Merge (병합) Concat (연결) 12df = pd.DataFrame(np.random.randn(10, 4))df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 0 1.300270 0.644198 -1.168628 2.038951 1 -1.626040 1.935020 -0.762870 0.360284 2 -1.674853 0.617954 0.766726 0.374496 3 -0.521029 1.424285 -0.447041 3.092677 4 0.268678 -1.001392 1.729981 -0.126541 5 0.212906 -0.141208 -0.968353 -0.626213 6 -1.735526 -0.583301 -0.132652 0.771896 7 -0.009821 0.127725 2.808065 -1.154641 8 2.961907 1.781734 -1.616500 -0.048640 9 -0.020551 -0.354377 -0.936459 1.003333 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-ae8cb7f0-603d-4fd1-a310-6f8d1f501d45 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-ae8cb7f0-603d-4fd1-a310-6f8d1f501d45'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12pieces = [df[:3], df[3:7], df[7:]]pd.concat(pieces) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 0 1.300270 0.644198 -1.168628 2.038951 1 -1.626040 1.935020 -0.762870 0.360284 2 -1.674853 0.617954 0.766726 0.374496 3 -0.521029 1.424285 -0.447041 3.092677 4 0.268678 -1.001392 1.729981 -0.126541 5 0.212906 -0.141208 -0.968353 -0.626213 6 -1.735526 -0.583301 -0.132652 0.771896 7 -0.009821 0.127725 2.808065 -1.154641 8 2.961907 1.781734 -1.616500 -0.048640 9 -0.020551 -0.354377 -0.936459 1.003333 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-04e62ad8-b765-4a67-b7e4-9a5ed7f61a71 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-04e62ad8-b765-4a67-b7e4-9a5ed7f61a71'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Join (결합) 123left = pd.DataFrame({'key': ['foo', 'foo'], 'lval': [1, 2]})right = pd.DataFrame({'key': ['foo', 'foo'], 'rval': [4, 5]})left .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval 0 foo 1 1 foo 2 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-a900bc55-3eab-4341-85f9-4007bfee7bb8 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-a900bc55-3eab-4341-85f9-4007bfee7bb8'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1right .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key rval 0 foo 4 1 foo 5 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-3947c542-1186-49de-845a-fd0bbd62a1cb button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-3947c542-1186-49de-845a-fd0bbd62a1cb'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1pd.merge(left, right, on= 'key') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval rval 0 foo 1 4 1 foo 1 5 2 foo 2 4 3 foo 2 5 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-4295e331-114b-4b52-832c-c87e39d58f31 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4295e331-114b-4b52-832c-c87e39d58f31'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123left = pd.DataFrame({'key' : ['foo', 'bar'], 'lval' : [1, 2]})right = pd.DataFrame({'key': ['foo', 'bar'], 'rval': [4, 5]})left .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval 0 foo 1 1 bar 2 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-cedc5b3f-05a1-495d-b44f-f345b60f5a03 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-cedc5b3f-05a1-495d-b44f-f345b60f5a03'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1right .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key rval 0 foo 4 1 bar 5 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-a516ca20-6a82-4eac-a08c-dd1764bd9f03 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-a516ca20-6a82-4eac-a08c-dd1764bd9f03'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1pd.merge(left, right, on= 'key') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval rval 0 foo 1 4 1 bar 2 5 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-fc49c0cc-7c79-4264-a0c6-59b8ac672d9f button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-fc49c0cc-7c79-4264-a0c6-59b8ac672d9f'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Append (추가) 12df = pd.DataFrame(np.random.randn(8, 4), columns=['A', 'B', 'C', 'D'])df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 1.065364 1.053500 -0.259130 0.812456 1 0.903536 -1.343285 0.522866 0.038905 2 0.745448 -2.741287 0.029608 -0.298409 3 1.048641 0.061178 0.401796 1.644205 4 -0.436193 -2.357151 -2.436356 0.962288 5 1.234701 1.770005 -0.102564 -0.004561 6 0.070735 -0.988170 -0.917713 -0.266052 7 -0.901988 -0.290211 1.398146 0.605998 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-8b43817c-933a-4b5f-a1b0-c88e1b346c9e button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-8b43817c-933a-4b5f-a1b0-c88e1b346c9e'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12s = df.iloc[3]df.append(s, ignore_index=True) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 1.065364 1.053500 -0.259130 0.812456 1 0.903536 -1.343285 0.522866 0.038905 2 0.745448 -2.741287 0.029608 -0.298409 3 1.048641 0.061178 0.401796 1.644205 4 -0.436193 -2.357151 -2.436356 0.962288 5 1.234701 1.770005 -0.102564 -0.004561 6 0.070735 -0.988170 -0.917713 -0.266052 7 -0.901988 -0.290211 1.398146 0.605998 8 1.048641 0.061178 0.401796 1.644205 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-1ff45dec-0228-4eec-bdeb-5da14095b929 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-1ff45dec-0228-4eec-bdeb-5da14095b929'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 7. Grouping (그룹화)12345678df = pd.DataFrame( { 'A' : ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B' : ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C' : np.random.randn(8), 'D' : np.random.randn(8) })df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one -1.753517 -0.636300 1 bar one 0.691673 0.438460 2 foo two -0.481799 0.583336 3 bar three 0.362088 -0.469820 4 foo two -0.709548 0.213033 5 bar two -0.825493 -0.485064 6 foo one 0.538008 -0.181902 7 foo three 0.396394 -0.512129 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-afaea77c-326b-4699-8423-52647aa05b93 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-afaea77c-326b-4699-8423-52647aa05b93'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.groupby('A').sum() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C D A bar 0.228268 -0.516424 foo -2.010462 -0.533962 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-8809fb79-fd4e-4209-ae62-d3f43e0c83ac button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-8809fb79-fd4e-4209-ae62-d3f43e0c83ac'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.groupby(['A','B']).sum() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C D A B bar one 0.691673 0.438460 three 0.362088 -0.469820 two -0.825493 -0.485064 foo one -1.215509 -0.818202 three 0.396394 -0.512129 two -1.191347 0.796369 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-34965406-0604-4737-9cd4-38ee2e8abb6a button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-34965406-0604-4737-9cd4-38ee2e8abb6a'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 8. Reshaping (변형) Stack (스택) 123456789tuples = list(zip(*[['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]))index = pd.MultiIndex.from_tuples(tuples, names=['first', 'second'])df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=['A', 'B'])df2 = df[:4]df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 0.587551 -0.258143 two 1.069153 -1.227421 baz one -0.932617 -1.803034 two -0.864412 0.169032 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-21bd9a5e-76f7-4bbb-bc94-5af6f11ac2bb button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-21bd9a5e-76f7-4bbb-bc94-5af6f11ac2bb'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12stacked = df2.stack()stacked first second bar one A 0.587551 B -0.258143 two A 1.069153 B -1.227421 baz one A -0.932617 B -1.803034 two A -0.864412 B 0.169032 dtype: float64 1stacked.unstack() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 0.587551 -0.258143 two 1.069153 -1.227421 baz one -0.932617 -1.803034 two -0.864412 0.169032 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-94d42898-dfa1-4372-9d67-469ab2221d07 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-94d42898-dfa1-4372-9d67-469ab2221d07'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1stacked.unstack(1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } second one two first bar A 0.587551 1.069153 B -0.258143 -1.227421 baz A -0.932617 -0.864412 B -1.803034 0.169032 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-99283630-e40a-4c27-8d3c-4f59d0661d43 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-99283630-e40a-4c27-8d3c-4f59d0661d43'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1stacked.unstack(0) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first bar baz second one A 0.587551 -0.932617 B -0.258143 -1.803034 two A 1.069153 -0.864412 B -1.227421 0.169032 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-7ebec058-691f-4a04-9b1b-85ce4cda19c5 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-7ebec058-691f-4a04-9b1b-85ce4cda19c5'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Pivot Tables (피봇 테이블) 123456df = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3, 'B' : ['A', 'B', 'C'] * 4, 'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2, 'D' : np.random.randn(12), 'E' : np.random.randn(12)})df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E 0 one A foo -0.008544 0.066193 1 one B foo -1.888534 1.171839 2 two C foo -0.559295 -0.347379 3 three A bar 0.119000 -1.933586 4 one B bar -1.210511 -1.450005 5 one C bar 1.396688 -0.100705 6 two A foo 0.462521 2.410280 7 three B foo 1.129052 -0.574137 8 one C foo -0.721876 -1.295897 9 one A bar -0.742471 -0.455366 10 two B bar 0.240881 0.612598 11 three C bar -0.372476 0.609670 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-1f96756a-ac64-4fc3-9b22-5bf2f06448d4 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-1f96756a-ac64-4fc3-9b22-5bf2f06448d4'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1pd.pivot_table(df, values='D', index=['A', 'B'], columns=['C']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C bar foo A B one A -0.742471 -0.008544 B -1.210511 -1.888534 C 1.396688 -0.721876 three A 0.119000 NaN B NaN 1.129052 C -0.372476 NaN two A NaN 0.462521 B 0.240881 NaN C NaN -0.559295 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-330e0df7-d673-435e-b49c-36f15ff098ee button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-330e0df7-d673-435e-b49c-36f15ff098ee'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 9. Time Series (시계열)1rng = pd.date_range('1/1/2012', periods=100, freq='S') 1ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng) 1ts.resample('5Min').sum() 2012-01-01 25084 Freq: 5T, dtype: int64 시간대를 표현 1rng = pd.date_range('3/6/2012 00:00', periods=5, freq='D') 1ts = pd.Series(np.random.randn(len(rng)), rng) 1ts 2012-03-06 -1.252587 2012-03-07 -1.408224 2012-03-08 -0.783360 2012-03-09 0.179657 2012-03-10 0.094302 Freq: D, dtype: float64 12ts_utc = ts.tz_localize('UTC')ts_utc 2012-03-06 00:00:00+00:00 -1.252587 2012-03-07 00:00:00+00:00 -1.408224 2012-03-08 00:00:00+00:00 -0.783360 2012-03-09 00:00:00+00:00 0.179657 2012-03-10 00:00:00+00:00 0.094302 Freq: D, dtype: float64 다른 시간대로 변환 1ts_utc.tz_convert('US/Eastern') 2012-03-05 19:00:00-05:00 -1.252587 2012-03-06 19:00:00-05:00 -1.408224 2012-03-07 19:00:00-05:00 -0.783360 2012-03-08 19:00:00-05:00 0.179657 2012-03-09 19:00:00-05:00 0.094302 Freq: D, dtype: float64 시간 표현 ↔ 기간 표현으로 변환 1rng = pd.date_range('1/1/2012', periods=5, freq='M') 1ts = pd.Series(np.random.randn(len(rng)), index=rng) 1ts 2012-01-31 -0.485743 2012-02-29 1.980416 2012-03-31 -0.520892 2012-04-30 -0.028493 2012-05-31 -0.194479 Freq: M, dtype: float64 12ps = ts.to_period()ps 2012-01 -0.485743 2012-02 1.980416 2012-03 -0.520892 2012-04 -0.028493 2012-05 -0.194479 Freq: M, dtype: float64 1ps.to_timestamp() 2012-01-01 -0.485743 2012-02-01 1.980416 2012-03-01 -0.520892 2012-04-01 -0.028493 2012-05-01 -0.194479 Freq: MS, dtype: float64 기간 ↔ 시간 변환은 편리한 산술 기능들을 사용할 수 있도록 만들어줍니다. 다음 예제에서, 우리는 11월에 끝나는 연말 결산의 분기별 빈도를 분기말 익월의 월말일 오전 9시로 변환합니다. 1prng = pd.period_range('1990Q1', '2000Q4', freq='Q-NOV') 1ts = pd.Series(np.random.randn(len(prng)), prng) 12ts.index = (prng.asfreq('M', 'e') + 1).asfreq('H', 's') + 9ts.head() 1990-03-01 09:00 0.487662 1990-06-01 09:00 -0.810018 1990-09-01 09:00 0.563653 1990-12-01 09:00 1.285432 1991-03-01 09:00 -0.730408 Freq: H, dtype: float64 10. Categoricals (범주화)1df = pd.DataFrame({&quot;id&quot;:[1,2,3,4,5,6], &quot;raw_grade&quot;:['a', 'b', 'b', 'a', 'a', 'e']}) 123# 가공하지 않은 성적을 범주형 데이터로 변환df[&quot;grade&quot;] = df[&quot;raw_grade&quot;].astype(&quot;category&quot;)df[&quot;grade&quot;] 0 a 1 b 2 b 3 a 4 a 5 e Name: grade, dtype: category Categories (3, object): ['a', 'b', 'e'] 12# 범주에 더 의미 있는 이름을 붙인다df[&quot;grade&quot;].cat.categories = [&quot;very good&quot;, &quot;good&quot;, &quot;very bad&quot;] 12df[&quot;grade&quot;] = df[&quot;grade&quot;].cat.set_categories([&quot;very bad&quot;, &quot;bad&quot;, &quot;medium&quot;, &quot;good&quot;, &quot;very good&quot;])df[&quot;grade&quot;] 0 very good 1 good 2 good 3 very good 4 very good 5 very bad Name: grade, dtype: category Categories (5, object): ['very bad', 'bad', 'medium', 'good', 'very good'] 1df.sort_values(by=&quot;grade&quot;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id raw_grade grade 5 6 e very bad 1 2 b good 2 3 b good 0 1 a very good 3 4 a very good 4 5 a very good &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-2c8ea174-315e-48fa-b87c-36a710c5cbe7 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-2c8ea174-315e-48fa-b87c-36a710c5cbe7'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.groupby(&quot;grade&quot;).size() grade very bad 1 bad 0 medium 0 good 2 very good 3 dtype: int64 11. Plotting (그래프)1ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000)) 1ts = ts.cumsum() 1ts.plot() &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f51af1423d0&gt; 12df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=['A', 'B', 'C', 'D']) 1df = df.cumsum() 1plt.figure(); df.plot(); plt.legend(loc='best') &lt;matplotlib.legend.Legend at 0x7f51aebbacd0&gt; &lt;Figure size 432x288 with 0 Axes&gt; 12. Getting Data In / Out (데이터 입 / 출력) CSV 1df.to_csv('foo.csv') 1pd.read_csv('foo.csv') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 A B C D 0 2000-01-01 1.144381 -0.002242 0.158862 -0.240616 1 2000-01-02 0.384763 0.033501 1.638435 -1.486811 2 2000-01-03 0.504765 -1.198235 2.955597 -1.257166 3 2000-01-04 0.803148 -1.282076 5.966986 -2.501552 4 2000-01-05 1.023462 -0.844092 5.671452 -2.672713 ... ... ... ... ... ... 995 2002-09-22 34.205367 -50.416431 -41.939157 -28.881550 996 2002-09-23 34.047809 -50.561633 -40.745521 -31.034942 997 2002-09-24 34.394324 -50.846630 -40.560689 -30.859070 998 2002-09-25 33.374786 -49.925112 -40.039959 -31.770444 999 2002-09-26 32.796673 -50.321773 -39.319165 -31.097754 1000 rows × 5 columns &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-3a2707a2-b66e-48cf-9a1e-e02da2eb6ea8 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-3a2707a2-b66e-48cf-9a1e-e02da2eb6ea8'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; HDF5 1df.to_hdf('foo.h5','df') 1pd.read_hdf('foo.h5','df') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2000-01-01 1.144381 -0.002242 0.158862 -0.240616 2000-01-02 0.384763 0.033501 1.638435 -1.486811 2000-01-03 0.504765 -1.198235 2.955597 -1.257166 2000-01-04 0.803148 -1.282076 5.966986 -2.501552 2000-01-05 1.023462 -0.844092 5.671452 -2.672713 ... ... ... ... ... 2002-09-22 34.205367 -50.416431 -41.939157 -28.881550 2002-09-23 34.047809 -50.561633 -40.745521 -31.034942 2002-09-24 34.394324 -50.846630 -40.560689 -30.859070 2002-09-25 33.374786 -49.925112 -40.039959 -31.770444 2002-09-26 32.796673 -50.321773 -39.319165 -31.097754 1000 rows × 4 columns &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-8ebaa541-0b0d-464b-8718-7ff298bfbc65 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-8ebaa541-0b0d-464b-8718-7ff298bfbc65'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Excel 1df.to_excel('foo.xlsx', sheet_name='Sheet1') 1pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 A B C D 0 2000-01-01 1.144381 -0.002242 0.158862 -0.240616 1 2000-01-02 0.384763 0.033501 1.638435 -1.486811 2 2000-01-03 0.504765 -1.198235 2.955597 -1.257166 3 2000-01-04 0.803148 -1.282076 5.966986 -2.501552 4 2000-01-05 1.023462 -0.844092 5.671452 -2.672713 ... ... ... ... ... ... 995 2002-09-22 34.205367 -50.416431 -41.939157 -28.881550 996 2002-09-23 34.047809 -50.561633 -40.745521 -31.034942 997 2002-09-24 34.394324 -50.846630 -40.560689 -30.859070 998 2002-09-25 33.374786 -49.925112 -40.039959 -31.770444 999 2002-09-26 32.796673 -50.321773 -39.319165 -31.097754 1000 rows × 5 columns &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-901d2d66-1012-4bd7-8679-525e1849d075 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-901d2d66-1012-4bd7-8679-525e1849d075'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 13. Gotchas (잡았다!) 예외 상황 12if pd.Series([False, True, False]): print(&quot;I was true&quot;) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-120-5c782b38cd2f&gt; in &lt;module&gt;() ----&gt; 1 if pd.Series([False, True, False]): 2 print(&quot;I was true&quot;) /usr/local/lib/python3.7/dist-packages/pandas/core/generic.py in __nonzero__(self) 1536 def __nonzero__(self): 1537 raise ValueError( -&gt; 1538 f&quot;The truth value of a {type(self).__name__} is ambiguous. &quot; 1539 &quot;Use a.empty, a.bool(), a.item(), a.any() or a.all().&quot; 1540 ) ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). 1234# 이러한 경우에는 any(), all(), empty 등을 사용해서 무엇을 원하는지를 선택 (반영)해주어야if pd.Series([False, True, False])is not None: print(&quot;I was not None&quot;) I was not None 10 minutes to pandas https://pandas.pydata.org/docs/user_guide/10min.html 12import numpy as np 1import pandas as pd 12s = pd.Series([1, 3, 5, np.nan, 6, 8])s 0 1.0 1 3.0 2 5.0 3 NaN 4 6.0 5 8.0 dtype: float64 12dates = pd.date_range(&quot;20130101&quot;, periods=6)dates DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06'], dtype='datetime64[ns]', freq='D') 12df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(&quot;ABCD&quot;))df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 -0.447205 -1.415499 0.415436 -0.419206 2013-01-02 0.076054 -0.881634 0.714701 0.968511 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 2013-01-04 0.179720 -0.353615 0.148686 -0.941105 2013-01-05 0.017490 -1.024891 0.062566 -1.657465 2013-01-06 1.163262 -0.684634 0.544150 0.061399 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-8b66e34f-dd6b-491f-b38a-5b4e1b2b5690 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-8b66e34f-dd6b-491f-b38a-5b4e1b2b5690'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1234567891011df2 = pd.DataFrame( { &quot;A&quot;: 1.0, &quot;B&quot;: pd.Timestamp(&quot;20130102&quot;), &quot;C&quot;: pd.Series(1, index=list(range(4)), dtype=&quot;float32&quot;), &quot;D&quot;: np.array([3] * 4, dtype=&quot;int32&quot;), &quot;E&quot;: pd.Categorical([&quot;test&quot;, &quot;train&quot;, &quot;test&quot;, &quot;train&quot;]), &quot;F&quot;: &quot;foo&quot;, })df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 1.0 2013-01-02 1.0 3 test foo 1 1.0 2013-01-02 1.0 3 train foo 2 1.0 2013-01-02 1.0 3 test foo 3 1.0 2013-01-02 1.0 3 train foo &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-0f29422f-b2ad-4552-a41a-e33dac0c4673 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-0f29422f-b2ad-4552-a41a-e33dac0c4673'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df2.dtypes A float64 B datetime64[ns] C float32 D int32 E category F object dtype: object 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 -0.447205 -1.415499 0.415436 -0.419206 2013-01-02 0.076054 -0.881634 0.714701 0.968511 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 2013-01-04 0.179720 -0.353615 0.148686 -0.941105 2013-01-05 0.017490 -1.024891 0.062566 -1.657465 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-be50b68b-59e7-4db2-85e9-fffa5122ea14 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-be50b68b-59e7-4db2-85e9-fffa5122ea14'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.tail(3) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-04 0.179720 -0.353615 0.148686 -0.941105 2013-01-05 0.017490 -1.024891 0.062566 -1.657465 2013-01-06 1.163262 -0.684634 0.544150 0.061399 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-7b211d09-fbfd-4aac-81d5-1fce3abd6d72 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-7b211d09-fbfd-4aac-81d5-1fce3abd6d72'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.index DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06'], dtype='datetime64[ns]', freq='D') 1df.columns Index(['A', 'B', 'C', 'D'], dtype='object') 1df.to_numpy() array([[-0.44720512, -1.41549865, 0.41543633, -0.41920573], [ 0.07605415, -0.88163417, 0.71470136, 0.9685111 ], [ 1.22043125, -0.61193578, -0.00186209, -0.8054424 ], [ 0.1797202 , -0.35361541, 0.14868621, -0.9411048 ], [ 0.01748984, -1.02489119, 0.06256576, -1.65746522], [ 1.16326219, -0.6846343 , 0.54415037, 0.06139875]]) 1df2.to_numpy() array([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'], [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'], [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'], [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']], dtype=object) DataFrame.to_numpy() does not include the index or column labels in the images/pandas0628/output. 1df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D count 6.000000 6.000000 6.000000 6.000000 mean 0.368292 -0.828702 0.313946 -0.465551 std 0.673376 0.368530 0.287797 0.905394 min -0.447205 -1.415499 -0.001862 -1.657465 25% 0.032131 -0.989077 0.084096 -0.907189 50% 0.127887 -0.783134 0.282061 -0.612324 75% 0.917377 -0.630110 0.511972 -0.058752 max 1.220431 -0.353615 0.714701 0.968511 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-33a3a014-73b2-4ff4-9844-a016f2fa893f button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-33a3a014-73b2-4ff4-9844-a016f2fa893f'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.T .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 2013-01-01 2013-01-02 2013-01-03 2013-01-04 2013-01-05 2013-01-06 A -0.447205 0.076054 1.220431 0.179720 0.017490 1.163262 B -1.415499 -0.881634 -0.611936 -0.353615 -1.024891 -0.684634 C 0.415436 0.714701 -0.001862 0.148686 0.062566 0.544150 D -0.419206 0.968511 -0.805442 -0.941105 -1.657465 0.061399 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-c3fb4767-2fcd-4aa0-a097-9572e180006b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-c3fb4767-2fcd-4aa0-a097-9572e180006b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.sort_index(axis=1, ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D C B A 2013-01-01 -0.419206 0.415436 -1.415499 -0.447205 2013-01-02 0.968511 0.714701 -0.881634 0.076054 2013-01-03 -0.805442 -0.001862 -0.611936 1.220431 2013-01-04 -0.941105 0.148686 -0.353615 0.179720 2013-01-05 -1.657465 0.062566 -1.024891 0.017490 2013-01-06 0.061399 0.544150 -0.684634 1.163262 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-74c0ee7a-9deb-4639-b849-ef3b7da15814 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-74c0ee7a-9deb-4639-b849-ef3b7da15814'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.sort_values(by=&quot;B&quot;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 -0.447205 -1.415499 0.415436 -0.419206 2013-01-05 0.017490 -1.024891 0.062566 -1.657465 2013-01-02 0.076054 -0.881634 0.714701 0.968511 2013-01-06 1.163262 -0.684634 0.544150 0.061399 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 2013-01-04 0.179720 -0.353615 0.148686 -0.941105 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-ede04934-4c89-405d-b133-7c823b38d7f3 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-ede04934-4c89-405d-b133-7c823b38d7f3'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df[&quot;A&quot;] 2013-01-01 -0.447205 2013-01-02 0.076054 2013-01-03 1.220431 2013-01-04 0.179720 2013-01-05 0.017490 2013-01-06 1.163262 Freq: D, Name: A, dtype: float64 1df[0:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 -0.447205 -1.415499 0.415436 -0.419206 2013-01-02 0.076054 -0.881634 0.714701 0.968511 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-e76a3613-4998-4a0b-9293-9e7b8d0c06fa button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-e76a3613-4998-4a0b-9293-9e7b8d0c06fa'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df[&quot;20130102&quot;:&quot;20130104&quot;] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-02 0.076054 -0.881634 0.714701 0.968511 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 2013-01-04 0.179720 -0.353615 0.148686 -0.941105 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-4f9173ee-ba3b-469f-bccc-b52405a3088c button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4f9173ee-ba3b-469f-bccc-b52405a3088c'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.loc[dates[0]] A -0.447205 B -1.415499 C 0.415436 D -0.419206 Name: 2013-01-01 00:00:00, dtype: float64 1df.loc[:, [&quot;A&quot;, &quot;B&quot;]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2013-01-01 -0.447205 -1.415499 2013-01-02 0.076054 -0.881634 2013-01-03 1.220431 -0.611936 2013-01-04 0.179720 -0.353615 2013-01-05 0.017490 -1.024891 2013-01-06 1.163262 -0.684634 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-b4e8deab-00b4-4741-b37e-7df102ceb800 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-b4e8deab-00b4-4741-b37e-7df102ceb800'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.loc[&quot;20130102&quot;:&quot;20130104&quot;, [&quot;A&quot;, &quot;B&quot;]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2013-01-02 0.076054 -0.881634 2013-01-03 1.220431 -0.611936 2013-01-04 0.179720 -0.353615 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-093675db-e77b-4fb4-8aca-6723fc652612 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-093675db-e77b-4fb4-8aca-6723fc652612'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.loc[&quot;20130102&quot;, [&quot;A&quot;, &quot;B&quot;]] A 0.076054 B -0.881634 Name: 2013-01-02 00:00:00, dtype: float64 1df.loc[dates[0], &quot;A&quot;] -0.4472051226750298 1df.at[dates[0], &quot;A&quot;] -0.4472051226750298 1df.iloc[3] A 0.179720 B -0.353615 C 0.148686 D -0.941105 Name: 2013-01-04 00:00:00, dtype: float64 1df.iloc[3:5, 0:2] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2013-01-04 0.17972 -0.353615 2013-01-05 0.01749 -1.024891 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-6d5ba9d5-add7-407a-ba28-40015cc3bb22 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-6d5ba9d5-add7-407a-ba28-40015cc3bb22'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.iloc[[1, 2, 4], [0, 2]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A C 2013-01-02 0.076054 0.714701 2013-01-03 1.220431 -0.001862 2013-01-05 0.017490 0.062566 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-710f05db-0421-4eea-b156-b9f752ba1f8e button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-710f05db-0421-4eea-b156-b9f752ba1f8e'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.iloc[1:3, :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-02 0.076054 -0.881634 0.714701 0.968511 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-eccf977a-3d09-440d-b7be-9b172e65ae89 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-eccf977a-3d09-440d-b7be-9b172e65ae89'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.iloc[:, 1:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } B C 2013-01-01 -1.415499 0.415436 2013-01-02 -0.881634 0.714701 2013-01-03 -0.611936 -0.001862 2013-01-04 -0.353615 0.148686 2013-01-05 -1.024891 0.062566 2013-01-06 -0.684634 0.544150 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-ffd685cd-ea92-4883-a21a-a722b418347a button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-ffd685cd-ea92-4883-a21a-a722b418347a'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.iloc[1, 1] -0.8816341654230094 1df.iat[1, 1] -0.8816341654230094 1df[df[&quot;A&quot;] &gt; 0] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-02 0.076054 -0.881634 0.714701 0.968511 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 2013-01-04 0.179720 -0.353615 0.148686 -0.941105 2013-01-05 0.017490 -1.024891 0.062566 -1.657465 2013-01-06 1.163262 -0.684634 0.544150 0.061399 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-f23d83ba-c33c-4a79-a5a2-6ebc173fe829 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-f23d83ba-c33c-4a79-a5a2-6ebc173fe829'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df[df &gt; 0] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2013-01-01 NaN NaN 0.415436 NaN 2013-01-02 0.076054 NaN 0.714701 0.968511 2013-01-03 1.220431 NaN NaN NaN 2013-01-04 0.179720 NaN 0.148686 NaN 2013-01-05 0.017490 NaN 0.062566 NaN 2013-01-06 1.163262 NaN 0.544150 0.061399 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-b09d210c-6c3c-4418-9ec6-93ff1a044340 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-b09d210c-6c3c-4418-9ec6-93ff1a044340'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123df2 = df.copy()df2[&quot;E&quot;] = [&quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;three&quot;]df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E 2013-01-01 -0.447205 -1.415499 0.415436 -0.419206 one 2013-01-02 0.076054 -0.881634 0.714701 0.968511 one 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 two 2013-01-04 0.179720 -0.353615 0.148686 -0.941105 three 2013-01-05 0.017490 -1.024891 0.062566 -1.657465 four 2013-01-06 1.163262 -0.684634 0.544150 0.061399 three &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-253e6eca-b13f-43ef-898e-b2c8020b44f8 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-253e6eca-b13f-43ef-898e-b2c8020b44f8'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df2[df2[&quot;E&quot;].isin([&quot;two&quot;, &quot;four&quot;])] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E 2013-01-03 1.220431 -0.611936 -0.001862 -0.805442 two 2013-01-05 0.017490 -1.024891 0.062566 -1.657465 four &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-03eb5834-5a5c-4995-8183-c4a4816edefe button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-03eb5834-5a5c-4995-8183-c4a4816edefe'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(&quot;20130102&quot;, periods=6))s1 2013-01-02 1 2013-01-03 2 2013-01-04 3 2013-01-05 4 2013-01-06 5 2013-01-07 6 Freq: D, dtype: int64 1df[&quot;F&quot;] = s1 1df.at[dates[0], &quot;A&quot;] = 0 1df.iat[0, 1] = 0 12df.loc[:, &quot;D&quot;] = np.array([5] * len(df))df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2013-01-01 0.000000 0.000000 0.415436 5 NaN 2013-01-02 0.076054 -0.881634 0.714701 5 1.0 2013-01-03 1.220431 -0.611936 -0.001862 5 2.0 2013-01-04 0.179720 -0.353615 0.148686 5 3.0 2013-01-05 0.017490 -1.024891 0.062566 5 4.0 2013-01-06 1.163262 -0.684634 0.544150 5 5.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-a134c997-8044-4377-bdf8-d3843e0fb904 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-a134c997-8044-4377-bdf8-d3843e0fb904'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123df2 = df.copy()df2[df2 &gt; 0] = -df2df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2013-01-01 0.000000 0.000000 -0.415436 -5 NaN 2013-01-02 -0.076054 -0.881634 -0.714701 -5 -1.0 2013-01-03 -1.220431 -0.611936 -0.001862 -5 -2.0 2013-01-04 -0.179720 -0.353615 -0.148686 -5 -3.0 2013-01-05 -0.017490 -1.024891 -0.062566 -5 -4.0 2013-01-06 -1.163262 -0.684634 -0.544150 -5 -5.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-4df04f3d-357d-4707-8c3e-d210a0b80a24 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4df04f3d-357d-4707-8c3e-d210a0b80a24'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Missing data123df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + [&quot;E&quot;])df1.loc[dates[0] : dates[1], &quot;E&quot;] = 1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2013-01-01 0.000000 0.000000 0.415436 5 NaN 1.0 2013-01-02 0.076054 -0.881634 0.714701 5 1.0 1.0 2013-01-03 1.220431 -0.611936 -0.001862 5 2.0 NaN 2013-01-04 0.179720 -0.353615 0.148686 5 3.0 NaN &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-69cfe3e7-ade9-4979-a2d9-13b688f61de9 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-69cfe3e7-ade9-4979-a2d9-13b688f61de9'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df1.dropna(how=&quot;any&quot;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2013-01-02 0.076054 -0.881634 0.714701 5 1.0 1.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-ff8794fe-308a-41c4-8e01-d8049046d1d3 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-ff8794fe-308a-41c4-8e01-d8049046d1d3'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df1.fillna(value=5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2013-01-01 0.000000 0.000000 0.415436 5 5.0 1.0 2013-01-02 0.076054 -0.881634 0.714701 5 1.0 1.0 2013-01-03 1.220431 -0.611936 -0.001862 5 2.0 5.0 2013-01-04 0.179720 -0.353615 0.148686 5 3.0 5.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-e954ff6e-9605-4cb0-9975-a8f963d88081 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-e954ff6e-9605-4cb0-9975-a8f963d88081'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1pd.isna(df1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2013-01-01 False False False False True False 2013-01-02 False False False False False False 2013-01-03 False False False False False True 2013-01-04 False False False False False True &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-02e325bd-c31c-45d3-86c3-7a7a1c49967b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-02e325bd-c31c-45d3-86c3-7a7a1c49967b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Operations1df.mean() A 0.442826 B -0.592785 C 0.313946 D 5.000000 F 3.000000 dtype: float64 1df.mean(1) 2013-01-01 1.353859 2013-01-02 1.181824 2013-01-03 1.521327 2013-01-04 1.594958 2013-01-05 1.611033 2013-01-06 2.204556 Freq: D, dtype: float64 12s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)s 2013-01-01 NaN 2013-01-02 NaN 2013-01-03 1.0 2013-01-04 3.0 2013-01-05 5.0 2013-01-06 NaN Freq: D, dtype: float64 1df.sub(s, axis=&quot;index&quot;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2013-01-01 NaN NaN NaN NaN NaN 2013-01-02 NaN NaN NaN NaN NaN 2013-01-03 0.220431 -1.611936 -1.001862 4.0 1.0 2013-01-04 -2.820280 -3.353615 -2.851314 2.0 0.0 2013-01-05 -4.982510 -6.024891 -4.937434 0.0 -1.0 2013-01-06 NaN NaN NaN NaN NaN &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-3e276f0a-4408-4d2c-ba5f-cb37971c64b3 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-3e276f0a-4408-4d2c-ba5f-cb37971c64b3'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Apply1df.apply(np.cumsum) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2013-01-01 0.000000 0.000000 0.415436 5 NaN 2013-01-02 0.076054 -0.881634 1.130138 10 1.0 2013-01-03 1.296485 -1.493570 1.128276 15 3.0 2013-01-04 1.476206 -1.847185 1.276962 20 6.0 2013-01-05 1.493695 -2.872077 1.339528 25 10.0 2013-01-06 2.656958 -3.556711 1.883678 30 15.0 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-9f61801e-1329-4a96-bcbe-b091bb37cc5d button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-9f61801e-1329-4a96-bcbe-b091bb37cc5d'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.apply(lambda x: x.max() - x.min()) A 1.220431 B 1.024891 C 0.716563 D 0.000000 F 4.000000 dtype: float64 Histogramming12s = pd.Series(np.random.randint(0, 7, size=10))s 0 4 1 1 2 3 3 5 4 1 5 5 6 5 7 2 8 5 9 4 dtype: int64 1s.value_counts() 5 4 4 2 1 2 3 1 2 1 dtype: int64 String Methods12s = pd.Series([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;Aaba&quot;, &quot;Baca&quot;, np.nan, &quot;CABA&quot;, &quot;dog&quot;, &quot;cat&quot;])s.str.lower() 0 a 1 b 2 c 3 aaba 4 baca 5 NaN 6 caba 7 dog 8 cat dtype: object Merge12df = pd.DataFrame(np.random.randn(10, 4))df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 0 -0.141558 -1.172255 -1.527109 0.411425 1 0.527861 1.177782 -0.509060 0.228392 2 0.959363 -1.420044 -2.854401 -0.698306 3 -1.999973 1.259134 -1.212511 -0.157609 4 -1.830625 -0.992132 0.617988 1.524316 5 0.036304 1.537439 1.443501 1.033337 6 -0.477727 0.403691 0.117763 -0.228043 7 0.118842 0.384570 -0.369866 0.988675 8 -0.670941 -0.801663 0.593094 0.143780 9 -0.428165 0.832511 0.657365 -0.522456 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-38ed6df7-2d50-4a99-b320-13bb84c09192 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-38ed6df7-2d50-4a99-b320-13bb84c09192'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12pieces = [df[:3], df[3:7], df[7:]]pd.concat(pieces) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 0 -0.141558 -1.172255 -1.527109 0.411425 1 0.527861 1.177782 -0.509060 0.228392 2 0.959363 -1.420044 -2.854401 -0.698306 3 -1.999973 1.259134 -1.212511 -0.157609 4 -1.830625 -0.992132 0.617988 1.524316 5 0.036304 1.537439 1.443501 1.033337 6 -0.477727 0.403691 0.117763 -0.228043 7 0.118842 0.384570 -0.369866 0.988675 8 -0.670941 -0.801663 0.593094 0.143780 9 -0.428165 0.832511 0.657365 -0.522456 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-efcd4e29-ca44-4b15-984e-f6fdbcc27509 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-efcd4e29-ca44-4b15-984e-f6fdbcc27509'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Join123left = pd.DataFrame({&quot;key&quot;: [&quot;foo&quot;, &quot;foo&quot;], &quot;lval&quot;: [1, 2]})right = pd.DataFrame({&quot;key&quot;: [&quot;foo&quot;, &quot;foo&quot;], &quot;rval&quot;: [4, 5]})left .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval 0 foo 1 1 foo 2 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-66e276a4-e066-47b8-987e-9c03dddf5519 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-66e276a4-e066-47b8-987e-9c03dddf5519'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1right .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key rval 0 foo 4 1 foo 5 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-ed889877-4910-45bc-a91c-8c4f789d0381 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-ed889877-4910-45bc-a91c-8c4f789d0381'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1pd.merge(left, right, on=&quot;key&quot;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval rval 0 foo 1 4 1 foo 1 5 2 foo 2 4 3 foo 2 5 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-e748f4a6-c9f0-4c38-b437-edb2ec497d75 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-e748f4a6-c9f0-4c38-b437-edb2ec497d75'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123left = pd.DataFrame({&quot;key&quot;: [&quot;foo&quot;, &quot;bar&quot;], &quot;lval&quot;: [1, 2]})right = pd.DataFrame({&quot;key&quot;: [&quot;foo&quot;, &quot;bar&quot;], &quot;rval&quot;: [4, 5]})left .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval 0 foo 1 1 bar 2 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-4d8e51c2-8681-4343-a78f-ca83c382de3c button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4d8e51c2-8681-4343-a78f-ca83c382de3c'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1right .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key rval 0 foo 4 1 bar 5 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-60a4c00f-ab95-49eb-874c-58f76f1d1675 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-60a4c00f-ab95-49eb-874c-58f76f1d1675'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Grouping123456789df = pd.DataFrame( { &quot;A&quot;: [&quot;foo&quot;, &quot;bar&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;foo&quot;, &quot;foo&quot;], &quot;B&quot;: [&quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;two&quot;, &quot;two&quot;, &quot;one&quot;, &quot;three&quot;], &quot;C&quot;: np.random.randn(8), &quot;D&quot;: np.random.randn(8), })df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one 0.914723 0.133535 1 bar one -0.789137 0.443513 2 foo two 1.516614 0.343236 3 bar three -2.799557 0.695185 4 foo two 0.318044 0.645327 5 bar two -0.229514 -0.574477 6 foo one -0.489881 -0.066461 7 foo three -0.684367 -1.640396 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-749f9bef-cdf9-444a-9112-8e542b089a14 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-749f9bef-cdf9-444a-9112-8e542b089a14'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.groupby(&quot;A&quot;).sum() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C D A bar -3.818208 0.56422 foo 1.575134 -0.58476 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-2f0b2281-42c1-47eb-8367-3637a20dd424 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-2f0b2281-42c1-47eb-8367-3637a20dd424'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.groupby([&quot;A&quot;, &quot;B&quot;]).sum() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C D A B bar one -0.789137 0.443513 three -2.799557 0.695185 two -0.229514 -0.574477 foo one 0.424842 0.067074 three -0.684367 -1.640396 two 1.834658 0.988562 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-bbf3f9bc-5bfe-4df6-9435-1591fadc382d button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-bbf3f9bc-5bfe-4df6-9435-1591fadc382d'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Reshaping12345678910111213tuples = list( zip( *[ [&quot;bar&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;baz&quot;, &quot;foo&quot;, &quot;foo&quot;, &quot;qux&quot;, &quot;qux&quot;], [&quot;one&quot;, &quot;two&quot;, &quot;one&quot;, &quot;two&quot;, &quot;one&quot;, &quot;two&quot;, &quot;one&quot;, &quot;two&quot;], ] ))index = pd.MultiIndex.from_tuples(tuples, names=[&quot;first&quot;, &quot;second&quot;])df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[&quot;A&quot;, &quot;B&quot;])df2 = df[:4]df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 0.677550 0.937141 two 0.309970 -0.631782 baz one 1.706121 0.006556 two 2.202712 -0.398200 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-79b9ea5e-d176-4c39-9c44-90a46954df5f button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-79b9ea5e-d176-4c39-9c44-90a46954df5f'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12stacked = df2.stack()stacked first second bar one A 0.677550 B 0.937141 two A 0.309970 B -0.631782 baz one A 1.706121 B 0.006556 two A 2.202712 B -0.398200 dtype: float64 1stacked.unstack() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 0.677550 0.937141 two 0.309970 -0.631782 baz one 1.706121 0.006556 two 2.202712 -0.398200 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-25e810ef-57e3-4581-95fd-87d4af355946 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-25e810ef-57e3-4581-95fd-87d4af355946'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1stacked.unstack(1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } second one two first bar A 0.677550 0.309970 B 0.937141 -0.631782 baz A 1.706121 2.202712 B 0.006556 -0.398200 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-f675061b-0a58-43d7-8484-d90d28f7f5ab button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-f675061b-0a58-43d7-8484-d90d28f7f5ab'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1stacked.unstack(0) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first bar baz second one A 0.677550 1.706121 B 0.937141 0.006556 two A 0.309970 2.202712 B -0.631782 -0.398200 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-a9be5b6b-129d-4338-8fdb-03182dfa6b39 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-a9be5b6b-129d-4338-8fdb-03182dfa6b39'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Pivot tables 12345678910df = pd.DataFrame( { &quot;A&quot;: [&quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;] * 3, &quot;B&quot;: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;] * 4, &quot;C&quot;: [&quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;bar&quot;, &quot;bar&quot;] * 2, &quot;D&quot;: np.random.randn(12), &quot;E&quot;: np.random.randn(12), })df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E 0 one A foo 0.907310 2.035384 1 one B foo -1.041839 0.913881 2 two C foo 0.350662 -0.238221 3 three A bar -1.037410 0.886584 4 one B bar 1.259049 -0.273548 5 one C bar -0.014484 -2.130796 6 two A foo -1.032321 0.263691 7 three B foo -0.106302 -2.442493 8 one C foo -0.534058 0.535382 9 one A bar 1.632226 -0.102549 10 two B bar -1.342476 -1.236502 11 three C bar -0.971900 0.019946 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-328c51d5-fc8c-4f1d-b243-ac6e836cc37a button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-328c51d5-fc8c-4f1d-b243-ac6e836cc37a'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1pd.pivot_table(df, values=&quot;D&quot;, index=[&quot;A&quot;, &quot;B&quot;], columns=[&quot;C&quot;]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C bar foo A B one A 1.632226 0.907310 B 1.259049 -1.041839 C -0.014484 -0.534058 three A -1.037410 NaN B NaN -0.106302 C -0.971900 NaN two A NaN -1.032321 B -1.342476 NaN C NaN 0.350662 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-9e84ece8-5ff6-463e-8af0-6045311c0c8a button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-9e84ece8-5ff6-463e-8af0-6045311c0c8a'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Time series 123rng = pd.date_range(&quot;1/1/2012&quot;, periods=100, freq=&quot;S&quot;)ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)ts.resample(&quot;5Min&quot;).sum() 2012-01-01 23766 Freq: 5T, dtype: int64 123rng = pd.date_range(&quot;3/6/2012 00:00&quot;, periods=5, freq=&quot;D&quot;)ts = pd.Series(np.random.randn(len(rng)), rng)ts 2012-03-06 -1.232794 2012-03-07 1.736319 2012-03-08 0.551561 2012-03-09 1.098254 2012-03-10 0.298657 Freq: D, dtype: float64 12ts_utc = ts.tz_localize(&quot;UTC&quot;)ts_utc 2012-03-06 00:00:00+00:00 -1.232794 2012-03-07 00:00:00+00:00 1.736319 2012-03-08 00:00:00+00:00 0.551561 2012-03-09 00:00:00+00:00 1.098254 2012-03-10 00:00:00+00:00 0.298657 Freq: D, dtype: float64 1ts_utc.tz_convert(&quot;US/Eastern&quot;) 2012-03-05 19:00:00-05:00 -1.232794 2012-03-06 19:00:00-05:00 1.736319 2012-03-07 19:00:00-05:00 0.551561 2012-03-08 19:00:00-05:00 1.098254 2012-03-09 19:00:00-05:00 0.298657 Freq: D, dtype: float64 123rng = pd.date_range(&quot;1/1/2012&quot;, periods=5, freq=&quot;M&quot;)ts = pd.Series(np.random.randn(len(rng)), index=rng)ts 2012-01-31 -0.039340 2012-02-29 2.686117 2012-03-31 -0.338684 2012-04-30 -0.890984 2012-05-31 -0.171688 Freq: M, dtype: float64 12ps = ts.to_period()ps 2012-01 -0.039340 2012-02 2.686117 2012-03 -0.338684 2012-04 -0.890984 2012-05 -0.171688 Freq: M, dtype: float64 1ps.to_timestamp() 2012-01-01 -0.039340 2012-02-01 2.686117 2012-03-01 -0.338684 2012-04-01 -0.890984 2012-05-01 -0.171688 Freq: MS, dtype: float64 1234prng = pd.period_range(&quot;1990Q1&quot;, &quot;2000Q4&quot;, freq=&quot;Q-NOV&quot;)ts = pd.Series(np.random.randn(len(prng)), prng)ts.index = (prng.asfreq(&quot;M&quot;, &quot;e&quot;) + 1).asfreq(&quot;H&quot;, &quot;s&quot;) + 9ts.head() 1990-03-01 09:00 -1.399344 1990-06-01 09:00 1.375604 1990-09-01 09:00 -0.773417 1990-12-01 09:00 0.146093 1991-03-01 09:00 0.293528 Freq: H, dtype: float64 Categoricals12345df = pd.DataFrame( {&quot;id&quot;: [1, 2, 3, 4, 5, 6], &quot;raw_grade&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;a&quot;, &quot;a&quot;, &quot;e&quot;]})df[&quot;grade&quot;] = df[&quot;raw_grade&quot;].astype(&quot;category&quot;)df[&quot;grade&quot;] 0 a 1 b 2 b 3 a 4 a 5 e Name: grade, dtype: category Categories (3, object): ['a', 'b', 'e'] 1df[&quot;grade&quot;].cat.categories = [&quot;very good&quot;, &quot;good&quot;, &quot;very bad&quot;] 12345df[&quot;grade&quot;] = df[&quot;grade&quot;].cat.set_categories( [&quot;very bad&quot;, &quot;bad&quot;, &quot;medium&quot;, &quot;good&quot;, &quot;very good&quot;])df[&quot;grade&quot;] 0 very good 1 good 2 good 3 very good 4 very good 5 very bad Name: grade, dtype: category Categories (5, object): ['very bad', 'bad', 'medium', 'good', 'very good'] 1df.sort_values(by=&quot;grade&quot;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id raw_grade grade 5 6 e very bad 1 2 b good 2 3 b good 0 1 a very good 3 4 a very good 4 5 a very good &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-fbbaf878-d6a1-4acc-9962-632aadd8d7e5 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-fbbaf878-d6a1-4acc-9962-632aadd8d7e5'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.groupby(&quot;grade&quot;).size() grade very bad 1 bad 0 medium 0 good 2 very good 3 dtype: int64 Plotting12import matplotlib.pyplot as plt 1plt.close(&quot;all&quot;) 1ts = pd.Series(np.random.randn(1000), index=pd.date_range(&quot;1/1/2000&quot;, periods=1000)) 1ts = ts.cumsum() 1ts.plot(); 1plt.show(); 123df = pd.DataFrame( np.random.randn(1000, 4), index=ts.index, columns=[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]) 123df = df.cumsum()plt.figure(); &lt;Figure size 432x288 with 0 Axes&gt; 1df.plot(); Getting data in/out CSV 1df.to_csv(&quot;foo.csv&quot;) 1pd.read_csv(&quot;foo.csv&quot;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 A B C D 0 2000-01-01 1.403857 1.291987 0.189668 0.550260 1 2000-01-02 2.142990 2.683977 -0.026091 1.631917 2 2000-01-03 1.112196 2.893101 -0.856500 3.914641 3 2000-01-04 -0.175124 3.797215 -2.062722 7.230985 4 2000-01-05 -0.813377 5.305872 -2.280351 10.246125 ... ... ... ... ... ... 995 2002-09-22 16030.984107 44036.982136 17579.948397 16120.676004 996 2002-09-23 16045.707309 44082.871135 17605.991556 16161.002194 997 2002-09-24 16061.779545 44127.478638 17632.742613 16200.411242 998 2002-09-25 16077.777389 44173.084247 17658.208921 16240.003989 999 2002-09-26 16094.258223 44218.354559 17683.503629 16281.691211 1000 rows × 5 columns &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-dc132f82-b2b7-4479-9429-e98c36631452 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-dc132f82-b2b7-4479-9429-e98c36631452'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; HDF5 1df.to_hdf(&quot;foo.h5&quot;, &quot;df&quot;) 1pd.read_hdf(&quot;foo.h5&quot;, &quot;df&quot;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2000-01-01 1.403857 1.291987 0.189668 0.550260 2000-01-02 2.142990 2.683977 -0.026091 1.631917 2000-01-03 1.112196 2.893101 -0.856500 3.914641 2000-01-04 -0.175124 3.797215 -2.062722 7.230985 2000-01-05 -0.813377 5.305872 -2.280351 10.246125 ... ... ... ... ... 2002-09-22 16030.984107 44036.982136 17579.948397 16120.676004 2002-09-23 16045.707309 44082.871135 17605.991556 16161.002194 2002-09-24 16061.779545 44127.478638 17632.742613 16200.411242 2002-09-25 16077.777389 44173.084247 17658.208921 16240.003989 2002-09-26 16094.258223 44218.354559 17683.503629 16281.691211 1000 rows × 4 columns &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-248c5bb5-2400-41de-ad5e-161b505086ef button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-248c5bb5-2400-41de-ad5e-161b505086ef'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; Excel 1df.to_excel(&quot;foo.xlsx&quot;, sheet_name=&quot;Sheet1&quot;) 1pd.read_excel(&quot;foo.xlsx&quot;, &quot;Sheet1&quot;, index_col=None, na_values=[&quot;NA&quot;]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 A B C D 0 2000-01-01 1.403857 1.291987 0.189668 0.550260 1 2000-01-02 2.142990 2.683977 -0.026091 1.631917 2 2000-01-03 1.112196 2.893101 -0.856500 3.914641 3 2000-01-04 -0.175124 3.797215 -2.062722 7.230985 4 2000-01-05 -0.813377 5.305872 -2.280351 10.246125 ... ... ... ... ... ... 995 2002-09-22 16030.984107 44036.982136 17579.948397 16120.676004 996 2002-09-23 16045.707309 44082.871135 17605.991556 16161.002194 997 2002-09-24 16061.779545 44127.478638 17632.742613 16200.411242 998 2002-09-25 16077.777389 44173.084247 17658.208921 16240.003989 999 2002-09-26 16094.258223 44218.354559 17683.503629 16281.691211 1000 rows × 5 columns &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-b7865aa5-afde-464d-bc5e-105377ee72ec button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-b7865aa5-afde-464d-bc5e-105377ee72ec'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/pandas0628/output_type'] = 'display_data'; await google.colab.images/pandas0628/output.renderimages/pandas0628/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt;","link":"/2022/06/29/pandas0628/"},{"title":"seaborn","text":"데이터 분석(머신러닝, 딥러닝) 프로세스 데이터 불러오기 CSV, 오라클, MySQL, PostgreSQL, 클라우드DB연동 탐색적 자료분석 데이터 전처리 및 가공 잠정적인 컬럼의 갯수를 지정 머신러닝 모델 (=통계모델링, t.test, 분산분석, 교차분석) 머신러닝 모델의 경우 배포(현재는 다루지 않음) JSP- 스프링 웹개발시, 배우게 됨 통계 모델링 경우, p-value값 기준으로, 귀무가설 및 대립가설 검정 (공통) 결과 보고서를 작성하기 PPT 만들기 그래프 복습 수치형 데이터 시각화 범주형 데이터 시각화 데이터 관계 시각화 matplotlib 라이브러리 방법(복잡) seaborn 라이브러리 방법(단순) 복잡한 그래프그릴때 -&gt; marplotlib 1줄 그래프 -&gt; seaborn 수치형 데이터 시각화 Python의 Seaborn 패키지에는 다양한 내장데이터가 있다 연습용으로 활용가능 123import seaborn as snstitanic = sns.load_dataset('titanic')titanic.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } survived pclass sex age sibsp parch fare embarked class who adult_male deck embark_town alive alone 0 0 3 male 22.0 1 0 7.2500 S Third man True NaN Southampton no False 1 1 1 female 38.0 1 0 71.2833 C First woman False C Cherbourg yes False 2 1 3 female 26.0 0 0 7.9250 S Third woman False NaN Southampton yes True 3 1 1 female 35.0 1 0 53.1000 S First woman False C Southampton yes False 4 0 3 male 35.0 0 0 8.0500 S Third man True NaN Southampton no True &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-a367cd23-1a74-4500-8c60-d518e7c7e004 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-a367cd23-1a74-4500-8c60-d518e7c7e004'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0706/output_type'] = 'display_data'; await google.colab.images/0706/output.renderimages/0706/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12# 히스토그램sns.histplot(data = titanic, x = 'age') &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e9d7e7810&gt; 1sns.histplot(data = titanic, x = 'age', bins=10, hue='alive', multiple='stack') &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e9b211150&gt; 123# 커넬 밀도 추정 함수 그래프# 연속형 데이터 1개만 쓸때 사용sns.kdeplot(data=titanic, x='age') &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e9b9600d0&gt; 위 그래프 설명…. 1sns.kdeplot(data=titanic, x='age', hue='alive', multiple='stack') &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e9b11d9d0&gt; 분포도 수치형 데이터 한개 컬럼의 분포를 나타내는 그래프 정규분포인가? 1sns.displot(data=titanic, x='age') &lt;seaborn.axisgrid.FacetGrid at 0x7f1e9b33de90&gt; 1sns.displot(data=titanic, x='age', kind='kde') &lt;seaborn.axisgrid.FacetGrid at 0x7f1e96754710&gt; 1sns.displot(data=titanic, x='age', kde= True) &lt;seaborn.axisgrid.FacetGrid at 0x7f1e96754c50&gt; 범주형 데이터 시각화 x축 범주형, y축 수치데이터 12# 막대 그래프sns.barplot(x='class', y='fare',data=titanic) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e96626090&gt; 12# 포인트 플롯sns.pointplot(x='class', y='fare', data=titanic) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e965c11d0&gt; 박스플롯 제 1사분위 : 전체 데이터 중 하위 25% 사분위 범위 수(IQR) : 제 3사분위 - 제 1사분위 최댓값 : 제 3사분위 + (1.5 * IQ) 12# boxplotsns.boxplot(x='class', y='age',data=titanic) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e9652f0d0&gt; 12# 바이올린 플롯sns.violinplot(x = 'class', y = 'age', hue = 'sex', data = titanic, split = True); 카운트 플롯 범주형 데이터의 갯수 확인 할때 사용 1sns.countplot(x = 'alive', data = titanic) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e99086bd0&gt; 데이터 관계 시각화 여러 데이터 사이의 관계도 파악을 위한 그래프 히트맵12flights = sns.load_dataset('flights')flights.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year month passengers 0 1949 Jan 112 1 1949 Feb 118 2 1949 Mar 132 3 1949 Apr 129 4 1949 May 121 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-a2cd537f-318f-4ef7-8db3-e31a3ce65580 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-a2cd537f-318f-4ef7-8db3-e31a3ce65580'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0706/output_type'] = 'display_data'; await google.colab.images/0706/output.renderimages/0706/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 판다스에서 복사해서 응용 12345678import pandas as pddf = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two', 'two'], 'bar': ['A', 'B', 'C', 'A', 'B', 'C'], 'baz': [1, 2, 3, 4, 5, 6], 'zoo': ['x', 'y', 'z', 'q', 'w', 't']})df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } foo bar baz zoo 0 one A 1 x 1 one B 2 y 2 one C 3 z 3 two A 4 q 4 two B 5 w 5 two C 6 t &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-1ae0e23d-eda2-4670-a77a-bee362132409 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-1ae0e23d-eda2-4670-a77a-bee362132409'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0706/output_type'] = 'display_data'; await google.colab.images/0706/output.renderimages/0706/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.pivot(index = 'foo', columns = 'bar', values = 'baz') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bar A B C foo one 1 2 3 two 4 5 6 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-7a884986-8779-41bf-88f8-aa6b83e185b2 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-7a884986-8779-41bf-88f8-aa6b83e185b2'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0706/output_type'] = 'display_data'; await google.colab.images/0706/output.renderimages/0706/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1flights .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year month passengers 0 1949 Jan 112 1 1949 Feb 118 2 1949 Mar 132 3 1949 Apr 129 4 1949 May 121 ... ... ... ... 139 1960 Aug 606 140 1960 Sep 508 141 1960 Oct 461 142 1960 Nov 390 143 1960 Dec 432 144 rows × 3 columns &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-2b67b019-ba04-455e-9938-7eb965a94136 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-2b67b019-ba04-455e-9938-7eb965a94136'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0706/output_type'] = 'display_data'; await google.colab.images/0706/output.renderimages/0706/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 123# flights['year'].value_counts()flights_pivot = flights.pivot(index = 'month', columns = 'year', values = 'passengers')flights_pivot .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 month Jan 112 115 145 171 196 204 242 284 315 340 360 417 Feb 118 126 150 180 196 188 233 277 301 318 342 391 Mar 132 141 178 193 236 235 267 317 356 362 406 419 Apr 129 135 163 181 235 227 269 313 348 348 396 461 May 121 125 172 183 229 234 270 318 355 363 420 472 Jun 135 149 178 218 243 264 315 374 422 435 472 535 Jul 148 170 199 230 264 302 364 413 465 491 548 622 Aug 148 170 199 242 272 293 347 405 467 505 559 606 Sep 136 158 184 209 237 259 312 355 404 404 463 508 Oct 119 133 162 191 211 229 274 306 347 359 407 461 Nov 104 114 146 172 180 203 237 271 305 310 362 390 Dec 118 140 166 194 201 229 278 306 336 337 405 432 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-63cc829c-9ecb-46d1-8b3f-826eb006276d button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-63cc829c-9ecb-46d1-8b3f-826eb006276d'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0706/output_type'] = 'display_data'; await google.colab.images/0706/output.renderimages/0706/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12# 위 테이블의 시각화sns.heatmap(data = flights_pivot) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e9b2f7dd0&gt; 123# 라인 플롯sns.lineplot(x='year', y='passengers',data=flights) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e95f3ae90&gt; 123# 산점도 tips = sns.load_dataset('tips')tips.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-82fb9526-10b7-4b8c-a4f9-7172c364d5da button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-82fb9526-10b7-4b8c-a4f9-7172c364d5da'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['images/0706/output_type'] = 'display_data'; await google.colab.images/0706/output.renderimages/0706/output(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 두 개의 연속형 데이터 1sns.scatterplot(x='total_bill', y='tip', data=tips) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e96293d90&gt; 1sns.scatterplot(x='total_bill', y='tip', hue='time',data=tips) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e96257c10&gt; 1sns.scatterplot(x='total_bill', y='tip', hue='sex',data=tips) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e961f1150&gt; 12# 회귀선sns.regplot(x='total_bill', y='tip', data=tips) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e9675e650&gt; 123## 머신러닝 리뷰- 가장 인기있는 모델 + LightGBM, XGboost 선형회귀 선형 회귀식을 찾는 것이 중요 y=3x+4에 근사한 데이터 50개 생성 12345678910111213141516import numpy as npimport pandas as pd# 시드값 고정np.random.seed(0)intercept = 4 #절편, 상수slope = 3 # 기울기# 변동성 주기위해 노이즈 생성noise = np.random.randn(50,1)x=5 * np.random.rand(50,1) #0과 5사이의 실숫값을 50개 생성y=slope*x+intercept+noise# 데이터 프레임 생성data = pd.DataFrame({'X' : x[:, 0], 'Y' : y[:, 0]})print(data) X Y 0 0.794848 8.148596 1 0.551876 6.055784 2 3.281648 14.823682 3 0.690915 8.313637 4 0.982912 8.816293 5 1.843626 8.553600 6 4.104966 17.264987 7 0.485506 5.305162 8 4.189725 16.465955 9 0.480492 5.852075 10 4.882297 18.790936 11 2.343256 12.484042 12 4.883805 19.412454 13 3.024228 13.194358 14 3.696318 15.532817 15 0.195939 4.921491 16 1.414035 9.736184 17 0.600983 5.597790 18 1.480701 8.755171 19 0.593639 4.926820 20 1.589916 6.216758 21 2.071315 10.867564 22 0.320737 5.826649 23 3.462361 13.644917 24 2.833007 14.768776 25 1.326947 6.526477 26 2.616240 11.894479 27 0.469703 5.221924 28 2.879732 14.171977 29 4.646481 19.408802 30 1.592845 8.933482 31 3.337052 14.389318 32 0.658989 5.089182 33 3.581636 12.764112 34 1.447030 7.993179 35 0.915957 6.904219 36 2.932565 14.027985 37 0.100538 5.503993 38 4.144700 16.046774 39 0.023477 3.768129 40 3.389083 13.118695 41 1.350040 6.630102 42 3.675970 13.321640 43 4.810943 20.383604 44 1.243766 7.221645 45 2.880787 12.204286 46 2.960210 11.627834 47 2.861260 13.361269 48 1.115408 5.732327 49 4.763745 18.078495 1234import matplotlib.pyplot as pltfig, ax = plt.subplots()ax.scatter(data['X'], data['Y'])plt.show() 12import seaborn as sns sns.scatterplot(x = 'X', y = 'Y', data = data) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1e95e82410&gt; 선형 회귀 모형 훈련 모형 생성 후, 회귀계수 3과 y절편 4에 근사한 값이 나와야 한다 123456from sklearn.linear_model import LinearRegressionlr_model = LinearRegression()lr_model.fit(x,y)print('y절편:', lr_model.intercept_)print('회귀절편계수:', lr_model.coef_) y절편: [4.05757639] 회귀절편계수: [[3.03754061]] 1234567891011# 예측값y_pred = lr_model.predict(x)fig, ax = plt.subplots()ax.scatter(x, y)ax.plot(x, y_pred, color='green')# slope, intercept label = 'slope: {}\\nintercept: {}'.format(round(lr_model.coef_[0][0], 2), round(lr_model.intercept_[0], 2))ax.text(3.5, 4, label, style ='italic', fontsize = 10, color =&quot;green&quot;)plt.show() 로지스틱 회귀12345678910111213141516171819202122232425262728import numpy as npimport matplotlib.pyplot as pltdef sigmoid(arr, scale=1): arr = np.asarray(arr) result = 1/(1 + np.exp(-arr*scale)) return resultx = np.linspace(-6, 6)y = sigmoid(x)fig, ax = plt.subplots()ax.plot(x, y)ax.grid(which='major', axis='y', linestyle='--')ax.axvline(x=0, color='r', linestyle='--', linewidth=1)ax.set_ylim(0,1)ax.set_yticks([0, 1, 0.5])ax.text(0-0.1, 0.5, '0.5', ha='right')ax.set_title('Sigmoid Graph')plt.show() 12345678910111213# 라이브러리 불러오기import matplotlib.pyplot as pltimport numpy as npfrom sklearn.linear_model import LogisticRegressionfrom sklearn.metrics import classification_report, confusion_matrix# 데이터 가져오기x = np.arange(10).reshape(-1, 1)y = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1])# 모델 생성 및 학습model = LogisticRegression(solver='liblinear', C=10.0, random_state=0)model.fit(x, y) LogisticRegression(C=10.0, random_state=0, solver='liblinear') 123# 모형 평가p_pred = model.predict_proba(x)print('p_perd', p_pred, sep='Wn') p_perdWn[[0.97979027 0.02020973] [0.94958202 0.05041798] [0.87976149 0.12023851] [0.73975066 0.26024934] [0.52477284 0.47522716] [0.30020373 0.69979627] [0.1428487 0.8571513 ] [0.06080627 0.93919373] [0.02453462 0.97546538] [0.00967652 0.99032348]] 12y_pred = model.predict(x)print('y_pred',y_pred) y_pred [0 0 0 0 0 1 1 1 1 1] 12345678910fig, ax = plt.subplots()ax.scatter(x, y)ax.plot(x, p_pred[:, 1], color = 'black', marker='o', markersize=6)ax.plot()ax.set_xticks(x)ax.set_yticks(np.arange(0, 1.1, 0.1))ax.grid(which='major', alpha=0.5)plt.show() 12conf_m = confusion_matrix(y, y_pred)print(conf_m) [[5 0] [0 5]] 123456789101112cm = confusion_matrix(y, y_pred)fig, ax = plt.subplots(figsize=(8, 8))ax.imshow(cm, cmap = 'Pastel2')ax.grid(False)ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0', 'Predicted 1'))ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0', 'Actual 1'))ax.set_ylim(1.5, -0.5)for i in range(2): for j in range(2): ax.text(j, i, cm[i, j], ha='center', va='center', color='black', fontsize=20)plt.show() https://matplotlib.org/stable/tutorials/colors/colormaps.htm 색상참고 결정트리 분류와 회귀 문제에 모두 사용가능 주요 개념 작동 원리 데이터를 가장 잘 구분하는 조건을 정함 조건을 기준으로 데이터를 두 범주로 나눔 나뉜 각 범주의 데이터를 구분하는 조건을 정함 각 조건을 기준으로 데이터를 두 범주로 나눔 언제까지 계속 분할할지 정한 후, 최종 결정 값을 구함 불순도(Impurity) 한 범주 안에 서로 다른 데이터가 얼마나 섞여 있는지 나타냄 흰색과 검은색이 50:50으로 섞여 있다 (불순도 최대) 흰색과 검은색으로 완전 분리 되었다 (불순도 최소) 엔트로피(Entropy) 불확실한 정도를 의미함( 0 - 1로 정함) 흰색과 검은색이 50:50으로 섞여 있다_ 엔트로피 1 흰색과 검은색으로 완전 분리 되었다_ 엔트로피 0 정보이득(Information Gain) 1에서 엔트로피를 뺀 수치 정보 이득을 최대화하는 방향(엔트로피를 최소화 하는 방향)으로 노드를 분할함 지니 불순도(Gini Impurity) 지니 불순도 값이 클수록 불순도도 높고, 작을수록 불순도도 낮음 엔트로피와 마찬가지로 지니 불순도가 낮아지는 방향으로 노드 분할함 1234567from sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import train_test_split import seaborn as sns # tips 데이터셋 titanic = sns.load_dataset('titanic')titanic.info() &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 15 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 survived 891 non-null int64 1 pclass 891 non-null int64 2 sex 891 non-null object 3 age 714 non-null float64 4 sibsp 891 non-null int64 5 parch 891 non-null int64 6 fare 891 non-null float64 7 embarked 889 non-null object 8 class 891 non-null category 9 who 891 non-null object 10 adult_male 891 non-null bool 11 deck 203 non-null category 12 embark_town 889 non-null object 13 alive 891 non-null object 14 alone 891 non-null bool dtypes: bool(2), category(2), float64(2), int64(4), object(5) memory usage: 80.7+ KB survived의 비율을 구한다 0 : 사망자 1 : 생존자 1titanic['survived'].value_counts() 0 549 1 342 Name: survived, dtype: int64 1234567# 데이터 추출X = titanic[['pclass', 'parch', 'fare']]y = titanic['survived']# 훈련데이터, 테스트 데이터 분리X_train, X_test, y_train, y_test = train_test_split(X, y, stratify = y, test_size = 0.3, random_state=42)X_train.shape, X_test.shape, y_train.shape, y_test.shape ((623, 3), (268, 3), (623,), (268,)) 12345tree_model = DecisionTreeClassifier()tree_model.fit(X_train, y_train)acc = tree_model.score(X_test, y_test)print(f'모형 정확도 : {acc:.3f}') # 정확도 측정 모형 정확도 : 0.675 1## 랜덤포레스트 12345678910111213141516171819from sklearn.ensemble import RandomForestClassifierfrom sklearn.model_selection import train_test_split import seaborn as sns # tips 데이터셋 titanic = sns.load_dataset('titanic')X = titanic[['pclass', 'parch', 'fare']]y = titanic['survived']# 훈련데이터, 테스트 데이터 분리X_train, X_test, y_train, y_test = train_test_split(X, y, stratify = y, test_size = 0.3, random_state=42)# 모델 훈련rf_model = RandomForestClassifier(random_state=42) # 랜덤 포레스트 정의rf_model.fit(X_train, y_train)acc = rf_model.score(X_test, y_test)print(f'모형 정확도 : {acc:.3f}') # 정확도 측정 모형 정확도 : 0.675","link":"/2022/07/06/day0706_seborn/"},{"title":"XGboost &amp; LightGBM","text":"XGboost &amp; LightGBM (2016-2017) 전통적인 머신러닝 알고리즘의 융합 선형회귀 릿지 라쏘, 과적합 방지 위한 규제 결정트리의 핵심적인 알고리즘 경사하강법 부스팅 기법 문제점 : 파라미터의 개수가 매우 많음 왜 많이 쓸까요? 모델학습 속도 성능 가장 좋은 모델이란, 학습속도는 빠르면서 성능은 좋은 것(지금까지 나온 알고리즘보다) Python JAVA, C, C++ C, C++ / r data.table 패키지 큰 회사들 개발 첫 번째 옵션, 우리가 자체적으로 배포하자-&gt; Pyhthon Wrapper API R, 머신러닝 프레임워크 종류 다양 파이썬 머신러닝 = Scikit-Learn에서 쉽게 쓸 수 있도록 개발, Scikit-Learn 참고 https://xgboost.readthedocs.io/en/stable/python/python_intro.html XGboost (Scikit-Learn API방식 &amp; python Wrapper 방식)python Wrapper 방식 X_train, y_train 1234567891011121314151617181920import xgboost as xgb from sklearn.model_selection import train_test_splitimport seaborn as sns # 데이터 분리titanic = sns.load_dataset('titanic')# titanic.info()# X, 독립변수, y 종속변수X = titanic[['pclass', 'parch', 'fare']]y = titanic['survived']# 훈련데이터, 테스트 데이터 분리X_train, X_test, y_train, y_test = train_test_split(X, y, stratify = y, test_size = 0.3, random_state=42)X_train.shape, X_test.shape, y_train.shape, y_test.shape ((623, 3), (268, 3), (623,), (268,)) 여기가 핵심 12345dtrain = xgb.DMatrix(data = X_train, label = y_train)dtest = xgb.DMatrix(data=X_test, label=y_test)print(dtrain) &lt;xgboost.core.DMatrix object at 0x7fc937b31ad0&gt; 123456789101112131415161718#max_depth = 트리의 깊이#n_estimator = 트리의 수params = { 'max_depth' : 3, 'n_estimators' : 100, 'eta' : 0.1, 'objective' : 'binary:logistic'}num_rounds = 400w_list = [(dtrain, 'train'), (dtest, 'test')]xgb_ml = xgb.train(params = params, dtrain = dtrain, num_boost_round = 400, early_stopping_rounds = 100, evals = w_list) [0] train-error:0.260032 test-error:0.302239 Multiple eval metrics have been passed: 'test-error' will be used for early stopping. Will train until test-error hasn't improved in 100 rounds. [1] train-error:0.260032 test-error:0.302239 [2] train-error:0.260032 test-error:0.302239 [3] train-error:0.260032 test-error:0.302239 [4] train-error:0.260032 test-error:0.302239 [5] train-error:0.260032 test-error:0.302239 [6] train-error:0.260032 test-error:0.302239 [7] train-error:0.260032 test-error:0.302239 [8] train-error:0.260032 test-error:0.302239 [9] train-error:0.260032 test-error:0.302239 [10] train-error:0.260032 test-error:0.302239 [11] train-error:0.260032 test-error:0.302239 [12] train-error:0.260032 test-error:0.302239 [13] train-error:0.247191 test-error:0.298507 [14] train-error:0.247191 test-error:0.298507 [15] train-error:0.248796 test-error:0.302239 [16] train-error:0.248796 test-error:0.302239 [17] train-error:0.248796 test-error:0.302239 [18] train-error:0.248796 test-error:0.302239 [19] train-error:0.248796 test-error:0.302239 [20] train-error:0.248796 test-error:0.302239 [21] train-error:0.248796 test-error:0.302239 [22] train-error:0.248796 test-error:0.302239 [23] train-error:0.248796 test-error:0.302239 [24] train-error:0.248796 test-error:0.302239 [25] train-error:0.248796 test-error:0.302239 [26] train-error:0.248796 test-error:0.302239 [27] train-error:0.248796 test-error:0.302239 [28] train-error:0.247191 test-error:0.302239 [29] train-error:0.247191 test-error:0.302239 [30] train-error:0.247191 test-error:0.302239 [31] train-error:0.243981 test-error:0.298507 [32] train-error:0.247191 test-error:0.302239 [33] train-error:0.243981 test-error:0.298507 [34] train-error:0.243981 test-error:0.298507 [35] train-error:0.242376 test-error:0.294776 [36] train-error:0.24077 test-error:0.294776 [37] train-error:0.24077 test-error:0.294776 [38] train-error:0.24077 test-error:0.294776 [39] train-error:0.24077 test-error:0.294776 [40] train-error:0.24077 test-error:0.294776 [41] train-error:0.24077 test-error:0.294776 [42] train-error:0.24077 test-error:0.294776 [43] train-error:0.24077 test-error:0.294776 [44] train-error:0.24077 test-error:0.302239 [45] train-error:0.24077 test-error:0.302239 [46] train-error:0.24077 test-error:0.302239 [47] train-error:0.24077 test-error:0.302239 [48] train-error:0.24077 test-error:0.302239 [49] train-error:0.24077 test-error:0.302239 [50] train-error:0.24077 test-error:0.302239 [51] train-error:0.24077 test-error:0.302239 [52] train-error:0.23435 test-error:0.302239 [53] train-error:0.23435 test-error:0.302239 [54] train-error:0.232745 test-error:0.298507 [55] train-error:0.229535 test-error:0.298507 [56] train-error:0.229535 test-error:0.298507 [57] train-error:0.229535 test-error:0.298507 [58] train-error:0.229535 test-error:0.298507 [59] train-error:0.227929 test-error:0.294776 [60] train-error:0.227929 test-error:0.298507 [61] train-error:0.227929 test-error:0.298507 [62] train-error:0.227929 test-error:0.298507 [63] train-error:0.227929 test-error:0.298507 [64] train-error:0.227929 test-error:0.298507 [65] train-error:0.227929 test-error:0.298507 [66] train-error:0.227929 test-error:0.298507 [67] train-error:0.227929 test-error:0.298507 [68] train-error:0.227929 test-error:0.298507 [69] train-error:0.227929 test-error:0.298507 [70] train-error:0.227929 test-error:0.298507 [71] train-error:0.227929 test-error:0.298507 [72] train-error:0.227929 test-error:0.302239 [73] train-error:0.227929 test-error:0.302239 [74] train-error:0.229535 test-error:0.30597 [75] train-error:0.229535 test-error:0.30597 [76] train-error:0.229535 test-error:0.30597 [77] train-error:0.229535 test-error:0.30597 [78] train-error:0.229535 test-error:0.30597 [79] train-error:0.229535 test-error:0.30597 [80] train-error:0.229535 test-error:0.30597 [81] train-error:0.229535 test-error:0.30597 [82] train-error:0.229535 test-error:0.30597 [83] train-error:0.229535 test-error:0.30597 [84] train-error:0.229535 test-error:0.30597 [85] train-error:0.229535 test-error:0.30597 [86] train-error:0.229535 test-error:0.30597 [87] train-error:0.229535 test-error:0.30597 [88] train-error:0.229535 test-error:0.30597 [89] train-error:0.229535 test-error:0.30597 [90] train-error:0.229535 test-error:0.30597 [91] train-error:0.229535 test-error:0.30597 [92] train-error:0.229535 test-error:0.30597 [93] train-error:0.229535 test-error:0.30597 [94] train-error:0.227929 test-error:0.313433 [95] train-error:0.226324 test-error:0.313433 [96] train-error:0.223114 test-error:0.317164 [97] train-error:0.223114 test-error:0.317164 [98] train-error:0.223114 test-error:0.317164 [99] train-error:0.223114 test-error:0.317164 [100] train-error:0.223114 test-error:0.317164 [101] train-error:0.223114 test-error:0.317164 [102] train-error:0.223114 test-error:0.317164 [103] train-error:0.223114 test-error:0.317164 [104] train-error:0.223114 test-error:0.317164 [105] train-error:0.223114 test-error:0.317164 [106] train-error:0.223114 test-error:0.317164 [107] train-error:0.223114 test-error:0.317164 [108] train-error:0.223114 test-error:0.317164 [109] train-error:0.223114 test-error:0.317164 [110] train-error:0.223114 test-error:0.317164 [111] train-error:0.223114 test-error:0.317164 [112] train-error:0.223114 test-error:0.317164 [113] train-error:0.223114 test-error:0.317164 [114] train-error:0.223114 test-error:0.317164 [115] train-error:0.223114 test-error:0.317164 [116] train-error:0.223114 test-error:0.317164 [117] train-error:0.223114 test-error:0.317164 [118] train-error:0.223114 test-error:0.317164 [119] train-error:0.223114 test-error:0.317164 [120] train-error:0.223114 test-error:0.317164 [121] train-error:0.223114 test-error:0.317164 [122] train-error:0.223114 test-error:0.317164 [123] train-error:0.223114 test-error:0.317164 [124] train-error:0.224719 test-error:0.317164 [125] train-error:0.224719 test-error:0.317164 [126] train-error:0.224719 test-error:0.317164 [127] train-error:0.221509 test-error:0.317164 [128] train-error:0.223114 test-error:0.317164 [129] train-error:0.219904 test-error:0.313433 [130] train-error:0.215088 test-error:0.313433 [131] train-error:0.215088 test-error:0.313433 [132] train-error:0.215088 test-error:0.313433 [133] train-error:0.215088 test-error:0.313433 [134] train-error:0.215088 test-error:0.313433 [135] train-error:0.215088 test-error:0.313433 Stopping. Best iteration: [35] train-error:0.242376 test-error:0.294776 1234567# 평가from sklearn.metrics import accuracy_scorepred_probs = xgb_ml.predict(dtest)y_pred = [1 if x&gt; 0.5 else 0 for x in pred_probs]# 예측 라벨과 실제 라벨 사이의 정확도 측정accuracy_score(y_pred, y_test) 0.6865671641791045 Scikit-Learn API방식123456789101112131415161718192021from sklearn.tree import DecisionTreeClassifierfrom xgboost import XGBClassifier # API # dt = DecisionTreeClassifier()xgb_model = XGBClassifier(objective = 'binary:logistic', n_estimators=100, max_depth=3, learning_rate = 0.1, num_rounds = 400, random_state=42)w_list = [(X_train, y_train), (X_test, y_test)]xgb_model.fit(X_train, y_train, eval_set = w_list, eval_metric='error', verbose=True)y_probas = xgb_model.predict_proba(X_test)y_pred = [1 if x &gt; 0.5 else 0 for x in pred_probs]# 예측 라벨과 실제 라벨 사이의 정확도 측정accuracy_score(y_pred, y_test) [0] validation_0-error:0.260032 validation_1-error:0.302239 [1] validation_0-error:0.260032 validation_1-error:0.302239 [2] validation_0-error:0.260032 validation_1-error:0.302239 [3] validation_0-error:0.260032 validation_1-error:0.302239 [4] validation_0-error:0.260032 validation_1-error:0.302239 [5] validation_0-error:0.260032 validation_1-error:0.302239 [6] validation_0-error:0.260032 validation_1-error:0.302239 [7] validation_0-error:0.260032 validation_1-error:0.302239 [8] validation_0-error:0.260032 validation_1-error:0.302239 [9] validation_0-error:0.260032 validation_1-error:0.302239 [10] validation_0-error:0.260032 validation_1-error:0.302239 [11] validation_0-error:0.260032 validation_1-error:0.302239 [12] validation_0-error:0.260032 validation_1-error:0.302239 [13] validation_0-error:0.247191 validation_1-error:0.298507 [14] validation_0-error:0.247191 validation_1-error:0.298507 [15] validation_0-error:0.248796 validation_1-error:0.302239 [16] validation_0-error:0.248796 validation_1-error:0.302239 [17] validation_0-error:0.248796 validation_1-error:0.302239 [18] validation_0-error:0.248796 validation_1-error:0.302239 [19] validation_0-error:0.248796 validation_1-error:0.302239 [20] validation_0-error:0.248796 validation_1-error:0.302239 [21] validation_0-error:0.248796 validation_1-error:0.302239 [22] validation_0-error:0.248796 validation_1-error:0.302239 [23] validation_0-error:0.248796 validation_1-error:0.302239 [24] validation_0-error:0.248796 validation_1-error:0.302239 [25] validation_0-error:0.248796 validation_1-error:0.302239 [26] validation_0-error:0.248796 validation_1-error:0.302239 [27] validation_0-error:0.248796 validation_1-error:0.302239 [28] validation_0-error:0.247191 validation_1-error:0.302239 [29] validation_0-error:0.247191 validation_1-error:0.302239 [30] validation_0-error:0.247191 validation_1-error:0.302239 [31] validation_0-error:0.243981 validation_1-error:0.298507 [32] validation_0-error:0.247191 validation_1-error:0.302239 [33] validation_0-error:0.243981 validation_1-error:0.298507 [34] validation_0-error:0.243981 validation_1-error:0.298507 [35] validation_0-error:0.242376 validation_1-error:0.294776 [36] validation_0-error:0.24077 validation_1-error:0.294776 [37] validation_0-error:0.24077 validation_1-error:0.294776 [38] validation_0-error:0.24077 validation_1-error:0.294776 [39] validation_0-error:0.24077 validation_1-error:0.294776 [40] validation_0-error:0.24077 validation_1-error:0.294776 [41] validation_0-error:0.24077 validation_1-error:0.294776 [42] validation_0-error:0.24077 validation_1-error:0.294776 [43] validation_0-error:0.24077 validation_1-error:0.294776 [44] validation_0-error:0.24077 validation_1-error:0.302239 [45] validation_0-error:0.24077 validation_1-error:0.302239 [46] validation_0-error:0.24077 validation_1-error:0.302239 [47] validation_0-error:0.24077 validation_1-error:0.302239 [48] validation_0-error:0.24077 validation_1-error:0.302239 [49] validation_0-error:0.24077 validation_1-error:0.302239 [50] validation_0-error:0.24077 validation_1-error:0.302239 [51] validation_0-error:0.24077 validation_1-error:0.302239 [52] validation_0-error:0.23435 validation_1-error:0.302239 [53] validation_0-error:0.23435 validation_1-error:0.302239 [54] validation_0-error:0.232745 validation_1-error:0.298507 [55] validation_0-error:0.229535 validation_1-error:0.298507 [56] validation_0-error:0.229535 validation_1-error:0.298507 [57] validation_0-error:0.229535 validation_1-error:0.298507 [58] validation_0-error:0.229535 validation_1-error:0.298507 [59] validation_0-error:0.227929 validation_1-error:0.294776 [60] validation_0-error:0.227929 validation_1-error:0.298507 [61] validation_0-error:0.227929 validation_1-error:0.298507 [62] validation_0-error:0.227929 validation_1-error:0.298507 [63] validation_0-error:0.227929 validation_1-error:0.298507 [64] validation_0-error:0.227929 validation_1-error:0.298507 [65] validation_0-error:0.227929 validation_1-error:0.298507 [66] validation_0-error:0.227929 validation_1-error:0.298507 [67] validation_0-error:0.227929 validation_1-error:0.298507 [68] validation_0-error:0.227929 validation_1-error:0.298507 [69] validation_0-error:0.227929 validation_1-error:0.298507 [70] validation_0-error:0.227929 validation_1-error:0.298507 [71] validation_0-error:0.227929 validation_1-error:0.298507 [72] validation_0-error:0.227929 validation_1-error:0.302239 [73] validation_0-error:0.227929 validation_1-error:0.302239 [74] validation_0-error:0.229535 validation_1-error:0.30597 [75] validation_0-error:0.229535 validation_1-error:0.30597 [76] validation_0-error:0.229535 validation_1-error:0.30597 [77] validation_0-error:0.229535 validation_1-error:0.30597 [78] validation_0-error:0.229535 validation_1-error:0.30597 [79] validation_0-error:0.229535 validation_1-error:0.30597 [80] validation_0-error:0.229535 validation_1-error:0.30597 [81] validation_0-error:0.229535 validation_1-error:0.30597 [82] validation_0-error:0.229535 validation_1-error:0.30597 [83] validation_0-error:0.229535 validation_1-error:0.30597 [84] validation_0-error:0.229535 validation_1-error:0.30597 [85] validation_0-error:0.229535 validation_1-error:0.30597 [86] validation_0-error:0.229535 validation_1-error:0.30597 [87] validation_0-error:0.229535 validation_1-error:0.30597 [88] validation_0-error:0.229535 validation_1-error:0.30597 [89] validation_0-error:0.229535 validation_1-error:0.30597 [90] validation_0-error:0.229535 validation_1-error:0.30597 [91] validation_0-error:0.229535 validation_1-error:0.30597 [92] validation_0-error:0.229535 validation_1-error:0.30597 [93] validation_0-error:0.229535 validation_1-error:0.30597 [94] validation_0-error:0.227929 validation_1-error:0.313433 [95] validation_0-error:0.226324 validation_1-error:0.313433 [96] validation_0-error:0.223114 validation_1-error:0.317164 [97] validation_0-error:0.223114 validation_1-error:0.317164 [98] validation_0-error:0.223114 validation_1-error:0.317164 [99] validation_0-error:0.223114 validation_1-error:0.317164 0.6865671641791045 p275 = Scikit-Learn API방식 Scikit-Learn API방식, python Wrapper 방식 비교하기 lightGBM Python Wrapper 방식 &amp; LightGBM Scikit-Learn API방식lightGBM Python Wrapper 방식참고 https://lightgbm.readthedocs.io/en/latest/Parameters.html 1234567891011121314151617181920212223242526272829303132333435import lightgbm as lgb from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_scoreimport seaborn as sns # tips 데이터셋 titanic = sns.load_dataset('titanic')X = titanic[['pclass', 'parch', 'fare']]y = titanic['survived']# 훈련데이터, 테스트 데이터 분리X_train, X_test, y_train, y_test = train_test_split(X, y, stratify = y, test_size = 0.3, random_state=42)# XGBoost 코드와 유사하다. dtrain = lgb.Dataset(data = X_train, label = y_train)dtest = lgb.Dataset(data = X_test, label = y_test)params = {'max_depth':3, 'n_estimators':100, 'learning_rate': 0.1, 'objective':'binary', 'metric' : 'binary_error', 'num_boost_round' : 400, 'verbose' : 1} w_list = [dtrain, dtest]lgb_ml = lgb.train(params=params, train_set = dtrain,\\ early_stopping_rounds=100, valid_sets= w_list)pred_probs = lgb_ml.predict(X_test)y_pred=[1 if x &gt; 0.5 else 0 for x in pred_probs]# 예측 라벨과 실제 라벨 사이의 정확도 측정accuracy_score(y_pred, y_test) /usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `num_boost_round` in params. Will use it instead of argument warnings.warn(&quot;Found `{}` in params. Will use it instead of argument&quot;.format(alias)) [1] training's binary_error: 0.383628 valid_1's binary_error: 0.384328 Training until validation scores don't improve for 100 rounds. [2] training's binary_error: 0.383628 valid_1's binary_error: 0.384328 [3] training's binary_error: 0.354735 valid_1's binary_error: 0.369403 [4] training's binary_error: 0.29695 valid_1's binary_error: 0.354478 [5] training's binary_error: 0.272873 valid_1's binary_error: 0.33209 [6] training's binary_error: 0.272873 valid_1's binary_error: 0.33209 [7] training's binary_error: 0.269663 valid_1's binary_error: 0.317164 [8] training's binary_error: 0.269663 valid_1's binary_error: 0.317164 [9] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [10] training's binary_error: 0.269663 valid_1's binary_error: 0.309701 [11] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [12] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [13] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [14] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [15] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [16] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [17] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [18] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [19] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [20] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [21] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [22] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [23] training's binary_error: 0.271268 valid_1's binary_error: 0.313433 [24] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [25] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [26] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [27] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [28] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [29] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [30] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [31] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [32] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [33] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [34] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [35] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [36] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [37] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [38] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [39] training's binary_error: 0.248796 valid_1's binary_error: 0.309701 [40] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [41] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [42] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [43] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [44] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [45] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [46] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [47] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [48] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [49] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [50] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [51] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [52] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [53] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [54] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [55] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [56] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [57] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [58] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [59] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [60] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [61] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [62] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [63] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [64] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [65] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [66] training's binary_error: 0.243981 valid_1's binary_error: 0.309701 [67] training's binary_error: 0.23435 valid_1's binary_error: 0.309701 [68] training's binary_error: 0.23435 valid_1's binary_error: 0.309701 [69] training's binary_error: 0.23435 valid_1's binary_error: 0.309701 [70] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [71] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [72] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [73] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [74] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [75] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [76] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [77] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [78] training's binary_error: 0.232745 valid_1's binary_error: 0.313433 [79] training's binary_error: 0.232745 valid_1's binary_error: 0.313433 [80] training's binary_error: 0.232745 valid_1's binary_error: 0.313433 [81] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [82] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [83] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [84] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [85] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [86] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [87] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [88] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [89] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [90] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [91] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [92] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [93] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [94] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [95] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [96] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [97] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [98] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [99] training's binary_error: 0.221509 valid_1's binary_error: 0.317164 [100] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [101] training's binary_error: 0.23114 valid_1's binary_error: 0.30597 [102] training's binary_error: 0.23114 valid_1's binary_error: 0.30597 [103] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [104] training's binary_error: 0.221509 valid_1's binary_error: 0.317164 [105] training's binary_error: 0.221509 valid_1's binary_error: 0.317164 [106] training's binary_error: 0.224719 valid_1's binary_error: 0.313433 [107] training's binary_error: 0.224719 valid_1's binary_error: 0.317164 [108] training's binary_error: 0.224719 valid_1's binary_error: 0.317164 [109] training's binary_error: 0.224719 valid_1's binary_error: 0.317164 [110] training's binary_error: 0.224719 valid_1's binary_error: 0.317164 [111] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [112] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [113] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [114] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [115] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [116] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [117] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [118] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [119] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [120] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [121] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [122] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [123] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [124] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [125] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [126] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [127] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [128] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [129] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [130] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [131] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [132] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [133] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [134] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [135] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [136] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [137] training's binary_error: 0.219904 valid_1's binary_error: 0.309701 [138] training's binary_error: 0.219904 valid_1's binary_error: 0.309701 [139] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [140] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [141] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [142] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [143] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [144] training's binary_error: 0.221509 valid_1's binary_error: 0.320896 [145] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [146] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [147] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [148] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [149] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [150] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [151] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [152] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [153] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [154] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [155] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [156] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [157] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [158] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [159] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [160] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [161] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [162] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [163] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [164] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [165] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [166] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [167] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [168] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [169] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [170] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [171] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [172] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [173] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [174] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [175] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [176] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [177] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [178] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [179] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [180] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [181] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [182] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [183] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [184] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [185] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [186] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [187] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [188] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [189] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [190] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [191] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [192] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [193] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [194] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [195] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [196] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [197] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [198] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [199] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [200] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [201] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 Early stopping, best iteration is: [101] training's binary_error: 0.23114 valid_1's binary_error: 0.30597 0.6940298507462687 LightGBM Scikit-Learn API방식123456789101112131415161718192021222324252627282930from lightgbm import LGBMClassifierfrom sklearn.metrics import accuracy_score# model w_list = [dtrain, dtest]model = LGBMClassifier(objective = 'binary', metric = 'binary_error', n_estimators=100, learning_rate=0.1, max_depth=3, num_boost_round = 400, random_state = 32)model.fit(X_train, y_train, eval_set = [(X_train, y_train), (X_test, y_test)], verbose=1, early_stopping_rounds = 100)y_probas = model.predict_proba(X_test) y_pred=[1 if x &gt; 0.5 else 0 for x in y_probas[:, 1]] # 예측 라벨(0과 1로 예측)# 예측 라벨과 실제 라벨 사이의 정확도 측정accuracy_score(y_pred, y_test) /usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `num_boost_round` in params. Will use it instead of argument warnings.warn(&quot;Found `{}` in params. Will use it instead of argument&quot;.format(alias)) [1] training's binary_error: 0.383628 valid_1's binary_error: 0.384328 Training until validation scores don't improve for 100 rounds. [2] training's binary_error: 0.383628 valid_1's binary_error: 0.384328 [3] training's binary_error: 0.354735 valid_1's binary_error: 0.369403 [4] training's binary_error: 0.29695 valid_1's binary_error: 0.354478 [5] training's binary_error: 0.272873 valid_1's binary_error: 0.33209 [6] training's binary_error: 0.272873 valid_1's binary_error: 0.33209 [7] training's binary_error: 0.269663 valid_1's binary_error: 0.317164 [8] training's binary_error: 0.269663 valid_1's binary_error: 0.317164 [9] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [10] training's binary_error: 0.269663 valid_1's binary_error: 0.309701 [11] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [12] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [13] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [14] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [15] training's binary_error: 0.264848 valid_1's binary_error: 0.309701 [16] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [17] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [18] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [19] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [20] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [21] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [22] training's binary_error: 0.266453 valid_1's binary_error: 0.313433 [23] training's binary_error: 0.271268 valid_1's binary_error: 0.313433 [24] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [25] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [26] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [27] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [28] training's binary_error: 0.258427 valid_1's binary_error: 0.309701 [29] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [30] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [31] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [32] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [33] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [34] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [35] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [36] training's binary_error: 0.255217 valid_1's binary_error: 0.309701 [37] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [38] training's binary_error: 0.255217 valid_1's binary_error: 0.317164 [39] training's binary_error: 0.248796 valid_1's binary_error: 0.309701 [40] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [41] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [42] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [43] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [44] training's binary_error: 0.248796 valid_1's binary_error: 0.313433 [45] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [46] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [47] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [48] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [49] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [50] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [51] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [52] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [53] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [54] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [55] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [56] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [57] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [58] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [59] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [60] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [61] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [62] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [63] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [64] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [65] training's binary_error: 0.247191 valid_1's binary_error: 0.313433 [66] training's binary_error: 0.243981 valid_1's binary_error: 0.309701 [67] training's binary_error: 0.23435 valid_1's binary_error: 0.309701 [68] training's binary_error: 0.23435 valid_1's binary_error: 0.309701 [69] training's binary_error: 0.23435 valid_1's binary_error: 0.309701 [70] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [71] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [72] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [73] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [74] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [75] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [76] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [77] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [78] training's binary_error: 0.232745 valid_1's binary_error: 0.313433 [79] training's binary_error: 0.232745 valid_1's binary_error: 0.313433 [80] training's binary_error: 0.232745 valid_1's binary_error: 0.313433 [81] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [82] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [83] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [84] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [85] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [86] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [87] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [88] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [89] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [90] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [91] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [92] training's binary_error: 0.229535 valid_1's binary_error: 0.309701 [93] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [94] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [95] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [96] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [97] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [98] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [99] training's binary_error: 0.221509 valid_1's binary_error: 0.317164 [100] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [101] training's binary_error: 0.23114 valid_1's binary_error: 0.30597 [102] training's binary_error: 0.23114 valid_1's binary_error: 0.30597 [103] training's binary_error: 0.227929 valid_1's binary_error: 0.309701 [104] training's binary_error: 0.221509 valid_1's binary_error: 0.317164 [105] training's binary_error: 0.221509 valid_1's binary_error: 0.317164 [106] training's binary_error: 0.224719 valid_1's binary_error: 0.313433 [107] training's binary_error: 0.224719 valid_1's binary_error: 0.317164 [108] training's binary_error: 0.224719 valid_1's binary_error: 0.317164 [109] training's binary_error: 0.224719 valid_1's binary_error: 0.317164 [110] training's binary_error: 0.224719 valid_1's binary_error: 0.317164 [111] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [112] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [113] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [114] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [115] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [116] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [117] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [118] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [119] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [120] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [121] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [122] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [123] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [124] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [125] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [126] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [127] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [128] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [129] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [130] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [131] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [132] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [133] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [134] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [135] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [136] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [137] training's binary_error: 0.219904 valid_1's binary_error: 0.309701 [138] training's binary_error: 0.219904 valid_1's binary_error: 0.309701 [139] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [140] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [141] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [142] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [143] training's binary_error: 0.223114 valid_1's binary_error: 0.309701 [144] training's binary_error: 0.221509 valid_1's binary_error: 0.320896 [145] training's binary_error: 0.223114 valid_1's binary_error: 0.313433 [146] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [147] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [148] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [149] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [150] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [151] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [152] training's binary_error: 0.221509 valid_1's binary_error: 0.313433 [153] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [154] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [155] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [156] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [157] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [158] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [159] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [160] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [161] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [162] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [163] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [164] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [165] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [166] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [167] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [168] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [169] training's binary_error: 0.219904 valid_1's binary_error: 0.324627 [170] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [171] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [172] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [173] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [174] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [175] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [176] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [177] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [178] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [179] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [180] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [181] training's binary_error: 0.221509 valid_1's binary_error: 0.328358 [182] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [183] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [184] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [185] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [186] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [187] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [188] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [189] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [190] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [191] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [192] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [193] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [194] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [195] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [196] training's binary_error: 0.216693 valid_1's binary_error: 0.320896 [197] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [198] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [199] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [200] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 [201] training's binary_error: 0.215088 valid_1's binary_error: 0.317164 Early stopping, best iteration is: [101] training's binary_error: 0.23114 valid_1's binary_error: 0.30597 0.6940298507462687","link":"/2022/07/06/day0706_1200/"},{"title":"캐글입문","text":"1234567891011121314151617# This Python 3 environment comes with many helpful analytics libraries installed# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python# For example, here's several helpful packages to loadimport numpy as np # linear algebraimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)# Input data files are available in the read-only &quot;../input/&quot; directory# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directoryimport osfor dirname, _, filenames in os.walk('/kaggle/input'): for filename in filenames: print(os.path.join(dirname, filename))# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session 라이브러리 불러오기 주요 라이브러리 버전을 확인한다 123456789101112131415import pandas as pd import numpy as np import matplotlib as mpl import seaborn as sns import sklearnimport xgboost as xgb import lightgbm as lgbprint(&quot;pandas version :&quot;, pd.__version__)print(&quot;numpy version :&quot;, np.__version__)print(&quot;matplotlib version :&quot;, mpl.__version__)print(&quot;seaborn version :&quot;, sns.__version__)print(&quot;scikit-learn version :&quot;, sklearn.__version__)print(&quot;xgboost version :&quot;, xgb.__version__)print(&quot;lightgbm version :&quot;, lgb.__version__) 데이터 불러오기 pandas 활용 12345DATA_PATH = '/kaggle/input/house-prices-advanced-regression-techniques/'train = pd.read_csv(DATA_PATH + &quot;train.csv&quot;)test = pd.read_csv(DATA_PATH + &quot;test.csv&quot;)print(&quot;데이터 불러오기 완료!&quot;) 데이터 둘러보기 데이터를 둘러봅니다 train : 행갯수 1460 열갯수81 (SalePrice 존재) test : 행갯수 1459 열갯수 80 (SalePrice 컬럼 미존재) 1train.shape, test.shape 1train.info() 1test.info() 데이터 시각화 여기에서는 생략 종속변수 분포확인필요 샤피로 검정 정규분포인가요? 정규분포가 아니면 &gt; 로그변환, 박스코스 변환 등등 정규분포로 만들어줘야한다 선형모델의 상능을 올리기 위해서 123456789101112import matplotlib.pyplot as pltfrom scipy.stats import norm(mu,sigma) = norm.fit(train['SalePrice'])print(&quot;평균:&quot;, mu)print(&quot;표준편차:&quot;,sigma)fig, ax=plt.subplots(figsize=(10,6))sns.histplot(train['SalePrice'])ax.set(title=&quot;SalePrice Distribution&quot;)ax.axvline(mu,color='r', linestyle='--')ax.text(mu+10000,160,'Mean of SalePrice', color = 'r')plt.show() 로그변환을 해서 정규분포로 변환해준다 1train['SalePrice'][:10] 로그변환을 해서 정규분포로 바꿔준다 1234567891011121314# 로그 변환train['SalePrice']= np.log1p(train['SalePrice'])(mu,sigma) = norm.fit(train['SalePrice'])print(&quot;평균:&quot;, mu)print(&quot;표준편차:&quot;,sigma)fig, ax=plt.subplots(figsize=(10,6))sns.histplot(train['SalePrice'])ax.set(title=&quot;SalePrice Distribution&quot;)ax.axvline(mu,color='r', linestyle='--')ax.text(mu+0.0001,160,'Mean of SalePrice', color = 'r')ax.set_ylim(0,170)plt.show() 데이터 전처리 컬럼 갯수가 많을때, 어떤 컬럼을 삭제할지 결정 머신러닝 연산속도부터 높여야 한다 데이터 ID값 제거1train ['Id'][:10] 12345train_ID = train['Id']test_ID = test['Id']train = train.drop(['Id'], axis=1)train.shape 12test = test.drop(['Id'], axis=1)test.shape Y값 추출 train데이터에 SalePrice만 따로 저장한다 123y=train['SalePrice']train = train.drop('SalePrice', axis = 1)y 1test.shape 데이터 합치기 실전 원칙 : train 따로 정리 / test 따로 정리 Data Leakage오류를 범할 가능성이 높다 12all_df = pd.concat([train, test]).reset_index(drop=True)all_df.shape 결측치 확인 결측치의 비율 확인하는 사용자 정의 함수 작 12345678def check_na(data, head_num = 6): isnull_na = (data.isnull().sum() / len(data)) * 100 data_na = isnull_na.drop(isnull_na[isnull_na == 0].index).sort_values(ascending=False) missing_data = pd.DataFrame({'Missing Ratio' :data_na, 'Data Type': data.dtypes[data_na.index]}) print(&quot;결측치 데이터 컬럼과 건수:\\n&quot;, missing_data.head(head_num))check_na(all_df, 20) 결측치 제거 결측치 비율이 높은 변수들을 모두 제거하기로 했다 123all_df = all_df.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'LotFrontage'], axis = 1)print(all_df.shape)check_na(all_df) 결측치 채우기 train데이터와 test데이터가 섞이면 안됨 train/test 분리해서 진행해야한다 문자데이터: 자주 등장하는 빈도값으로 채움 숫자데이더: 평균이 아니라, 중간값으로 채움 12#all_df['BsmtCond'].value_counts().index[0]all_df['BsmtCond'].mode()[0] 12345678910111213141516171819202122import numpy as np# 문자열 데이터만 추출cat_all_vars = train.select_dtypes(exclude=[np.number])print(&quot;The whole number of all_vars&quot;, len(list(cat_all_vars)))# 문자열 데이터 중에서 이미 기 삭제했던 Feature들이 있었기 때문에, # 한번 더 Feature를 정리하는 코드를 작성한다. # 따라서 38개의 Feature만 추출했다. final_cat_vars = []for v in cat_all_vars: if v not in ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu']: final_cat_vars.append(v)print(&quot;The whole number of final_cat_vars&quot;, len(final_cat_vars))# 이제 각 Feature 마다 빈도수가 가장 많이 나타나는 값을 추가하는 코드를 작성한다. for i in final_cat_vars: all_df[i] = all_df[i].fillna(all_df[i].mode()[0])# 이제 수치형 데이터만 남은 것을 확인한다. check_na(all_df, 20) 수치형 데이터의 결측치를 추가할수 있다 이번에는 수치형 데이터만 추출한다 1234567891011121314151617import numpy as np# 방법은 기존과 동일하다. # 이번에는 수치형 데이터만 추출한다. num_all_vars = list(train.select_dtypes(include=[np.number]))print(&quot;The whole number of all_vars&quot;, len(num_all_vars))# 수치형 데이터 중, 결측치가 많았던 `LotFrontage`만 처리한다. num_all_vars.remove('LotFrontage')print(&quot;The whole number of final_cat_vars&quot;, len(num_all_vars))# 이번에는 수치형 데이터의 평균이 아닌 중간값을 지정했다. for i in num_all_vars: all_df[i].fillna(value=all_df[i].median(), inplace=True)check_na(all_df, 20) 1all_df.info() 도출 변수 새로운 도출변수를 작성 (기존 변수 활용) 기존 변수 제거 각 층의 면적으로 모두 더해 전체 면적으러로 계산한 새로운 변수를 작성한다 123all_df['TotalSF'] = all_df['TotalBsmtSF'] + all_df['1stFlrSF'] + all_df['2ndFlrSF']all_df = all_df.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF'], axis=1)print(all_df.shape) 1234all_df['Total_Bathrooms'] = (all_df['FullBath'] + (0.5 * all_df['HalfBath']) + all_df['BsmtFullBath'] + (0.5 * all_df['BsmtHalfBath']))all_df['Total_porch_sf'] = (all_df['OpenPorchSF'] + all_df['3SsnPorch'] + all_df['EnclosedPorch'] + all_df['ScreenPorch'])all_df = all_df.drop(['FullBath', 'HalfBath', 'BsmtFullBath', 'BsmtHalfBath', 'OpenPorchSF', '3SsnPorch', 'EnclosedPorch', 'ScreenPorch'], axis=1)print(all_df.shape) 연도와 관련된 변수를 추출하는 코드 작성 12345678910num_all_vars = list(train.select_dtypes(include=[np.number]))year_feature = []for var in num_all_vars: if 'Yr' in var: year_feature.append(var) elif 'Year' in var: year_feature.append(var) else: print(var, &quot;is not related with Year&quot;)print(year_feature) 12345678fig, ax = plt.subplots(3, 1, figsize=(10, 6), sharex=True, sharey=True)for i, var in enumerate(year_feature): if var != 'YrSold': ax[i].scatter(train[var], y, alpha=0.3) ax[i].set_title('{}'.format(var), size=15) ax[i].set_ylabel('SalePrice', size=15, labelpad=12.5)plt.tight_layout()plt.show() 12all_df = all_df.drop(['YearBuilt', 'GarageYrBlt'], axis=1)print(all_df.shape) 12345YearsSinceRemodel = train['YrSold'].astype(int) - train['YearRemodAdd'].astype(int)fig, ax = plt.subplots(figsize=(10, 6))ax.scatter(YearsSinceRemodel, y, alpha=0.3)plt.show() 123all_df['YearsSinceRemodel'] = all_df['YrSold'].astype(int) - all_df['YearRemodAdd'].astype(int)all_df = all_df.drop(['YrSold', 'YearRemodAdd'], axis=1)print(all_df.shape) 더미 변수 더미 변수란 독립변수를 0과 1로 변환하는 변수를 말한다 1all_df['PoolArea'].value_counts() 사용자 정의함수 만들기 123456def count_dummy(x): if x &gt; 0: return 1 else: return 0 12all_df['PoolArea']= all_df['PoolArea'].apply(count_dummy)all_df['PoolArea'].value_counts() 12all_df['GarageArea']= all_df['GarageArea'].apply(count_dummy)all_df['GarageArea'].value_counts() 12all_df['Fireplaces']= all_df['Fireplaces'].apply(count_dummy)all_df['Fireplaces'].value_counts() 1all_df.info() Label Encoding, Ordinal Enciding, One Hot Encoding 인코딩은 문자 데이터를 수치로 변환하는 방법중의 하나이 123456789101112# 분류모형# 종속변수(양성, 음성)from sklearn.preprocessing import LabelEncoderimport pandas as pdtemp = pd.DataFrame({'Food_Name': ['Apple', 'Chicken', 'Broccoli'], 'Calories': [95, 231, 50]})encoder = LabelEncoder()encoder.fit(temp['Food_Name'])labels = encoder.transform(temp['Food_Name'])print(list(temp['Food_Name']), &quot;==&gt;&quot;, labels) Ordinal Encoding은 독립변수에만 사용한다 123456789from sklearn.preprocessing import OrdinalEncoderimport pandas as pdtemp = pd.DataFrame({'Food_Name': ['Apple', 'Chicken', 'Broccoli'], 'Calories': [95, 231, 50]})encoder = OrdinalEncoder()labels = encoder.fit_transform(temp[['Food_Name']])print(list(temp['Food_Name']), &quot;==&gt;&quot;, labels.tolist()) Pandas 메서드 통해서 직접 숫자로 변환 12345temp = pd.DataFrame({'Food_Name': ['Apple', 'Chicken', 'Broccoli'], 'Calories': [95, 231, 50]})temp['Food_No'] = temp.Food_Name.replace(to_replace = ['Apple', 'Chicken', 'Broccoli'], value = [1, 2, 3])print(temp[['Food_Name', 'Food_No']]) One Hot Encoding sscikit-learn 방식이 조금 복잡하다 그래서 보통은 pandas get_dummies() 함수를 활용한 1234567891011121314import pandas as pdfrom sklearn.preprocessing import LabelBinarizertemp = pd.DataFrame({'Food_Name': ['Apple', 'Chicken', 'Broccoli'], 'Calories': [95, 231, 50]})encoder = LabelBinarizer()encoder.fit(temp['Food_Name'])transformed = encoder.transform(temp['Food_Name'])ohe_df = pd.DataFrame(transformed)temp = pd.concat([temp, ohe_df], axis=1).drop(['Food_Name'], axis=1)temp.columns = ['Calories', 'Food_Name_Apple', 'Food_Name_Broccoli', 'Food_Name_Chicken']print(temp)print(temp.shape) 12345678import pandas as pdtemp = pd.DataFrame({'Food_Name': ['Apple', 'Chicken', 'Broccoli'], 'Calories': [95, 231, 50]})temp = pd.get_dummies(temp)print(temp)print(temp.shape) 본 데이터에 적용 여기서는 Ordinal Encoding 적용안한다(단, 실전에서는 꼭 찾아서 해야한다) One Hot Encoding 적용 12all_df = pd.get_dummies(all_df).reset_index(drop=True)all_df.shape train, test 데이터 합쳐서 진행 train, test 데이터 재분리 1234X = all_df.iloc[:len(y), :]test = all_df.iloc[len(y):, :]X.shape, y.shape, test.shape 과제 남은 시간동안 교재를 보고 머신러닝 학습 및 RMSE를 구하세요 데이터 셋 분리 X 데이터를 X_train, X_test, y_train, y_test로 구분 123456from sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.3, random_state = 42)X_train.shape, X_test.shape, y_train.shape, y_test.shape 평가 지표 MAE, MSE, RMSE MAE 실제값과 예측값의 차이, 오차, 오차들의 절댓값 평균을 말한다 12345678910111213def mean_absolute_error(y_true, y_pred): error = 0 for yt, yp in zip(y_true, y_pred): # yt : 실젯값 # yp : 예측값 error = error + np.abs(yt - yp) # 절댓값 오차의 평균 mae = error / len(y_true) return maey_true = [400, 300, 800]y_pred = [380, 320, 777]print(&quot;MAE:&quot;, mean_absolute_error(y_true, y_pred)) 1234567891011121314151617181920212223242526272829303132333435363738394041import numpy as np def mean_absolute_error(y_true, y_pred): error = 0 for yt, yp in zip(y_true, y_pred): # yt : 실젯값 # yp : 예측값 error = error + np.abs(yt - yp) # 절댓값 오차의 평균 mae = error / len(y_true) return maedef mean_squared_error(y_true, y_pred): error = 0 for yt, yp in zip(y_true, y_pred): # yt : 실젯값 # yp : 예측값 error = error + (yt - yp) ** 2 # 제곱값 오차의 평균 mse = error / len(y_true) return msedef root_mean_squared_error(y_true, y_pred): error = 0 for yt, yp in zip(y_true, y_pred): # yt : 실젯값 # yp : 예측값 error = error + (yt - yp) ** 2 # 제곱값 오차의 평균 mse = error / len(y_true) # 제곱근 추가 rmse = np.round(np.sqrt(mse), 3) return rmsey_true = [400, 300, 800]y_pred = [380, 320, 777]print(&quot;MAE:&quot;, mean_absolute_error(y_true, y_pred))print(&quot;MSE:&quot;, mean_squared_error(y_true, y_pred))print(&quot;RMSE:&quot;, root_mean_squared_error(y_true, y_pred)) 12345#from sklearn.linear_model import LinearRegression#lr_model = LinearRegression()#lr_model.fit(X_train, y_train)#print(lr_model.score(X_train, y_train))#print(lr_model.score(X_test, y_test)) 모형만들기1234from sklearn.metrics import mean_squared_errordef rmse(y_true, y_pred): return no.squre(mean_squre_error(y_true, y_pred)) 머신러닝 모형정의, 검증평가 교차 검증 함수 만들기 참고 https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html 123from sklearn.metrics import mean_squared_errordef rmse(y_true, y_pred): return np.sqrt(mean_squared_error(y_true, y_pred)) 123456789101112131415161718192021# 교차 검증from sklearn.model_selection import KFold, cross_val_score # 모형 정의from sklearn.linear_model import LinearRegression def cv_rmse(model, n_folds=5): cv = KFold(n_splits = n_folds, random_state=42, shuffle=True) rmse_list = np.sqrt(-cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=cv)) print('CV RMSE Value List:', np.round(rmse_list, 4)) print('CV RMSE mean List:', np.round(np.mean(rmse_list), 4)) return rmse_list rmse_scores = {} lr_model = LinearRegression()score = cv_rmse(lr_model, n_folds=5)print('linear regression - mean : {:.4f} (std: {:.4f})'.format(score.mean(), score.std()))rmse_scores['Linear Regression'] = (score.mean(), score.std()) 1234567891011121314151617from sklearn.metrics import mean_squared_errorfrom sklearn.model_selection import KFold, cross_val_scorefrom sklearn.linear_model import LinearRegressionfrom lightgbm import LGBMRegressorfrom xgboost import XGBRegressordef cv_rmse(model, n_folds=5): cv = KFold(n_splits=n_folds, random_state=42, shuffle=True) rmse_list = np.sqrt(-cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=cv)) print('CV RMSE value list:', np.round(rmse_list, 4)) print('CV RMSE mean value:', np.round(np.mean(rmse_list), 4)) return (rmse_list)n_folds = 5rmse_scores = {}#lr_model = LinearRegression()lgb_model = LGBMRegressor() 123score = cv_rmse(lr_model, n_folds)print(&quot;linear regression - mean: {:.4f} (std: {:.4f})&quot;.format(score.mean(), score.std()))rmse_scores['linear regression'] = (score.mean(), score.std()) 제출 방법 123456789from sklearn.model_selection import cross_val_predict# X = all_df.iloc[:len(y), :]# X_test = all_df.iloc[len(y):, :]# X.shape, y.shape, X_test.shapelr_model_fit = lr_model.fit(X_train, y_train)final_preds = np.floor(np.expm1(lr_model_fit.predict(test)))print(final_preds) 1234submission = pd.read_csv(DATA_PATH + &quot;sample_submission.csv&quot;)submission.iloc[:,1] = final_predsprint(submission.head())submission.to_csv(&quot;submission.csv&quot;, index=False)","link":"/2022/07/07/lecture-in-humanedu/"}],"tags":[],"categories":[]}